(window.webpackJsonpEthanDoc=window.webpackJsonpEthanDoc||[]).push([[34],{215:function(e,n,r){"use strict";var t=r(12),u=r.n(t),s=r(1),d=r.n(s),m=r(34),f=r(27),p=r(42),h=r(44);n.a=function(c){return function(e){var n=Object(s.useState)(""),n=u()(n,2),t=n[0],a=n[1],n=Object(s.useState)([]),o=u()(n,1)[0],r=e.location.hash,l=Object(f.useUpdate)(),n=Object(s.useCallback)(function(e){e.forEach(function(e){o.push(e)}),l()},[]),i=Object(s.useCallback)(function(){var e;!r||(e=document.querySelector(r))&&setTimeout(function(){e.scrollIntoView()},50)},[r]);Object(s.useEffect)(function(){i();function e(){var r,t=document.documentElement.scrollTop,e=o.filter(function(e){return 3===e.level&&e.children[0]});0!==e.length&&(r=e[0].id,e.forEach(function(e){var n=document.querySelector("#".concat(e.id));n&&n.offsetTop<=t&&(r=e.id)}),a(r))}return document.addEventListener("scroll",e),e(),function(){document.removeEventListener("scroll",e)}},[]);return d.a.createElement("div",{className:Object(p.f)("_")},d.a.createElement(c,{onHeadingSetted:n}),!e.noNav&&d.a.createElement(m.G,{className:Object(p.f)("sticky"),top:50},d.a.createElement("div",{className:Object(p.f)("nav")},o.map(function(e,n){var r=e.children.filter(function(e){return"string"==typeof e});return d.a.createElement("a",{key:n,className:Object(p.f)("level-".concat(e.level),t===e.id&&"active"),onClick:function(e){0===h.a.location.search.indexOf("?example=")?h.a.push("".concat(h.a.location.pathname,"?example=").concat(e.replace("heading-",""))):(h.a.push("".concat(h.a.location.pathname,"#").concat(e)),(e=document.getElementById(e))&&e.scrollIntoView())}.bind(null,e.id)},r)}))))}}},216:function(e,n,r){"use strict";var t=r(8),c=r.n(t),f=r(1),p=r.n(f),t=r(12),h=r.n(t),t=r(0),a=r.n(t),t=r(25),u=r.n(t),t=r(23),s=r.n(t),t=r(217),d=r.n(t),m=r(49),g=r(14),v=r(42),b=r(35),t=r(10),o=r.n(t),t=r(218),l=r.n(t),x=(r(219),function(e){var n=e.language,n=void 0===n?"lang-jsx":n,r=e.onHighLight,e=e.value,t=Object(f.useRef)(null);return Object(f.useEffect)(function(){var e=t.current;l.a.highlightElement(e,!1,function(){r&&r(e.offsetHeight)})},[]),p.a.createElement("pre",{ref:t,className:o()(n||"lang-jsx",Object(v.a)("pre"))},p.a.createElement("code",null,e))}),t=r(74),E=r.n(t),y=r(34),w=r(72),S=r(44),R=p.a.createElement("div",{className:Object(v.a)("placeholder")},p.a.createElement(y.E,{size:"54px",name:"four-dots",color:"#53a0fd"}));function U(e){var n=e.component,r=e.id,t=e.name,a=e.rawText,o=e.title,l=Object(f.useRef)(null),i=Object(f.useState)(!1),c=h()(i,2),u=c[0],s=c[1],e=Object(f.useState)(Object(f.createElement)(n)),i=h()(e,1)[0],c=Object(f.useState)(),n=h()(c,2),d=n[0],m=n[1],e=Object(f.useState)(),c=(h()(e,1)[0],a.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim());Object(f.useEffect)(function(){l.current&&(l.current.style.height=u?"".concat(d,"px"):"0")},[u]);n=function(e){return p.a.createElement("a",{className:Object(v.a)("toggle"),onClick:function(e){s(!u)}.bind(null,e)},p.a.createElement(w.a,{name:u?"code-close":"code"}))},e=S.a.location.search,a="?example=";if(0===e.indexOf(a)&&(e=e.replace(a,""),t.indexOf(e)<0))return null;t=o.split("\n"),e=E()(t),t=e[0],e=e.slice(1),t=t&&t.trim();return p.a.createElement(f.Fragment,null,t&&p.a.createElement("h3",{key:"0",id:r},t),p.a.createElement(y.r,{placeholder:R},p.a.createElement("div",{className:Object(v.a)("_",u&&"showcode")},p.a.createElement("div",{className:Object(v.a)("body")},i),0<o.length&&p.a.createElement("div",{className:Object(v.a)("desc")},e.map(function(e,n){return p.a.createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})}),n(!1)),p.a.createElement("div",{ref:l,className:Object(v.a)("code")},p.a.createElement(x,{onHighLight:function(e){m(e)},value:c}),n(!0)))))}U.propTypes={component:a.a.func.isRequired,id:a.a.string,name:a.a.string,rawText:a.a.string,title:a.a.string.isRequired},U.defaultProps={rawText:""};t=function(e){var n=e.children,e=Object(f.useState)(!1),e=h()(e,2),r=e[0],t=e[1],e=n.map(function(e){return e.replace(/"fn#fn/g,"").replace(/fn#fn"/g,"").replace(/\\n/g,"\n")}),n=r?"pre":"div";return p.a.createElement("div",{onClick:function(){t(!r)},className:Object(v.e)("console")},p.a.createElement(n,null,e))};t.propTypes={children:a.a.array},t.defaultProps={children:[]};var j=t;function i(e){var e=e.children,n=s()(e[1].props.children);try{n.sort(function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])})}catch(e){console.log("sort fail...")}return p.a.createElement("div",{style:{overflow:"auto"}},p.a.createElement("table",{className:"doc-api-table"},e[0],p.a.cloneElement(e[1],{children:n})))}i.propTypes={children:a.a.any},i.defaultProps={};var B=i,O=/^<code name="([\w|-]+)" /,F=/^<example name="([\w|-]+)"/;function T(e){var n=e.onHeadingSetted,a=e.codes,o=e.examples,r=e.source,e=Object(f.useState)([]),t=h()(e,1)[0],e=Object(f.useState)({}),l=h()(e,1)[0];Object(f.useEffect)(function(){n&&n(t)},[]);function i(e){t.push(e)}return p.a.createElement(d.a,{className:Object(v.e)("_"),source:r,renderers:{code:x,heading:function(e){var n,r=e.level,t=e.children,a="".concat(r,"-").concat(t[0]),o="h".concat(r);return"object"===u()(t[0])?p.a.createElement(o,null,t):(l[a]||(e="heading-".concat((n=r,e=t[0],4===n?Object(g.c)():"".concat(n,"-").concat((e||"").replace(/[\W|-]/g,"-")))),2!==r&&3!==r||i({id:e,level:r,children:t}),l[a]=p.a.createElement(o,{id:e},t)),l[a])},html:function(e){if("<example />"===e.value)return function(){if(l.examples)return l.examples;if(!o)return p.a.createElement("div",null);var e=Object(b.b)("示例","Example"),n="heading-example-h";return i({id:n,level:2,children:[e]}),l.examples=[p.a.createElement("h2",{key:"h",id:n},e)].concat(s()(o.map(function(e,n){if(/\d+-/.test(e.name)){var r="heading-".concat(e.name),t=e.title.split("\n"),t=h()(t,1)[0];return i({id:r,level:3,children:[t]}),p.a.createElement(U,c()({key:n,id:r},e))}}))),l.examples}();var n,r=e.value.match(F);if(r)return n=r[1],e.value.indexOf("noExpand"),t="example-".concat(n),l[t]||(r=(o||[]).find(function(e){return e.name===n}),l[t]=r?p.a.createElement(U,r):null),l[t];if("<br>"===e.value||"<br />"===e.value)return p.a.createElement("br",null);var t=e.value.match(O);return t?(e=t[1],(t=a[e])?[p.a.createElement(x,{key:"cb",value:t.text})].concat(s()(t.log.map(function(e,n){return p.a.createElement(j,{key:n},e)}))):(console.error("Code ".concat(e," not existed")),null)):null},table:B,link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?p.a.createElement("a",{href:e.href,target:n},e.children):p.a.createElement(m.a,{to:e.href,target:n},e.children)}}})}T.propTypes={children:a.a.oneOfType([a.a.element,a.a.array]),codes:a.a.object,examples:a.a.array,onHeadingSetted:a.a.func,source:a.a.string.isRequired},T.defaultProps={children:null,examples:null,onHeadingSetted:void 0};var C=r(73),I=(r(215),A.propTypes={loader:a.a.func,source:a.a.string},A.defaultProps={loader:void 0,source:void 0},Object(f.memo)(A));function A(e){var n=Object(f.useState)(e.source),r=h()(n,2),n=r[0],t=r[1];return Object(f.useEffect)(function(){e.loader&&e.loader().then(function(e){t(e.default)})},[]),n?p.a.createElement(T,c()({},e,{source:n})):p.a.createElement(C.a,{style:{minHeight:200}})}n.a=I},629:function(e,n){e.exports="# Upload\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Upload\r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| accept | string | 无 | 上传文件类型, 和标准一致, 详见[accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) |\r\n| action | string | 必填 | 上传地址 |\r\n| children | ReactNode | 必填 | 上传占位内容 |\r\n| className | string | 无 | 扩展className |\r\n| defaultValue | any[] | 无 | 默认值 |\r\n| headers | object | 无 | 请求头部信息 |\r\n| htmlName | string | 无 | 服务端接收的 filename，不填使用 name |\r\n| limit | number | 100 | 最大上传文件数 |\r\n| disabled | boolean | false | 是否禁用上传行为 | \r\n| name | string | 无 | Form 内存取数据的 key |\r\n| request | (options: object) => void | 无 | 自定义上传方法<br /> options: 上传的配置 |\r\n| onChange | (values: any[]) => void | 无 | 值改变回调(上传成功，删除)<br />values: 数组, 其每个值是 onSuccess 的返回值 |\r\n| onSuccess | (res: string, file: File, data: any, xhr: any) => any | 无 | 上传成功回调，返回结果作为新的 value<br />res: 上传接口返回结果<br />file: 选择的文件<br />data: 请求的数据<br />xhr: 返回的 response |\r\n| onHttpError | (xhr: any) => string | 无 | 上传失败时回调，返回结果作为错误内容提示 |\r\n| params | object | 无 | 提交到服务端的额外参数 |\r\n| recoverAble | boolean | false | 是否可以恢复已删除的value |\r\n| renderResult | (data: any) => ReactNode | a => a | 结果展示 |\r\n| validator | object | 无 | 上传前文件校验 |\r\n| value | any[] | \\[] | defaultValue 和 value 可以同时设置，defaultValue 会被value覆盖<br />在Form中，value会被表单接管，value无效 |\r\n| withCredentials | boolean | false | 是否携带 cookie |\r\n| multiple | boolean | false | 是否支持多选文件 |\r\n| renderContent | (res: any, value: any, index: number, values: any[]) => ReactNode | - | 自定义结果的内容 |\r\n| validatorHandle | (error: any, file: File) => boolean \\| boolean | false | 是否处理校验失败的情况, 如果提供一个函数, 则以函数的返回值判断是否处理此 error |\r\n| drop | boolean | false | 是否开启拖拽上传文件 |\r\n| filesFilter | (fileList: any[]) => boolean | 无 | 文件选中后的筛选，用户可自定义最终需要上传的文件列表<br />需返回一个新的文件列表 |\r\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | 无 | 上传失败文件删除之后的回调 |\r\n| forceAccept | string | 无 | 在使用时关闭了 accept 提供的文件类型过滤后，强制对文件类型进行校验（值同accept） |\r\n| showUploadList | boolean | true | 是否展示上传列表 |\r\n\r\n\r\n### Upload.Image\r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| children | ReactNode | 无 | 上传按钮内容，可为空 |\r\n| renderResult | (data: any) => ReactNode | a => a | 返回图片 url 链接地址 |\r\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | 上传失败图片删除之后的回调 |\r\n| width | number | 80 | 图片宽度 |\r\n| height | number | 80 | 图片高度 |\r\n\r\n### Upload.Button\r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| type | 'primary' \\| success' \\| 'info' \\| 'warning' \\| 'danger' | primary | 按钮类型 |\r\n| placeholder | ReactNode | 无 | 按钮默认内容 |\r\n| loading | ReactNode | 无 | 上传中按钮的内容，如果是字符串默认会有spin loading |\r\n\r\n\r\n### UploadOptions \r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| file |  File | 无 |  传入的文件 |\r\n| onLoad | function | 无 | 上传事件 |\r\n| onError | function | 无| 上传出错事件(props 中为 onHttpError) |\r\n| onProgress | function | 无 | 上传中进度 |\r\n| onSuccess | function | 无 | 上传成功事件 |\r\n| params | object | 无 | 上传参数 |\r\n| onStart | function | 无 | 开始上传事件 |\r\n| headers | object | 无 | 请求头部信息 |\r\n\r\n\r\n### validator 属性\r\n\r\n| 属性 | 类型 | 说明 |\r\n| --- | --- | --- |\r\n| ext | func(string):Error | 判断后缀名，传入参数为文件后缀，校验失败返回 Error |\r\n| size | func(number):Error | 判断文件大小，校验失败返回 Error |\r\n| imageSize | func(Image):Error | 只对 Image 有效，判断图片尺寸，校验失败返回 Error |\r\n| customValidator | func(File):Error | 自定义校验 |\r\n"},630:function(e,n){e.exports="# Upload\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Upload\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| accept | string | none | The type of the upload file, same as the standard,See details [accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)  |\r\n| action | string | required | The address for uploading |\r\n| children | ReactNode | required | Upload placeholder |\r\n| className | string | none | Extend className |\r\n| defaultValue | any[] | -  | default value |\r\n| headers | object | none | Request headers |\r\n| htmlName | string | none | The filename received by the server. If it is not filled in, use the name. |\r\n| limit | number | 100 | Maximum number of uploaded files |\r\n| disabled | boolean | false | disabled upload action | \r\n| name | string | none | The key access data in the Form  |\r\n| request | (options: object) => void | - | Custom upload method<br /> options: the options of upload |\r\n| onChange | (values: any[]) => void | none | The callback function when the value is changing(Upload successfully, delete)<br />values: Array, the value is the onSuccess returns |\r\n| onSuccess |  (res: string, file: File, data: any, xhr: any) => any | none | The callback function when to upload successfully. The returned result is as the new value. <br />res: the result that the upload interface returns<br />file: selected file<br /> data: the request data<br /> xhr: reponse |\r\n| onHttpError | (xhr: any) => string | none | The callback function when to upload unsuccessfully. The returned result is as the error message. |\r\n| params | object | none | Additional parameters submitted to the server |\r\n| recoverAble | boolean | true | Whether to recover deleted values. |\r\n| renderResult | (data: any) => ReactNode | a => a | Display results |\r\n| validator | object | none | Check file before uploading |\r\n| value | any[] | \\[] | value |\r\n| withCredentials | boolean | false | Whether to take the cookie |\r\n| multiple | boolean | false | Whether multi-select files are supported |\r\n| renderContent | (res: any, value: any, index: number, values: any[]) => ReactNode | - | Custom content of result  | \r\n| validatorHandle | (error: any, file: File) => boolean \\| boolean  | true | Whether to handle the case of validation failure, if a function is provided, it is judged by the return value of the function. |\r\n| drop | boolean | false | drop to update |\r\n| filesFilter | (fileList: any[]) => boolean | none | Filter after file selection, users can customize the list of files that need to be uploaded eventually<br />Need to return a new file list |\r\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | remove update failed callback |\r\n| forceAccept | string | none | After disabled the file type filtering provided by accept, it is mandatory to check the file type, value same as accept |\r\n| showUploadList | boolean | true | show upload list |\r\n\r\n### Upload.Image\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| children | ReactNode | none | The content of the upload button. It can be empty. |\r\n| renderResult | (data: any) => ReactNode | a => a | Return the link address of the url of the image.|\r\n| onErrorRemove | (xhr: XMLHttpRequest, file: Blob) => void | none | remove update failed callback |\r\n| width | number | 80 | image width |\r\n| height | number | 80 | image height |\r\n\r\n### Upload.Button\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| type | string | primary | options: \\['primary', success', 'info', 'warning', 'danger'\\] |\r\n| placeholder | ReactNode | none | button default content |\r\n| loading | ReactNode | none | content of uploading, will have spin if a string |\r\n\r\n\r\n### UploadOptions \r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| file |  File | - |  the file |\r\n| onLoad | function | - | the event of uploading |\r\n| onError | function | - | the event of upload fail(in props is onHttpError) |\r\n| onProgress | function | - | the event of uploading progress |\r\n| onSuccess | function | - | the event of upload successing |\r\n| params | object | - | the request params |\r\n| onStart | function | - | the event of start upload |\r\n| headers | object | - | the request header |\r\n\r\n### Validator\r\n\r\n| Property | Type | Description |\r\n| --- | --- | --- |\r\n| ext | func(string):Error | Judge the file extension, return the Error when the verification fails. |\r\n| size | func(number):Error | Judge the size of the file and return the Error when the verification fails. |\r\n| imageSize | func(Image):Error | It is only valid for Image to determine the size of images and return the Error when the verification fails. |\r\n| customValidator | func(File):Error | custom validator |\r\n"},631:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return d});var n=r(4),t=r.n(n),n=r(5),a=r.n(n),n=r(6),o=r.n(n),n=r(7),l=r.n(n),n=r(3),i=r.n(n),n=r(1),c=r.n(n),u=r(34);function s(r){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var e,n=i()(r);return n=t?(e=i()(this).constructor,Reflect.construct(n,arguments,e)):n.apply(this,arguments),l()(this,n)}}var d=function(e){o()(r,e);var n=s(r);function r(e){return t()(this,r),(e=n.call(this,e)).state={value:[]},e}return a()(r,[{key:"render",value:function(){var n=this;return c.a.createElement(u.J,{action:"/upload/",accept:"image/*",value:this.state.value,name:"file",onSuccess:function(e,n){return n.name},onChange:function(e){console.log(e),n.setState({value:e})},limit:3,style:{width:300}},c.a.createElement(u.f,null,c.a.createElement(u.m,{name:"cloud-upload ",style:{marginRight:4}}),"Upload file"))}}]),r}(c.a.Component)},632:function(e,n){e.exports='/**\r\n * cn - 基本用法\r\n *    -- 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange\r\n * en - Base\r\n *    -- Basic usage for uploading file, the onSuccess\'s returns will be the onChange params\r\n\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: [],\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Upload\r\n        action="/upload/"\r\n        accept="image/*"\r\n        value={this.state.value}\r\n        name="file"\r\n        onSuccess={(res, file) => file.name}\r\n        onChange={v => {\r\n          console.log(v)\r\n          this.setState({ value: v })\r\n        }}\r\n        limit={3}\r\n        style={{ width: 300 }}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload " style={{ marginRight: 4 }} />\r\n          Upload file\r\n        </Button>\r\n      </Upload>\r\n    )\r\n  }\r\n}\r\n'},633:function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return d});var n=r(4),t=r.n(n),n=r(5),a=r.n(n),n=r(6),o=r.n(n),n=r(7),l=r.n(n),n=r(3),i=r.n(n),n=r(1),c=r.n(n),u=r(34);function s(r){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var e,n=i()(r);return n=t?(e=i()(this).constructor,Reflect.construct(n,arguments,e)):n.apply(this,arguments),l()(this,n)}}var d=function(e){o()(r,e);var n=s(r);function r(e){return t()(this,r),(e=n.call(this,e)).state={value:[]},e}return a()(r,[{key:"render",value:function(){var n=this;return c.a.createElement(u.J,{action:"/upload/",accept:"image/*",value:this.state.value,name:"file",renderResult:function(e){return e.name},onSuccess:function(e,n){return n},onChange:function(e){console.log(e),n.setState({value:e})},limit:3,style:{width:300}},c.a.createElement(u.f,null,c.a.createElement(u.m,{name:"cloud-upload ",style:{marginRight:4}}),"Upload file"))}}]),r}(c.a.Component)},634:function(e,n){e.exports='/**\r\n * cn - 自定义结果\r\n *    -- 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理\r\n * en - Custom result\r\n *    -- The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself.\r\n\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: [],\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Upload\r\n        action="/upload/"\r\n        accept="image/*"\r\n        value={this.state.value}\r\n        name="file"\r\n        renderResult={f => f.name}\r\n        onSuccess={(res, file) => file}\r\n        onChange={v => {\r\n          console.log(v)\r\n          this.setState({ value: v })\r\n        }}\r\n        limit={3}\r\n        style={{ width: 300 }}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload " style={{ marginRight: 4 }} />\r\n          Upload file\r\n        </Button>\r\n      </Upload>\r\n    )\r\n  }\r\n}\r\n'},635:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement(o.J.Image,{drop:!0,action:"/upload/",accept:"image/*",name:"file",onSuccess:function(e,n,r){return{data:r}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)},width:300,height:300})}},636:function(e,n){e.exports='/**\r\n * cn - 上传图片\r\n *    -- 使用 Upload.Image 处理带预览的图片上传\r\n * en - Image\r\n *    -- Use Upload.Image to upload and preview images.\r\n */\r\nimport React from \'react\'\r\nimport { Upload } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload.Image\r\n      drop\r\n      action="/upload/"\r\n      accept="image/*"\r\n      name="file"\r\n      onSuccess={(res, file, data) => ({ data })}\r\n      renderResult={f => f.data}\r\n      limit={3}\r\n      onStart={f => console.log(f)}\r\n      width={300}\r\n      height={300}\r\n    />\r\n  )\r\n}\r\n'},637:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement(o.J.Image,{action:"/upload/",accept:"image/*",name:"file",onSuccess:function(e,n,r){return{data:r}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)},renderContent:function(e,n,r,t){return console.log(e,n,r,t),a.a.createElement("div",{onClick:function(){return o.u.info("i am click")}},a.a.createElement("img",{width:"100%",src:e,alt:"not found"}))}})}},638:function(e,n){e.exports='/**\r\n * cn - 自定义结果内容\r\n *    -- 使用  renderContent 可以自定义上传之后的图片结果.\r\n * en - Custom result content\r\n *    -- Use renderContent to customize the image results after uploading.\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Message } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload.Image\r\n      action="/upload/"\r\n      accept="image/*"\r\n      name="file"\r\n      onSuccess={(res, file, data) => ({ data })}\r\n      renderResult={f => f.data}\r\n      limit={3}\r\n      onStart={f => console.log(f)}\r\n      renderContent={(d, v, i, values) => {\r\n        console.log(d, v, i, values)\r\n        return (\r\n          <div onClick={() => Message.info(\'i am click\')}>\r\n            <img width="100%" src={d} alt="not found" />\r\n          </div>\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n'},639:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement(o.J.Button,{action:"/upload/",name:"file",onSuccess:function(e,n){return n.name},loading:"正在上传...",placeholder:"点击上传",type:"primary"})}},640:function(e,n){e.exports='/**\r\n * cn - 按钮上传\r\n *    -- 使用 Upload.Button 展示单个文件的上传进度\r\n * en - Button\r\n *    -- Use Upload.Button to show the upload progress of individual files\r\n */\r\nimport React from \'react\'\r\nimport { Upload } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload.Button\r\n      action="/upload/"\r\n      name="file"\r\n      onSuccess={(res, file) => file.name}\r\n      loading="正在上传..."\r\n      placeholder="点击上传"\r\n      type="primary"\r\n    />\r\n  )\r\n}\r\n'},641:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement(o.J.Image,{action:"/upload/",accept:"image/*",name:"file",onSuccess:function(e,n,r){return{data:r}},width:200,height:100,limit:1,renderResult:function(e){return e.data},validator:{imageSize:function(e){return 200!==e.width||100!==e.height?new Error("only allow 200px * 100px"):void 0},ext:function(e){return["jpg","png"].includes(e)?void 0:new Error("File extension must be jpg or png")}}},a.a.createElement("div",{style:{margin:"auto",color:"#999",textAlign:"center"}},a.a.createElement(o.m,{name:"cloud-upload "})," Upload Image",a.a.createElement("br",null),"Allow size 200 * 100"))}},642:function(e,n){e.exports="/**\r\n * cn - 校验\r\n *    -- 通过 validator.imageSize 校验图片长宽，本例为 200px * 100px\r\n * en - Validator\r\n *    -- Set validator.imageSize to validate the width and height of the image.\r\n */\r\nimport React from 'react'\r\nimport { Upload,FontAwesome } from 'ethan/index'\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload.Image\r\n      action=\"/upload/\"\r\n      accept=\"image/*\"\r\n      name=\"file\"\r\n      onSuccess={(res, file, data) => ({ data })}\r\n      width={200}\r\n      height={100}\r\n      limit={1}\r\n      renderResult={f => f.data}\r\n      validator={{\r\n        imageSize: img => (img.width !== 200 || img.height !== 100 ? new Error('only allow 200px * 100px') : undefined),\r\n        ext: ext => (['jpg', 'png'].includes(ext) ? undefined : new Error('File extension must be jpg or png')),\r\n      }}\r\n    >\r\n      <div style={{ margin: 'auto', color: '#999', textAlign: 'center' }}>\r\n        <FontAwesome name=\"cloud-upload \" /> Upload Image\r\n        <br />\r\n        Allow size 200 * 100\r\n      </div>\r\n    </Upload.Image>\r\n  )\r\n}\r\n"},643:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.J,{action:"/upload/",accept:"image/*",multiple:!0,name:"file",onSuccess:function(e,n){return n.name},style:{width:300,marginBottom:30},validator:{size:function(e){return 10240<e?new Error("max file size is 10KB"):void 0}},validatorHandle:function(e,n){return console.log(e,n),!0}},a.a.createElement(o.f,null,a.a.createElement(o.m,{name:"cloud-upload"})," Upload file")),a.a.createElement(o.J.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,name:"file",onSuccess:function(e,n,r){return{data:r}},validator:{size:function(e){return 10240<e?new Error("max file size is 10KB"):void 0}},renderResult:function(e){return e.data}}))}},644:function(e,n){e.exports='/**\r\n * cn - 文件大小\r\n *    -- 文件大小校验，本例为 10KB\r\n * en -\r\n *    -- Set validator.size to validate the size of the file. This example is 10KB.\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Upload\r\n        action="/upload/"\r\n        accept="image/*"\r\n        multiple\r\n        name="file"\r\n        onSuccess={(res, file) => file.name}\r\n        style={{ width: 300, marginBottom: 30 }}\r\n        validator={{\r\n          size: s => (s > 10240 ? new Error(\'max file size is 10KB\') : undefined),\r\n        }}\r\n        validatorHandle={(error, file) => {\r\n          console.log(error, file)\r\n          return true\r\n        }}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload" /> Upload file\r\n        </Button>\r\n      </Upload>\r\n\r\n      <Upload.Image\r\n        action="//jsonplaceholder.typicode.com/posts"\r\n        accept="image/*"\r\n        multiple\r\n        name="file"\r\n        onSuccess={(res, file, data) => ({ data })}\r\n        validator={{\r\n          size: s => (s > 10240 ? new Error(\'max file size is 10KB\') : undefined),\r\n        }}\r\n        renderResult={f => f.data}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n'},645:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.J,{action:"/path-no-exist",accept:"image/*",name:"file",onSuccess:function(e,n){return n.name},onHttpError:function(e){return console.log(e),404===e.status?"Url not found.":"Upload Fail."},limit:3,style:{width:300,marginBottom:30}},a.a.createElement(o.f,null,a.a.createElement(o.m,{name:"cloud-upload"})," Upload file")),a.a.createElement(o.J.Image,{action:"/path-no-exist",accept:"image/*",name:"file",onSuccess:function(e,n,r){return{data:r}},onHttpError:function(e){return console.log(e),404===e.status?"Url not found.":"Upload Fail."},renderResult:function(e){return e.data}}))}},646:function(e,n){e.exports='/**\r\n * cn - 异常处理\r\n *    -- onHttpError 用来处理上传到服务器返回的异常\r\n * en - Error\r\n *    -- Set onHttpError to handle exceptions returned by uploading to the server.\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Upload\r\n        action="/path-no-exist"\r\n        accept="image/*"\r\n        name="file"\r\n        onSuccess={(res, file) => file.name}\r\n        onHttpError={xhr => {\r\n          console.log(xhr)\r\n          if (xhr.status === 404) return \'Url not found.\'\r\n          return \'Upload Fail.\'\r\n        }}\r\n        limit={3}\r\n        style={{ width: 300, marginBottom: 30 }}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload" /> Upload file\r\n        </Button>\r\n      </Upload>\r\n\r\n      <Upload.Image\r\n        action="/path-no-exist"\r\n        accept="image/*"\r\n        name="file"\r\n        onSuccess={(res, file, data) => ({ data })}\r\n        onHttpError={xhr => {\r\n          console.log(xhr)\r\n          if (xhr.status === 404) return \'Url not found.\'\r\n          return \'Upload Fail.\'\r\n        }}\r\n        renderResult={f => f.data}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n'},647:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){return a.a.createElement("div",null,a.a.createElement(o.J,{action:"/upload/",accept:"image/*",multiple:!0,limit:2,name:"file",recoverAble:!0,onSuccess:function(e,n){return n.name},style:{width:300,marginBottom:30}},a.a.createElement(o.f,null,a.a.createElement(o.m,{name:"cloud-upload"})," Upload file")),a.a.createElement(o.J.Image,{action:"/upload/",accept:"image/*",multiple:!0,name:"file",limit:1,recoverAble:!0,onSuccess:function(e,n,r){return{data:r}},renderResult:function(e){return e.data}}))}},648:function(e,n){e.exports='/**\r\n * cn - 恢复删除\r\n *    -- 设置 recoverAble 为 true，点击删除后，文件会标记为已删除，可以通过恢复图标恢复\r\n * en - Recover\r\n *    -- Set reconverAble to true, Clicking delete icon will not remove the file, but will mark it as deleted.\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <Upload\r\n        action="/upload/"\r\n        accept="image/*"\r\n        multiple\r\n        limit={2}\r\n        name="file"\r\n        recoverAble\r\n        onSuccess={(res, file) => file.name}\r\n        style={{ width: 300, marginBottom: 30 }}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload" /> Upload file\r\n        </Button>\r\n      </Upload>\r\n\r\n      <Upload.Image\r\n        action="/upload/"\r\n        accept="image/*"\r\n        multiple\r\n        name="file"\r\n        limit={1}\r\n        recoverAble\r\n        onSuccess={(res, file, data) => ({ data })}\r\n        renderResult={f => f.data}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n'},649:function(e,n,r){"use strict";r.r(n);function t(e){var n=e.file,r=e.onLoad,t=e.onError,a=e.onProgress,o=new XMLHttpRequest;return o.open("post","/upload/"),(e=new FormData).append("test",n),o.upload.onprogress=a,o.onload=function(){return r(o)},o.onerror=function(){return t({statusText:"error message"})},o.send(e),o}var a=r(1),o=r.n(a),l=r(34);n.default=function(){return o.a.createElement(l.J,{accept:"image/*",onSuccess:function(e,n){return{name:"upload ".concat(n.name)}},limit:3,style:{width:300},request:t,renderResult:function(e){return e.name}},o.a.createElement(l.f,null,o.a.createElement(l.m,{name:"cloud-upload"})," Upload file"))}},650:function(e,n){e.exports="/**\r\n * cn - 自定义上传\r\n *    -- 通过 request 函数，替代默认上传方法\r\n * en - Custom Request\r\n *    -- Set request property to use your own XMLHttpRequest.\r\n */\r\nimport React from 'react'\r\nimport { Upload, Button, FontAwesome } from 'ethan/index'\r\n\r\nconst request = options => {\r\n  const { file, onLoad, onError, onProgress } = options\r\n  const xhr = new XMLHttpRequest()\r\n  xhr.open('post', '/upload/')\r\n\r\n  const data = new FormData()\r\n  data.append('test', file)\r\n  xhr.upload.onprogress = onProgress\r\n  xhr.onload = () => onLoad(xhr)\r\n  xhr.onerror = () => onError({ statusText: 'error message' })\r\n  xhr.send(data)\r\n\r\n  return xhr\r\n}\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload\r\n      accept=\"image/*\"\r\n      onSuccess={(res, file) => ({ name: `upload ${file.name}` })}\r\n      limit={3}\r\n      style={{ width: 300 }}\r\n      request={request}\r\n      renderResult={d => d.name}\r\n    >\r\n      <Button>\r\n        <FontAwesome name=\"cloud-upload\" /> Upload file\r\n      </Button>\r\n    </Upload>\r\n  )\r\n}\r\n"},651:function(e,n,r){"use strict";r.r(n);function t(e){var r=e.file,t=e.onLoad,a=e.onError,o=e.onProgress,l=new XMLHttpRequest;return l.open("post","/upload/"),(e=new window.JSZip).file(r.name,r),e.generateInternalStream({type:"blob"}).accumulate(function(e){o(e,"zipping...")}).then(function(e){var n=new File([e],"".concat(r.name,".zip")),e=new FormData;e.append("file",n),l.upload.onprogress=function(e){return o(e,"sending...")},l.onload=function(){return t(l)},l.onerror=function(){return a({statusText:"error message"})},l.send(e)}),l}var a=r(1),o=r.n(a),l=r(34);n.default=function(){return o.a.createElement(l.J,{onSuccess:function(e,n){return{name:"upload ".concat(n.name)}},limit:3,style:{width:300},request:t,renderResult:function(e){return e.name}},o.a.createElement(l.f,null,o.a.createElement(l.m,{name:"cloud-upload"})," Upload file"))}},652:function(e,n){e.exports="/**\r\n * cn -\r\n *    -- 此事例演示通过自定义函数压缩文件后上传\r\n * en -\r\n *    -- Zip file and upload.\r\n */\r\nimport React from 'react'\r\nimport { Upload, Button, FontAwesome } from 'ethan/index'\r\n\r\nconst request = options => {\r\n  const { file, onLoad, onError, onProgress } = options\r\n\r\n  const xhr = new XMLHttpRequest()\r\n  xhr.open('post', '/upload/')\r\n\r\n  const zip = new window.JSZip()\r\n  zip.file(file.name, file)\r\n  zip\r\n    .generateInternalStream({ type: 'blob' })\r\n    .accumulate(e => {\r\n      onProgress(e, 'zipping...')\r\n    })\r\n    .then(content => {\r\n      const zipFile = new File([content], `${file.name}.zip`)\r\n      const data = new FormData()\r\n      data.append('file', zipFile)\r\n      xhr.upload.onprogress = m => onProgress(m, 'sending...')\r\n      xhr.onload = () => onLoad(xhr)\r\n      xhr.onerror = () => onError({ statusText: 'error message' })\r\n      xhr.send(data)\r\n    })\r\n\r\n  return xhr\r\n}\r\n\r\nexport default function() {\r\n  return (\r\n    <Upload\r\n      onSuccess={(res, file) => ({ name: `upload ${file.name}` })}\r\n      limit={3}\r\n      style={{ width: 300 }}\r\n      request={request}\r\n      renderResult={d => d.name}\r\n    >\r\n      <Button>\r\n        <FontAwesome name=\"cloud-upload\" /> Upload file\r\n      </Button>\r\n    </Upload>\r\n  )\r\n}\r\n"},653:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);n.default=function(){var e=[{name:"test file.png",url:"../../images/ui.png"}];return a.a.createElement("div",null,a.a.createElement(o.J,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",multiple:!0,limit:2,name:"file",onSuccess:function(e,n){return{name:n.name}},style:{width:300,marginBottom:30},defaultValue:e,renderResult:function(e){return e.name}},a.a.createElement(o.f,null,a.a.createElement(o.m,{name:"cloud-upload"})," Upload file")),a.a.createElement(o.J.Image,{action:"/upload/",accept:"image/*",multiple:!0,name:"file",limit:1,recoverAble:!0,onSuccess:function(e,n,r){return{url:r}},renderResult:function(e){return e.url},defaultValue:e}))}},654:function(e,n){e.exports='/**\r\n * cn - 默认值\r\n *    -- 默认值示例\r\n * en - defaultValue\r\n *    -- defaultValue example\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nexport default function() {\r\n  const defaultValue = [\r\n    {\r\n      name: \'test file.png\',\r\n      url: \'../../images/ui.png\',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div>\r\n      <Upload\r\n        action="//jsonplaceholder.typicode.com/posts"\r\n        accept="image/*"\r\n        multiple\r\n        limit={2}\r\n        name="file"\r\n        onSuccess={(res, file) => ({ name: file.name })}\r\n        style={{ width: 300, marginBottom: 30 }}\r\n        defaultValue={defaultValue}\r\n        renderResult={f => f.name}\r\n      >\r\n        <Button>\r\n          <FontAwesome name="cloud-upload" /> Upload file\r\n        </Button>\r\n      </Upload>\r\n\r\n      <Upload.Image\r\n        action="/upload/"\r\n        accept="image/*"\r\n        multiple\r\n        name="file"\r\n        limit={1}\r\n        recoverAble\r\n        onSuccess={(res, file, data) => ({ url: data })}\r\n        renderResult={f => f.url}\r\n        defaultValue={defaultValue}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n'},655:function(e,n,r){"use strict";r.r(n);var t=r(1),a=r.n(t),o=r(34);function l(){return a.a.createElement(o.J.Image,{action:"/upload/",accept:"image/*",name:"file",onSuccess:function(e,n,r){return{data:r}},renderResult:function(e){return e.data},limit:3,onStart:function(e){return console.log(e)},width:250,drop:!0},a.a.createElement("div",{style:{textAlign:"center",width:"100%",padding:20}},a.a.createElement(o.m,{style:{color:"#409dfd",fontSize:20},name:"image"}),a.a.createElement("br",null),"Click or Drag image to upload"))}function i(){return a.a.createElement(o.J,{action:"/upload/",multiple:!0,name:"file",onSuccess:function(e,n){return n.name},limit:3,style:{width:300},drop:!0},a.a.createElement(o.f,null,a.a.createElement(o.m,{name:"file"}),"  Drop file to upload"))}n.default=function(){return a.a.createElement("div",null,a.a.createElement(l,null),a.a.createElement("br",null),a.a.createElement(i,null))}},656:function(e,n){e.exports='/**\r\n * cn - 拖拽上传\r\n *    -- 设置 drop 来支持拖拽上传\r\n * en - Drag and Drop\r\n *    -- set drop to Drag files to upload.\r\n */\r\nimport React from \'react\'\r\nimport { Upload, Button, FontAwesome } from \'ethan/index\'\r\n\r\nfunction DraggerImage() {\r\n  return (\r\n    <Upload.Image\r\n      action="/upload/"\r\n      accept="image/*"\r\n      name="file"\r\n      onSuccess={(res, file, data) => ({ data })}\r\n      renderResult={f => f.data}\r\n      limit={3}\r\n      onStart={f => console.log(f)}\r\n      width={250}\r\n      drop\r\n    >\r\n      <div style={{ textAlign: \'center\', width: \'100%\', padding: 20 }}>\r\n        <FontAwesome style={{ color: \'#409dfd\', fontSize: 20 }} name="image" />\r\n        <br />\r\n        Click or Drag image to upload\r\n      </div>\r\n    </Upload.Image>\r\n  )\r\n}\r\n\r\nfunction DraggerFile() {\r\n  return (\r\n    <Upload\r\n      action="/upload/"\r\n      multiple\r\n      name="file"\r\n      onSuccess={(res, file) => file.name}\r\n      limit={3}\r\n      style={{ width: 300 }}\r\n      drop\r\n    >\r\n      <Button>\r\n        <FontAwesome name="file" />\r\n        &nbsp; Drop file to upload\r\n      </Button>\r\n    </Upload>\r\n  )\r\n}\r\n\r\nexport default function() {\r\n  return (\r\n    <div>\r\n      <DraggerImage />\r\n      <br />\r\n      <DraggerFile />\r\n    </div>\r\n  )\r\n}\r\n'},894:function(e,n,r){"use strict";r.r(n);var t=r(8),a=r.n(t),o=r(1),l=r.n(o),i=r(215),c=r(216),u=r(35),t=r(629),o=r.n(t),t=r(630),t=r.n(t),s=Object(u.b)(o.a,t.a),d=[{name:"01-base",title:Object(u.b)("基本用法 \n 基础的文件上传, onSuccess 的返回值会作为 value 传给 onChange","Base \n Basic usage for uploading file, the onSuccess's returns will be the onChange params"),component:r(631).default,rawText:r(632)},{name:"01-onChange",title:Object(u.b)("自定义结果 \n 默认展示的结果和 value 里面所存储的值是一样的, 如果有需求需要, 可以用 renderResult 自行处理","Custom result \n The result of the default display is the same as the value stored in the value. If there is a need, you can use the renderResult to handle it yourself."),component:r(633).default,rawText:r(634)},{name:"02-image",title:Object(u.b)("上传图片 \n 使用 Upload.Image 处理带预览的图片上传","Image \n Use Upload.Image to upload and preview images."),component:r(635).default,rawText:r(636)},{name:"02-show-image",title:Object(u.b)("自定义结果内容 \n 使用  renderContent 可以自定义上传之后的图片结果.","Custom result content \n Use renderContent to customize the image results after uploading."),component:r(637).default,rawText:r(638)},{name:"03-button",title:Object(u.b)("按钮上传 \n 使用 Upload.Button 展示单个文件的上传进度","Button \n Use Upload.Button to show the upload progress of individual files"),component:r(639).default,rawText:r(640)},{name:"04-validator",title:Object(u.b)("校验 \n 通过 validator.imageSize 校验图片长宽，本例为 200px * 100px","Validator \n Set validator.imageSize to validate the width and height of the image."),component:r(641).default,rawText:r(642)},{name:"05-filesize",title:Object(u.b)("文件大小 \n 文件大小校验，本例为 10KB"," \n Set validator.size to validate the size of the file. This example is 10KB."),component:r(643).default,rawText:r(644)},{name:"06-error",title:Object(u.b)("异常处理 \n onHttpError 用来处理上传到服务器返回的异常","Error \n Set onHttpError to handle exceptions returned by uploading to the server."),component:r(645).default,rawText:r(646)},{name:"07-recover",title:Object(u.b)("恢复删除 \n 设置 recoverAble 为 true，点击删除后，文件会标记为已删除，可以通过恢复图标恢复","Recover \n Set reconverAble to true, Clicking delete icon will not remove the file, but will mark it as deleted."),component:r(647).default,rawText:r(648)},{name:"08-request",title:Object(u.b)("自定义上传 \n 通过 request 函数，替代默认上传方法","Custom Request \n Set request property to use your own XMLHttpRequest."),component:r(649).default,rawText:r(650)},{name:"09-zip",title:Object(u.b)(" \n 此事例演示通过自定义函数压缩文件后上传"," \n Zip file and upload."),component:r(651).default,rawText:r(652)},{name:"10-defaultValue",title:Object(u.b)("默认值 \n 默认值示例","defaultValue \n defaultValue example"),component:r(653).default,rawText:r(654)},{name:"11-dragger",title:Object(u.b)("拖拽上传 \n 设置 drop 来支持拖拽上传","Drag and Drop \n set drop to Drag files to upload."),component:r(655).default,rawText:r(656)}];n.default=Object(i.a)(function(e){return l.a.createElement(c.a,a()({},e,{codes:void 0,source:s,examples:d}))})}}]);