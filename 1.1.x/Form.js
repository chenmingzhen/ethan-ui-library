(self.webpackChunkEthanDoc=self.webpackChunkEthanDoc||[]).push([[923],{26013:function(e,r,n){"use strict";n.r(r),n.d(r,{default:function(){return i}});var t=n(67154),a=n.n(t),r=n(24698),l=n.n(r),t=n(54365),r=n.n(t),t=n(82281),o=n.n(t),t=n(70954),m=(0,t.default)("# Form _表单_\r\n\r\n表单组件，提供数据管理，校验，提交，交互等\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Form\r\n\r\n| 属性            | 类型                                | 默认值  | 说明                                                       |\r\n| --------------- | ----------------------------------- | ------- | ---------------------------------------------------------- |\r\n| className       | string                              | -       | 样式名称                                                   |\r\n| disabled        | boolean                             | false   | 是否禁用                                                   |\r\n| defaultValue    | any                                 | -       | 表单默认值，只有初始化以及重置时生效                       |\r\n| inline          | boolean                             | false   | 是否水平布局                                               |\r\n| onError         | (error:Error)=>void                 | -       | 提交表单且数据验证失败后回调事件                           |\r\n| onReset         | ()=>void                            | -       | 重置表单回调事件                                           |\r\n| onSubmit        | (value:any)=>void                   | -       | 提交表单且数据验证成功后回调事件                           |\r\n| scrollToError   | boolean                             | -       | 提交失败自动滚动到第一个错误字段                           |\r\n| style           | React.CSSProperties                 | -       | 样式                                                       |\r\n| labelAlign      | 'top' \\|'right' \\|'left'            | -       | Label 的排序方式                                           |\r\n| labelWidth      | string \\| number                    | '140px' | 标签宽度，labelAlign 为 'top' 时无效。                     |\r\n| onChange        | (changeValues:any,values:any)=>void | -       | 字段更新时触发回调事件                                     |\r\n| removeUndefined | boolean                             | true    | 是否删除值为 undefined 的字段，默认值为删除                |\r\n| errors          | Record<string,string\\|number>       | -       | 表单的错误值                                               |\r\n| animation       | boolean                             | false   | 是否以动画展示 error                                       |\r\n| preserve        | boolean                             | false   | 当字段被删除时保留字段值                                   |\r\n| form            | FormInstance                        | -       | 经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建 |\r\n\r\n### Form.Item\r\n\r\n** 表单字段组件，用于数据双向绑定、校验、布局等。 **\r\n\r\n| 属性          | 类型                                                               | 默认值 | 说明                                                                                               |\r\n| ------------- | ------------------------------------------------------------------ | ------ | -------------------------------------------------------------------------------------------------- |\r\n| className     | string                                                             | -      | 样式名称                                                                                           |\r\n| defaultValue  | any                                                                | -      | 表单字段的默认值，优先级低于 Form 的 defaultValue                                                  |\r\n| label         | ReactNode                                                          | -      | 未定义时，标签不会 render，也不会占位。                                                            |\r\n| labelAlign    | 'top' \\|'right' \\|'left'                                           | -      | Label 的排序方式                                                                                   |\r\n| labelWidth    | string \\| number                                                   | -      | 标签宽度，labelAlign 为 'top' 时无效。                                                             |\r\n| required      | boolean                                                            | false  | 必填标记，纯展示用，不会触发校验                                                                   |\r\n| tip           | ReactNode                                                          | -      | 提示文案                                                                                           |\r\n| style         | React.CSSProperties                                                | -      | 样式                                                                                               |\r\n| grid          | number \\| { width?: number; offset?: number; responsive?: number } | -      | 表单字段的栅格配置                                                                                 |\r\n| rules         | Rule[]                                                             | -      | 校验规则                                                                                           |\r\n| name          | string \\| string[]                                                 | -      | 字段名，支持数组，支持多级嵌套数据                                                                 |\r\n| flow          | boolean \\| string[]                                                | -      | 订阅对应字段的更新,如果 flow 的字段更新，会重新渲染 FormItem                                       |\r\n| noStyle       | boolean                                                            | false  | 不带样式，作为纯字段控件使用                                                                       |\r\n| noErrorInRoot | boolean                                                            | false  | 默认情况下，顶层的 FormItem 会收集所有 FormItem 的错误展示，设置为 true 的 FormItem 不收集错误信息 |\r\n| preserve      | boolean                                                            | false  | 当字段被删除时保留字段值                                                                           |\r\n| animation     | boolean                                                            | false  | 是否以动画展示 error                                                                               |\r\n\r\n### Form.FieldSet\r\n\r\n** 用来处理 object 类型 字段和数组。 **\r\n\r\n| 属性         | 类型                                     | 默认值 | 说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r\n| ------------ | ---------------------------------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| children     | (opts: object) => ReactNode \\| ReactNode | 必填   | children 不为 function，用来处理 object 类型数据，children 内的 name 会拼接 FieldSet name，如 FieldSet name 为 'a', children 元素 name 为 b，children 实际处理的数据为 a.b; <br /> children 为 function 时，用来处理数组数据。options 属性为<br />list: name 下的全部数据<br />value：根据 name 获取的值的单条数据<br />onChange：子组件数据改变回调<br />onRemove：子组件删除回调<br />index：当前项索引<br />onInsert: 在当前项之前插入一条数据<br />onAppend: 在当前项之后附加一条数据 |\r\n| defaultValue | string \\| number                         | -      | 默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\r\n| emptyRender  | (onInsert: any) => ReactNode             | 无     | 数据为空时展示内容。（仅在 children 为 function 时有效）                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| name         | string                                   | 必填   | 从 Form 中存取数据的名称                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| rules        | any[]                                    | 无     | 校验规则                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| preserve     | boolean                                  | false  | 当字段被删除时保留字段值                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| flow         | boolean \\| string[]                      | -      | 订阅对应字段的更新,如果 flow 的字段更新，会重新渲染白 FormItem                                                                                                                                                                                                                                                                                                                                                                                                                            |\r\n| animation    | boolean                                  | false  | 是否以动画展示 error                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r\n\r\n### FormInstance\r\n\r\n** 表单组件的实例，用于操作表单 Store **\r\n\r\n| 属性         | 类型                                                        | 说明                                 |\r\n| ------------ | ----------------------------------------------------------- | ------------------------------------ |\r\n| get          | (name:string\\|string[])=>any                                | 获取特定字段的值                     |\r\n| getValue     | ()=>any                                                     | 获取表单所有的字段值                 |\r\n| set          | (params:{name:string\\|string[],value:any})=>any             | 设置特定字段的值                     |\r\n| setValue     | (values:any)=>any                                           | 设置表单的值                         |\r\n| setError     | (params:{name:string\\|string[],error:Error \\| string})=>any | 设置表单特定字段的错误值             |\r\n| setFormError | (errors:Record<string,string\\|Error>>)                      | 设置表单的错误值                     |\r\n| validate     | (name:string)=>any                                          | 校验特定字段的表单值，并且返回字段值 |\r\n| validateForm | (names?:string[])=>any                                      | 校验表单，并返回对应的值，默认为全部 |\r\n| reset        | (names?:string[])=>void                                     | 重置表单，默认为全部字段             |\r\n\r\n### Hooks\r\n\r\n#### Form.useForm\r\n\r\n创建 Form 实例，操作 Form 的 Store。\r\n\r\n```typescript\r\ntype Form.useForm = (): [FormInstance]\r\n```\r\n\r\n#### Form.useFormValueState\r\n\r\n获取特定字段的状态，可以操作该字段的值\r\n\r\n```typescript\r\ntype Form.useFormValueState = (name:string): [value:any,(value: any) => void]\r\n```\r\n\r\n#### Form.useFormValueEffect\r\n\r\n监听特定字段的值，发生变化时执行回调\r\n\r\n```typescript\r\ntype FormComponent.useFormValueEffect = (callback: (v: any) => void, params: {form: FormInstance,deep: string[]}) => void\r\n```\r\n","# Form\r\n\r\nForm component, providing data management, validation, submission, interaction, etc\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Form\r\n\r\n| Property        | Type                                | Default | Description                                                                                           |\r\n| --------------- | ----------------------------------- | ------- | ----------------------------------------------------------------------------------------------------- |\r\n| className       | string                              | -       | Extend className                                                                                      |\r\n| disabled        | boolean                             | false   | When disabled is true, all the elements in the form are disabled.                                     |\r\n| defaultValue    | any                                 | -       | Form default value                                                                                    |\r\n| inline          | boolean                             | false   | When inline is true, the form is horizontal layout                                                    |\r\n| onError         | (error:Error)=>void                 | -       | Callback when the error happens                                                                       |\r\n| onReset         | ()=>void                            | -       | Reset the form callback event                                                                         |\r\n| onSubmit        | (value:any)=>void                   | -       | Callback events after the form is submitted and data validation is successful                         |\r\n| scrollToError   | boolean                             | -       | Submit failure automatically scrolls to the first error field                                         |\r\n| style           | React.CSSProperties                 | -       | Container element style                                                                               |\r\n| labelAlign      | 'top' \\|'right' \\|'left'            | -       | Label sort                                                                                            |\r\n| labelWidth      | string \\| number                    | '140px' | Label width, invalid if labelAlign is 'top'.                                                          |\r\n| onChange        | (changeValues:any,values:any)=>void | -       | A callback event is triggered when a field is updated                                                 |\r\n| removeUndefined | boolean                             | true    | Whether to delete fields whose value is undefined, the default value is delete                        |\r\n| errors          | Record<string,string\\|number>       | -       | Form errors                                                                                           |\r\n| animation       | boolean                             | false   | Whether to animate error                                                                              |\r\n| preserve        | boolean                             | false   | Preserve the field value when the field is deleted                                                    |\r\n| form            | FormInstance                        | -       | The Form control instance created by form.useForm () is automatically created when it is not provided |\r\n\r\n### Form.Item\r\n\r\n** Form field components for bidirectional data binding, validation, layout, and so on. **\r\n\r\n| Property      | Type                                                               | Default | Description                                                                                                                      |\r\n| ------------- | ------------------------------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------------------------------------- |\r\n| className     | string                                                             | -       | Extend className.                                                                                                                |\r\n| defaultValue  | any                                                                | -       | The defaultValue of the Form field, which has a lower priority than the defaultValue of the Form.                                |\r\n| label         | ReactNode                                                          | -       | When undefined, the tag will not render and will not hold space.                                                                 |\r\n| labelAlign    | 'top' \\|'right' \\|'left'                                           | -       | Label sort                                                                                                                       |\r\n| labelWidth    | string \\| number                                                   | -       | Label width, invalid if labelAlign is 'top'.                                                                                     |\r\n| required      | boolean                                                            | false   | Required tag, for display only, does not trigger check                                                                           |\r\n| tip           | ReactNode                                                          | -       | Tip information                                                                                                                  |\r\n| style         | React.CSSProperties                                                | -       | FormItem style                                                                                                                   |\r\n| grid          | number \\| { width?: number; offset?: number; responsive?: number } | -       | Configuration of rasters for FormItem                                                                                            |\r\n| rules         | Rule[]                                                             | -       | Rules of verification                                                                                                            |\r\n| name          | string \\| string[]                                                 | -       | Field name, support array, support multilevel nested data                                                                        |\r\n| flow          | boolean \\| string[]                                                | -       | Subscribe to the update of the corresponding field. If the Flow field is updated, the FormItem is re-rendered                    |\r\n| noStyle       | boolean                                                            | false   | No style, used as a pure field control                                                                                           |\r\n| noErrorInRoot | boolean                                                            | false   | By default, the top-level FormItem collects error displays for all FormItems. FormItem set to true do not collect error messages |\r\n| preserve      | boolean                                                            | false   | Preserve the field value when the field is deleted                                                                               |\r\n| animation     | boolean                                                            | false   | Whether to animate error                                                                                                         |\r\n\r\n### Form.FieldSet\r\n\r\n** Handle a set(group) data from form by name. **\r\n\r\n| Property     | Type                                     | Default  | Description|\r\n| ------------ | ---------------------------------------- | -------- ||\r\n| children     | (opts: object) => ReactNode \\| ReactNode | required | When children type is not function, handle a set data type of object, When children type is function, handle a group of data type of array. options property: <br />list: all data of name <br />value：a single piece of data for the value obtained by name <br />onChange：a callback when the value is changing <br />onRemove：a callback when a child component is removed <br />index：the current index <br />onInsert: Insert a piece of data before the current item <br />onAppend: Insert a piece of data after the current item |\r\n| defaultValue | string \\| number                         |          | Default value|\r\n| emptyRender  | (onInsert: any) => ReactNode             | -        | Display content when data is empty. (Only valid if children is function)                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\r\n| name         | string                                   | required | The name to access data from the Form                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| rules        | any[]                                    | -        | Rules of verification                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| preserve     | boolean                                  | false    | Preserve the field value when the field is deleted 值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| flow         | boolean \\| string[]                      | -        | Subscribe to the update of the corresponding field. If the Flow field is updated, the FormItem is re-rendered                                                                                                                                                                                                                                                                                                                                                                                                                                |\r\n| animation    | boolean                                  | false    | Whether to animate error error                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\r\n\r\n### FormInstance\r\n\r\n** An instance of the form component that manipulates the Form Store **\r\n\r\n| Property     | Type                                                        | Description                                                                   |\r\n| ------------ | ----------------------------------------------------------- | ----------------------------------------------------------------------------- |\r\n| get          | (name:string\\|string[])=>any                                | Gets the value of a specific field                                            |\r\n| getValue     | ()=>any                                                     | Returns the values of the form                                                |\r\n| set          | (params:{name:string\\|string[],value:any})=>any             | Sets the value of a specific field                                            |\r\n| setValue     | (values:any)=>any                                           | Sets the values of the form                                                   |\r\n| setError     | (params:{name:string\\|string[],error:Error \\| string})=>any | Sets the value of a specific field error                                      |\r\n| setFormError | (errors:Record<string,string\\|Error>>)                      | Sets the errors of the form                                                   |\r\n| validate     | (name:string)=>any                                          | Verifies the form value for a particular field and returns the field value    |\r\n| validateForm | (names?:string[])=>any                                      | Validates the form and returns the corresponding value, which defaults to all |\r\n| reset        | (names?:string[])=>void                                     | Reset the form, which defaults to all fields                                  |\r\n\r\n### Hooks\r\n\r\n#### Form.useForm\r\n\r\nCreate Form instance to maintain data store.\r\n\r\n```typescript\r\ntype Form.useForm = (): [FormInstance]\r\n```\r\n\r\n#### Form.useFormValueState\r\n\r\nGets the status of a specific field, the value of which can be manipulated\r\n\r\n```typescript\r\ntype Form.useFormValueState = (name:string): [value:any,(value: any) => void]\r\n```\r\n\r\n#### Form.useFormValueEffect\r\n\r\nSubscribe for the value of a particular field and perform a callback when it changes\r\n\r\n```typescript\r\ntype FormComponent.useFormValueEffect = (callback: (v: any) => void, params: {form: FormInstance,deep: string[]}) => void\r\n```\r\n"),u=[{name:"01-basex",title:(0,t.default)("基本用法 \n 表单内置了类似双向绑定的机制，根据FormItem的 name 属性自动下发、收集数据","Base \n The form has a two-way binding mechanism built in, automatically sending and collecting data based on the name property of the FormItem."),component:n(60727).default,rawText:n(37985).Z},{name:"02-labelWidthx",title:(0,t.default)("标签 \n 通过 labelWidth 和 labelAlign 改变标签宽度和对齐方式","Label \n Set labelWidth and labelAlign to change label with and alignment."),component:n(68288).default,rawText:n(37953).Z},{name:"03-inlinex",title:(0,t.default)("水平布局 \n 设置 inline 属性使 Form 变为水平布局","Inline \n Set the inline property to true to make the Form horizontal."),component:n(28860).default,rawText:n(50084).Z},{name:"04-componentx",title:(0,t.default)("自定义表单组件 \n 提供受控的value和onChange使组件成为自定义表单组件","Customized Form Controls \n Providing controlled values and onChange makes the component a customized form component."),component:n(71834).default,rawText:n(44097).Z},{name:"04-disabledx",title:(0,t.default)("禁用 \n 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时","Disabled \n Use the disabled property to make the Form support to disable component."),component:n(2059).default,rawText:n(87248).Z},{name:"05-childrenx",title:(0,t.default)("函数Children \n Form.Item children 为函数时，会提供一些操作Form的参数","Function children \n When form. Item children is a function, it provides some parameters to manipulate the Form."),component:n(41483).default,rawText:n(69287).Z},{name:"06-noStylex",title:(0,t.default)("没样式 \n 无样式的FormItem可直接展示组件，但仍然保留收集数据的能力,实现更复杂的组件","NoStyle \n FormItem without styles can directly display components, but still retain the ability to collect data and implement more complex components"),component:n(90896).default,rawText:n(10325).Z},{name:"07-fieldSetx",title:(0,t.default)("FieldSet \n FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件。","FieldSet \n When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents."),component:n(69767).default,rawText:n(91067).Z},{name:"08-flowx",title:(0,t.default)("依赖更新 \n 设置flow值时，不仅会重新渲染FormItem，还会进行校验操作","Flow update \n When the flow value is set, the FormItem is not only re-rendered, but also validated"),component:n(34874).default,rawText:n(64104).Z},{name:"09-validatex",title:(0,t.default)("校验 \n 更多组件的检验","Validate \n More component validation"),component:n(44332).default,rawText:n(39763).Z},{name:"10-errorsx",title:(0,t.default)(" \n 通过给 Form 设置 errors，实现后端校验数据展示。在表单值被改变后，对应后端校验数据会被清空。前端校验优先级大于后端校验。"," \n By setting an errors on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared.front-end validation priority is greater than back-end validation."),component:n(11878).default,rawText:n(14503).Z},{name:"11-instancex",title:(0,t.default)("表单实例 \n 获取表单实例,通过表单实例去操作表单的一些方法, 包含校验, 提交等.(函数组件)","Form instance \n Get Form component instance. \n And then use the form instance to operate some methods of the form, including validate, submit, etc(Function component)"),component:n(40363).default,rawText:n(1458).Z},{name:"12-instance-classx",title:(0,t.default)(" \n 获取表单实例.(类组件)"," \n Get Form component instance.(Class component)"),component:n(98573).default,rawText:n(79880).Z},{name:"13-hooks-effectx",title:(0,t.default)(" \n useFormValueEffect 基本用法(无法读取不存在的属性)"," \n useFormValueEffect basic usage(Cannot read a property that does not exist)"),component:n(49235).default,rawText:n(55573).Z},{name:"13-hooks-statex",title:(0,t.default)("Hooks \n useFormValueState基本用法","Hooks \n UseFormValueState basic usage"),component:n(56433).default,rawText:n(78520).Z},{name:"14-beforeChangex",title:(0,t.default)("改变前回调 \n 使用beforeChange可以在改变回传到onChange中的value","beforeChange \n Use beforeChange to set the value in the change back to onChange"),component:n(63845).default,rawText:n(11319).Z}],i=r()(function(e){return l().createElement(o(),a()({},e,{source:m,examples:u}))})},37985:function(e,r){"use strict";r.Z="/**\r\n * cn - 基本用法\r\n *    -- 表单内置了类似双向绑定的机制，根据FormItem的 name 属性自动下发、收集数据\r\n * en - Base\r\n *    -- The form has a two-way binding mechanism built in, automatically sending and collecting data based on the name property of the FormItem.\r\n */\r\nimport React from 'react'\r\nimport { Form, Input, Checkbox, Radio, Textarea, Select, Upload, Button } from 'ethan-ui'\r\nimport { EthanFile } from '@/component/Upload/type'\r\n\r\ninterface FormValues {\r\n    email: string\r\n    password: string\r\n    number: number\r\n    file: EthanFile\r\n    age: number\r\n    favoriteColor: string[]\r\n    otherColor: string\r\n    hateColor: string\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form<FormValues> onChange={console.log}>\r\n            <Form.Item label=\"Email\" name=\"test\">\r\n                <div>\r\n                    <Input clearable popoverProps={{ placement: 'left-top' }} />\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Email\" name=\"email\">\r\n                <Input clearable popoverProps={{ placement: 'left-top' }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Password\" name=\"password\">\r\n                <Input.Password type=\"password\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Number\" name=\"number\">\r\n                <Input.Number width={120} max={100} min={10} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>} name=\"file\">\r\n                <Upload.Image action=\"//jsonplaceholder.typicode.com/posts\" accept=\"image/*\" limit={3} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Age\" name=\"age\">\r\n                <Input style={{ width: 100 }} type=\"number\" digits={0} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Favorite Color\" name=\"favoriteColor\">\r\n                <Checkbox.Group keygen data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Other Color\" name=\"otherColor\">\r\n                <Radio.Group keygen data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Hate Color\" name=\"hateColor\">\r\n                <Select\r\n                    keygen\r\n                    style={{ width: 100 }}\r\n                    clearable\r\n                    data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Description\" name=\"desc\">\r\n                <Textarea autoSize />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType=\"submit\" type=\"primary\">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType=\"reset\" type=\"primary\" style={{ marginLeft: '10px' }}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"},37953:function(e,r){"use strict";r.Z='/**\r\n * cn - 标签\r\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和对齐方式\r\n * en - Label\r\n *    -- Set labelWidth and labelAlign to change label with and alignment.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input } from \'ethan-ui\'\r\n\r\nexport default function() {\r\n    return (\r\n        <Form labelAlign="right" labelWidth={200} style={{ maxWidth: 500 }}>\r\n            <Form.Item label="Email" name="email">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Password" name="password">\r\n                <Input type="password" />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},50084:function(e,r){"use strict";r.Z='/**\r\n * cn - 水平布局\r\n *    -- 设置 inline 属性使 Form 变为水平布局\r\n * en - Inline\r\n *    -- Set the inline property to true to make the Form horizontal.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Checkbox, Button } from \'ethan-ui\'\r\n\r\nexport default function() {\r\n    return (\r\n        <Form inline onSubmit={console.log}>\r\n            <Form.Item label="Email">\r\n                <Input name="email" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="password">\r\n                <Input placeholder="Password" type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="remember" style={{ verticalAlign: \'middle\' }}>\r\n                <Checkbox>Remember</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Button htmlType="submit" type="primary">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    )\r\n}\r\n'},44097:function(e,r){"use strict";r.Z="/**\r\n * cn - 自定义表单组件\r\n *    -- 提供受控的value和onChange使组件成为自定义表单组件\r\n * en - Customized Form Controls\r\n *    -- Providing controlled values and onChange makes the component a customized form component.\r\n */\r\nimport React from 'react'\r\nimport { Button, Form, Input, Select } from 'ethan-ui'\r\n\r\ninterface PriceInputProps {\r\n    value?: { number?: number; currency?: string }\r\n    onChange?: (value: { number?: number; currency?: string }) => void\r\n}\r\n\r\nconst PriceInput: React.FC<PriceInputProps> = ({ value = {}, onChange }) => {\r\n    function handleNumberChange(num) {\r\n        if (onChange) {\r\n            onChange({ ...value, number: num })\r\n        }\r\n    }\r\n\r\n    function handleCurrencyChange(cur) {\r\n        if (onChange) {\r\n            onChange({ ...value, currency: cur })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <Input type=\"number\" value={value.number} onChange={handleNumberChange} style={{ width: 100 }} />\r\n            <Select\r\n                value={value.currency}\r\n                style={{ width: 80, margin: '0 8px' }}\r\n                onChange={handleCurrencyChange}\r\n                renderItem=\"label\"\r\n                data={[\r\n                    { label: 'RMB', value: 'rmb' },\r\n                    { label: 'Dollar', value: 'dollar' },\r\n                ]}\r\n                format=\"value\"\r\n            />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default function App() {\r\n    const defaultValue = {\r\n        price: {\r\n            number: 0,\r\n            currency: 'rmb',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Form defaultValue={defaultValue} onSubmit={console.log}>\r\n            <Form.Item name=\"price\" label=\"Price\">\r\n                <PriceInput />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType=\"submit\" type=\"primary\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"},87248:function(e,r){"use strict";r.Z='/**\r\n * cn - 禁用\r\n *    -- 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时\r\n * en - Disabled\r\n *    -- Use the disabled property to make the Form support to disable component.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Checkbox, Button } from \'ethan-ui\'\r\n\r\nexport default function() {\r\n    return (\r\n        <Form disabled>\r\n            <Form.Item label="Email" name="email">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Password" name="password">\r\n                <Input type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Age">\r\n                <Input style={{ width: 100 }} name="age" type="number" digits={0} defaultValue={0} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Favorite Color" name="favoriteColor">\r\n                <Checkbox.Group keygen data={[\'red\', \'orange\', \'yellow\', \'green\', \'cyan\', \'blue\', \'violet\']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button loading>Submit</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},69287:function(e,r){"use strict";r.Z='/**\r\n * cn - 函数Children\r\n *    -- Form.Item children 为函数时，会提供一些操作Form的参数\r\n * en - Function children\r\n *    -- When form. Item children is a function, it provides some parameters to manipulate the Form.\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    mobile: number\r\n\r\n    telephone: number\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form onSubmit={console.log}>\r\n            <Form.Item<FormValues> name="name" label="name">\r\n                <Input clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> noStyle flow={[\'name\']}>\r\n                {({ form }) => {\r\n                    const name = form.get(\'name\')\r\n\r\n                    if (!name) {\r\n                        return (\r\n                            <Form.Item label={<></>}>\r\n                                <span>Enter your mobile after your name</span>\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n\r\n                    /** FormItem内部没有对添加key值，如果存在多种可能的实例，需要显式指名Key */\r\n                    return (\r\n                        <Form.Item name="mobile" label="Mobile" key="mobile">\r\n                            <Input type="number" />\r\n                        </Form.Item>\r\n                    )\r\n                }}\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> noStyle flow={[\'name\']}>\r\n                {({ form }) => {\r\n                    const name = form.get(\'name\')\r\n\r\n                    if (!name) {\r\n                        /** 改变组件的结构，使条件语句中的实例不一样 */\r\n                        return (\r\n                            <>\r\n                                <Form.Item label={<></>}>\r\n                                    <span>Enter your information after your name</span>\r\n                                </Form.Item>\r\n                            </>\r\n                        )\r\n                    }\r\n\r\n                    return (\r\n                        <Form.Item name="information" label="Information(preserve)" preserve>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    )\r\n                }}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},10325:function(e,r){"use strict";r.Z="/**\r\n * cn - 没样式\r\n *    -- 无样式的FormItem可直接展示组件，但仍然保留收集数据的能力,实现更复杂的组件\r\n * en - NoStyle\r\n *    -- FormItem without styles can directly display components, but still retain the ability to collect data and implement more complex components\r\n */\r\nimport React from 'react'\r\nimport { Button, FontAwesome, Form, Input, Select, Upload } from 'ethan-ui'\r\n\r\nconst App = () => {\r\n    return (\r\n        <Form labelWidth=\"80px\" onChange={console.log}>\r\n            <Form.Item label=\"Username\">\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        noStyle\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Username is required',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            style={{\r\n                                width: 160,\r\n                            }}\r\n                            placeholder=\"Please input\"\r\n                        />\r\n                    </Form.Item>\r\n                    <a href=\"\" style={{ marginLeft: '10px' }}>\r\n                        Need Help?\r\n                    </a>\r\n                </div>\r\n            </Form.Item>\r\n            <Form.Item label=\"Address\">\r\n                <Input.Group>\r\n                    <Form.Item\r\n                        name=\"address.province\"\r\n                        noStyle\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Province is required',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Select placeholder=\"Select province\" data={['Zhejiang', 'Jiangsu']} keygen clearable />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"address.street\"\r\n                        noStyle\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Street is required',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input placeholder=\"Input street\" />\r\n                    </Form.Item>\r\n                </Input.Group>\r\n            </Form.Item>\r\n            <Form.Item label=\"BirthDate\">\r\n                <Form.Item\r\n                    name=\"year\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Year is required',\r\n                        },\r\n                    ]}\r\n                    style={{\r\n                        display: 'inline-block',\r\n                        width: 'calc(50% - 8px)',\r\n                        marginBottom: 0,\r\n                    }}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"month\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Month is required',\r\n                        },\r\n                    ]}\r\n                    style={{\r\n                        display: 'inline-block',\r\n                        width: 'calc(50% - 8px)',\r\n                        margin: '0 8px',\r\n                    }}\r\n                >\r\n                    <Input placeholder=\"Input birth month\" />\r\n                </Form.Item>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"avatar\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Avatar is required',\r\n                    },\r\n                ]}\r\n                label=\"Avatar\"\r\n            >\r\n                {({ value, onChange, error }) => {\r\n                    return (\r\n                        <>\r\n                            <Upload\r\n                                value={value}\r\n                                onChange={onChange}\r\n                                style={{ width: 300 }}\r\n                                beforeUpload={() => Promise.resolve({ status: 'MANUAL' })}\r\n                            >\r\n                                <Button type={error ? 'danger' : 'default'}>\r\n                                    <FontAwesome name=\"cloud-upload \" style={{ marginRight: 4 }} />\r\n                                    Upload avatar\r\n                                </Button>\r\n                            </Upload>\r\n                        </>\r\n                    )\r\n                }}\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default App\r\n"},91067:function(e,r){"use strict";r.Z='/**\r\n * cn - FieldSet\r\n *    -- FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件。\r\n * en - FieldSet\r\n *    -- When FieldSet\'s children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Button, FontAwesome, Rule } from \'ethan-ui\'\r\n\r\nexport default function App() {\r\n    const [index, updateIndex] = React.useState(0)\r\n\r\n    const rule = Rule()\r\n\r\n    return (\r\n        <Form animation defaultValue={{ name: \'Ethan\', friends: [{ age: index, name: index }] }}>\r\n            <Form.Item label="Name" name="name">\r\n                <Input defaultValue="Harry Potter" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Friends" noErrorInRoot>\r\n                <Form.FieldSet<{ age: number; name: number }>\r\n                    name="friends"\r\n                    rules={[rule.min(1)]}\r\n                    emptyRender={onAppend => {\r\n                        return (\r\n                            <Button\r\n                                key="empty"\r\n                                onClick={() => {\r\n                                    const nextIndex = index + 1\r\n\r\n                                    updateIndex(nextIndex)\r\n\r\n                                    onAppend({ age: nextIndex, name: nextIndex })\r\n                                }}\r\n                            >\r\n                                Add new friend\r\n                            </Button>\r\n                        )\r\n                    }}\r\n                >\r\n                    {({ onAppend, onRemove }) => (\r\n                        <div style={{ display: \'flex\', marginBottom: 4 }}>\r\n                            <Form.Item name="name">\r\n                                <Input style={{ width: 180, marginInlineEnd: 8 }} placeholder="Name" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name="age">\r\n                                <Input style={{ width: 60 }} type="number" title="Friend age" placeholder="Age" />\r\n                            </Form.Item>\r\n\r\n                            <div style={{ lineHeight: \'32px\' }}>\r\n                                <a\r\n                                    style={{ margin: \'0 12px\' }}\r\n                                    onClick={() => {\r\n                                        const nextIndex = index + 1\r\n\r\n                                        updateIndex(nextIndex)\r\n\r\n                                        onAppend({ age: nextIndex, name: nextIndex })\r\n                                    }}\r\n                                >\r\n                                    <FontAwesome name="plus" />\r\n                                </a>\r\n                                <a onClick={onRemove}>\r\n                                    <FontAwesome name="close" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},64104:function(e,r){"use strict";r.Z='/**\r\n * cn - 依赖更新\r\n *    -- 设置flow值时，不仅会重新渲染FormItem，还会进行校验操作\r\n * en - Flow update\r\n *    -- When the flow value is set, the FormItem is not only re-rendered, but also validated\r\n */\r\nimport { FormItemProps } from \'@/component/Form/type\'\r\nimport { Input, Form, Rule, Button } from \'ethan-ui\'\r\nimport React from \'react\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n    mobile?: string\r\n    telephone?: string\r\n}\r\n\r\nconst { mandatory } = Rule({\r\n    mandatory(_, formValues: FormValues, callback, props: FormItemProps<FormValues>) {\r\n        const { name } = props\r\n\r\n        const { mobile, telephone } = formValues\r\n\r\n        if (!mobile && !telephone) {\r\n            return Promise.reject(new Error(\'手机、固话必须填写一项\'))\r\n        }\r\n\r\n        const mobileRegExp = new RegExp(/^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$/)\r\n\r\n        if (name === \'mobile\' && !mobileRegExp.test(mobile) && !telephone) {\r\n            return Promise.reject(new Error(\'请输入真实11位手机号码\'))\r\n        }\r\n\r\n        return Promise.resolve(true)\r\n    },\r\n})\r\n\r\nexport default function() {\r\n    return (\r\n        <Form labelWidth={60} labelAlign="right">\r\n            <Form.Item\r\n                label="姓名"\r\n                name="name"\r\n                required\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: \'收货人姓名不能为空\',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="手机" name="mobile" rules={[mandatory]} flow={[\'telephone\']}>\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n            <Form.Item label="固话" name="telephone" rules={[mandatory]} flow={[\'mobile\']} className="ml5">\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset" type="primary" style={{ marginLeft: \'10px\' }}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},39763:function(e,r){"use strict";r.Z='/**\r\n * cn - 校验\r\n *    -- 更多组件的检验\r\n * en - Validate\r\n *    -- More component validation\r\n */\r\nimport React from \'react\'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FontAwesome,\r\n    Form,\r\n    Input,\r\n    Radio,\r\n    Rate,\r\n    Rule,\r\n    Select,\r\n    Slider,\r\n    Upload,\r\n    Transfer,\r\n} from \'ethan-ui\'\r\n\r\nconst rule = Rule({\r\n    uploadSize(value) {\r\n        if (!value || !value?.[0]) return Promise.reject(new Error(\'You have to upload file\'))\r\n\r\n        const { blob } = value[0]\r\n\r\n        const { size } = blob\r\n\r\n        if (size >= 1024 * 60) return Promise.reject(new Error(\'The file is too large\'))\r\n\r\n        return Promise.resolve(true)\r\n    },\r\n})\r\n\r\nconst transferData = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    transferData.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form onChange={console.log} onSubmit={console.log} onError={console.log}>\r\n            <Form.Item\r\n                name="select"\r\n                label="Select"\r\n                required\r\n                rules={[{ required: true, message: \'Please select your country!\' }]}\r\n            >\r\n                <Select placeholder="Please select a country" data={[\'China\', \'U.S.A\']} keygen clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="select-multiple" label="Select[multiple]" rules={[rule.required]} required>\r\n                <Select\r\n                    multiple\r\n                    placeholder="Please select favorite colors"\r\n                    data={[\'red\', \'green\', \'blur\']}\r\n                    keygen\r\n                    clearable\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="InputNumber">\r\n                <div style={{ display: \'flex\', alignItems: \'center\' }}>\r\n                    <Form.Item\r\n                        name="input-number"\r\n                        noStyle\r\n                        rules={[{ max: 80, min: 10, type: \'number\', message: \'It has to be between 10 and 80\' }]}\r\n                    >\r\n                        <Input.Number style={{ width: 200 }} />\r\n                    </Form.Item>\r\n                    <span style={{ marginLeft: \'10px\' }}> machines</span>\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="slider"\r\n                label="Slider"\r\n                required\r\n                rules={[\r\n                    rule.required(\'Can not be empty\'),\r\n                    { min: 10, max: 80, type: \'number\', message: \'It has to be between 10 and 80\' },\r\n                ]}\r\n            >\r\n                <Slider />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="radio-group" label="Radio.Group" rules={[rule.required]} required>\r\n                <Radio.Group>\r\n                    <Radio value="a">item 1</Radio>\r\n                    <Radio value="b">item 2</Radio>\r\n                    <Radio value="c">item 3</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="radio-button" label="Radio.Button" rules={[rule.required]} required>\r\n                <Radio.Group button>\r\n                    <Radio value="a">item 1</Radio>\r\n                    <Radio value="b">item 2</Radio>\r\n                    <Radio value="c">item 3</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="checkbox-group" label="Checkbox.Group" rules={[rule.required]} required>\r\n                <Checkbox.Group>\r\n                    <Checkbox value="A" style={{ lineHeight: \'32px\' }}>\r\n                        A\r\n                    </Checkbox>\r\n                    <Checkbox value="B" style={{ lineHeight: \'32px\' }} disabled>\r\n                        B\r\n                    </Checkbox>\r\n                    <Checkbox value="C" style={{ lineHeight: \'32px\' }}>\r\n                        C\r\n                    </Checkbox>\r\n                    <Checkbox value="D" style={{ lineHeight: \'32px\' }}>\r\n                        D\r\n                    </Checkbox>\r\n                    <Checkbox value="E" style={{ lineHeight: \'32px\' }}>\r\n                        E\r\n                    </Checkbox>\r\n                    <Checkbox value="F" style={{ lineHeight: \'32px\' }}>\r\n                        F\r\n                    </Checkbox>\r\n                </Checkbox.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="rate" label="Rate" rules={[rule.required]} required>\r\n                <Rate size={40} background={<FontAwesome name="star" />} front={<FontAwesome name="star" />} />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="transfer" label="Transfer" rules={[rule.required]}>\r\n                <Transfer\r\n                    data={transferData}\r\n                    format="id"\r\n                    renderItem="content"\r\n                    keygen="id"\r\n                    titles={[\'Source\', \'Target\']}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="upload"\r\n                label="Upload"\r\n                tip="longgggggggggggggggggggggggggggggggggg"\r\n                rules={[rule.uploadSize]}\r\n            >\r\n                <Upload.Image\r\n                    name="logo"\r\n                    beforeUpload={() => Promise.resolve({ status: \'MANUAL\' })}\r\n                    width={250}\r\n                    limit={1}\r\n                >\r\n                    <div style={{ textAlign: \'center\', width: \'100%\', padding: 20 }}>\r\n                        <FontAwesome style={{ color: \'#409dfd\', fontSize: 20 }} name="image" />\r\n                        <br />\r\n                        Click to upload\r\n                    </div>\r\n                </Upload.Image>\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button type="primary" htmlType="submit">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},14503:function(e,r){"use strict";r.Z='/**\r\n * cn -\r\n *    -- 通过给 Form 设置 errors，实现后端校验数据展示。在表单值被改变后，对应后端校验数据会被清空。前端校验优先级大于后端校验。\r\n * en -\r\n *    -- By setting an errors on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared.front-end validation priority is greater than back-end validation.\r\n */\r\nimport React, { useState } from \'react\'\r\nimport { Form, Input, Button, Rule } from \'ethan-ui\'\r\n\r\nexport default function App() {\r\n    const [errors, updateErrors] = useState(undefined)\r\n\r\n    const [loading, updateLoading] = useState(false)\r\n\r\n    return (\r\n        <Form\r\n            errors={errors}\r\n            disabled={loading}\r\n            onSubmit={async () => {\r\n                updateLoading(true)\r\n\r\n                const errorResults = await new Promise(resolve => {\r\n                    setTimeout(() => {\r\n                        resolve({ nickName: \'Nicknames already exist\' })\r\n                    }, 2000)\r\n                })\r\n\r\n                updateErrors(errorResults)\r\n\r\n                updateLoading(false)\r\n            }}\r\n        >\r\n            <Form.Item label="NickName" name="nickName" rules={[Rule().required]}>\r\n                <Input clearable popoverProps={{ placement: \'left-top\' }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary" loading={loading}>\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset" type="primary" style={{ marginLeft: \'10px\' }} disabled={loading}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},1458:function(e,r){"use strict";r.Z='/**\r\n * cn - 表单实例\r\n *    -- 获取表单实例,通过表单实例去操作表单的一些方法, 包含校验, 提交等.(函数组件)\r\n * en - Form instance\r\n *    -- Get Form component instance.\r\n *    -- And then use the form instance to operate some methods of the form, including validate, submit, etc(Function component)\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            onSubmit={data => {\r\n                console.log(\'onSubmit:\', data)\r\n            }}\r\n        >\r\n            <div style={{ margin: \'20px 0\' }}>\r\n                <Button onClick={() => console.log(form.getValue())}>get value</Button>\r\n                <Button onClick={() => form.validateForm()}>validateForm</Button>\r\n                <Button onClick={() => form.submit()}>submit</Button>\r\n                <Button onClick={() => form.reset()}>reset</Button>\r\n            </div>\r\n            <Form.Item label="name" name="name" rules={[{ required: true, message: \'Name can not be empty\' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label="Password"\r\n                name="password"\r\n                rules={[{ required: true, message: \'Password can not be empty\' }]}\r\n            >\r\n                <Input.Password type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button type="primary" htmlType="submit">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset">Reset</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},79880:function(e,r){"use strict";r.Z='/**\r\n * cn -\r\n *    -- 获取表单实例.(类组件)\r\n * en -\r\n *    -- Get Form component instance.(Class component)\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\nimport { FormInstance } from \'@/component/Form/type\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default class extends React.PureComponent {\r\n    formRef = React.createRef<FormInstance<FormValues>>()\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                ref={this.formRef}\r\n                onSubmit={data => {\r\n                    console.log(\'onSubmit:\', data)\r\n                }}\r\n            >\r\n                <div style={{ margin: \'20px 0\' }}>\r\n                    <Button onClick={() => console.log(this.formRef.current.getValue())}>get value</Button>\r\n                    <Button onClick={() => this.formRef.current.validateForm()}>validateForm</Button>\r\n                    <Button onClick={() => this.formRef.current.submit()}>submit</Button>\r\n                    <Button onClick={() => this.formRef.current.reset()}>reset</Button>\r\n                </div>\r\n                <Form.Item label="name" name="name" rules={[{ required: true, message: \'Name can not be empty\' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label="Password"\r\n                    name="password"\r\n                    rules={[{ required: true, message: \'Password can not be empty\' }]}\r\n                >\r\n                    <Input.Password type="password" />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={<></>}>\r\n                    <Button type="primary" htmlType="submit">\r\n                        Submit\r\n                    </Button>\r\n\r\n                    <Button htmlType="reset">Reset</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n'},55573:function(e,r){"use strict";r.Z='/**\r\n * cn -\r\n *    -- useFormValueEffect 基本用法(无法读取不存在的属性)\r\n * en -\r\n *    -- useFormValueEffect basic usage(Cannot read a property that does not exist)\r\n */\r\nimport React from \'react\'\r\nimport { Button, FontAwesome, Form, Input, Select } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n    contact: {\r\n        phone: string\r\n        telephone: string\r\n    }\r\n    address: string\r\n    friends: any[]\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    Form.useFormValueEffect(\r\n        v => {\r\n            console.log(\'UseFormValueEffect callback:\', v)\r\n        },\r\n        { form, deep: [\'name\', \'contact.phone\', \'address\', \'friends\'] }\r\n    )\r\n\r\n    return (\r\n        <Form form={form}>\r\n            <Form.Item name="name" label="Name">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Contact">\r\n                <div style={{ display: \'flex\' }}>\r\n                    <Form.Item noStyle name="contact.phone">\r\n                        <Input clearable placeholder="phone" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item noStyle name="contact.telephone">\r\n                        <Input clearable placeholder="telephone" />\r\n                    </Form.Item>\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Address">\r\n                <Form.FieldSet name="address">\r\n                    <div style={{ display: \'flex\' }}>\r\n                        <Form.Item noStyle name="province">\r\n                            <Select keygen style={{ width: 100 }} clearable data={[\'BeiJing\', \'ShangHai\']} />\r\n                        </Form.Item>\r\n                        <Form.Item noStyle name="street">\r\n                            <Input clearable />\r\n                        </Form.Item>\r\n                    </div>\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Friends">\r\n                <Form.FieldSet\r\n                    name="friends"\r\n                    emptyRender={onAppend => (\r\n                        <Button\r\n                            key="empty"\r\n                            onClick={() => {\r\n                                onAppend({ age: 18, name: \'Tom\' })\r\n                            }}\r\n                        >\r\n                            Add new friend\r\n                        </Button>\r\n                    )}\r\n                >\r\n                    {({ onAppend, onRemove }) => (\r\n                        <div style={{ display: \'flex\', marginBottom: 4 }}>\r\n                            <Form.Item name="name">\r\n                                <Input style={{ width: 180, marginInlineEnd: 8 }} placeholder="Name" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name="age">\r\n                                <Input style={{ width: 60 }} type="number" title="Friend age" placeholder="Age" />\r\n                            </Form.Item>\r\n\r\n                            <div style={{ lineHeight: \'32px\' }}>\r\n                                <a\r\n                                    style={{ margin: \'0 12px\' }}\r\n                                    onClick={() => {\r\n                                        onAppend({\r\n                                            age: undefined,\r\n                                            name: undefined,\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <FontAwesome name="plus" />\r\n                                </a>\r\n                                <a onClick={onRemove}>\r\n                                    <FontAwesome name="close" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},78520:function(e,r){"use strict";r.Z="/**\r\n * cn - Hooks\r\n *    -- useFormValueState基本用法\r\n * en - Hooks\r\n *    -- UseFormValueState basic usage\r\n */\r\nimport React from 'react'\r\nimport { Form, Input } from 'ethan-ui'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    const [name, updateName] = Form.useFormValueState(form, 'name')\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} labelAlign=\"top\">\r\n                <Form.Item name=\"name\" label=\"The name controlled by the form\">\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n\r\n            <pre style={{ padding: '5px', fontSize: '14px' }}>New name: {name}</pre>\r\n\r\n            <Input placeholder=\"The name controlled by the hooks\" onChange={updateName} />\r\n        </>\r\n    )\r\n}\r\n"},11319:function(e,r){"use strict";r.Z="/**\r\n * cn - 改变前回调\r\n *    -- 使用beforeChange可以在改变回传到onChange中的value\r\n * en - beforeChange\r\n *    -- Use beforeChange to set the value in the change back to onChange\r\n */\r\nimport React from 'react'\r\nimport { Form, Input, Select } from 'ethan-ui'\r\n\r\ninterface FormValues {\r\n    money: string\r\n\r\n    unit: string\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form>\r\n            <Form.Item<FormValues>\r\n                name=\"money\"\r\n                label=\"money\"\r\n                beforeChange={(value, prevValue = '', form) => {\r\n                    if (typeof value === 'string') {\r\n                        const { unit } = form.getValue()\r\n\r\n                        const regExpStr = `${unit}`\r\n\r\n                        value = value.replace(new RegExp(regExpStr, 'g'), '')\r\n\r\n                        if (\r\n                            !value ||\r\n                            value === unit ||\r\n                            (prevValue.includes('元') && unit === '磅') ||\r\n                            (prevValue.includes('磅') && unit === '元')\r\n                        ) {\r\n                            value = ''\r\n                        } else {\r\n                            value = `${value}${unit}`\r\n                        }\r\n                    }\r\n\r\n                    return value\r\n                }}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> name=\"unit\" label=\"unit\" defaultValue=\"元\">\r\n                <Select data={['元', '磅']} />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"},95510:function(e,r,n){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,r,n,t){void 0===t&&(t=n),Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[n]}})}:function(e,r,n,t){void 0===t&&(t=n),e[t]=r[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(r,e,n);return a(r,e),r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var m=l(n(24698)),u=o(n(94184)),i=o(n(15660));n(62356);var s=n(36910);r.default=function(e){var r=e.language,r=void 0===r?"lang-jsx":r,n=e.onHighLight,e=e.value,t=(0,m.useRef)(null);return(0,m.useEffect)(function(){var e=t.current;i.default.highlightElement(e,!1,function(){n&&n(e.offsetHeight)})},[]),m.default.createElement("pre",{ref:t,className:(0,u.default)(r||"lang-jsx",(0,s.exampleClass)("pre"))},m.default.createElement("code",null,e))}},84241:function(e,r,n){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,r,n,t){void 0===t&&(t=n),Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[n]}})}:function(e,r,n,t){void 0===t&&(t=n),e[t]=r[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(r,e,n);return a(r,e),r},i=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var s=l(n(24698)),d=n(12101),c=o(n(21588)),f=n(36910),p=o(n(20164)),h=o(n(95510));r.default=s.default.memo(function(e){var r=e.component,n=e.id,t=e.rawText,a=void 0===t?"":t,l=e.title,o=i((0,s.useState)(!1),2),m=o[0],u=o[1],t=(0,s.useRef)((0,s.createElement)(r)).current,e=a.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),o=i(l.split("\n")),r=o[0],a=o.slice(1),o=function(){u(!m)};return s.default.createElement(s.default.Fragment,null,r&&s.default.createElement("h3",{id:n},r),s.default.createElement(d.Lazyload,{placeholder:s.default.createElement("div",{className:(0,f.exampleClass)("placeholder")},s.default.createElement(d.Spin,{size:"54px",name:"four-dots",color:"#53a0fd"}))},s.default.createElement("div",{className:(0,f.exampleClass)("_",m&&"showcode")},s.default.createElement("div",{className:(0,f.exampleClass)("body")},t),0<l.length&&s.default.createElement("div",{className:(0,f.exampleClass)("desc")},a.map(function(e,r){return s.default.createElement("div",{key:r,dangerouslySetInnerHTML:{__html:e}})}),s.default.createElement("a",{className:(0,f.exampleClass)("toggle"),onClick:o},s.default.createElement(c.default,{name:m?"code-close":"code"}))),s.default.createElement(p.default,{height:m?"auto":0,easing:"linear",className:(0,f.exampleClass)("code"),duration:240},s.default.createElement(h.default,{value:e}),s.default.createElement("a",{className:(0,f.exampleClass)("toggle"),onClick:o},s.default.createElement(c.default,{name:m?"code-close":"code"}))))))})},82281:function(e,r,n){"use strict";var l=this&&this.__assign||function(){return(l=Object.assign||function(e){for(var r,n=1,t=arguments.length;n<t;n++)for(var a in r=arguments[n])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},o=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},m=this&&this.__spreadArray||function(e,r,n){if(n||2===arguments.length)for(var t,a=0,l=r.length;a<l;a++)!t&&a in r||((t=t||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(t||Array.prototype.slice.call(r))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var u=t(n(24698)),i=t(n(30724)),s=n(69087),a=n(17911),d=n(36910),c=t(n(70954)),f=t(n(95510)),p=t(n(84241)),h=t(n(86212)),b=/^<example name="([\w|-]+)"/,y=function(e,r){return 4===e?(0,a.getUidStr)():"".concat(e,"-").concat((r||"").replace(/[\W|-]/g,"-"))};r.default=u.default.memo(function(e){var r=e.onHeadingSet,t=e.examples,e=e.source,n=u.default.useRef([]).current;function a(e){n.push(e)}return u.default.useEffect(function(){null!=r&&r(n)},[]),u.default.createElement(i.default,{className:(0,d.markdownClass)("_"),source:e,renderers:{code:f.default,heading:function(e){var r=e.level,n=e.children,t="h".concat(r),e="heading-".concat(y(r,n[0]));return 2!==r&&3!==r||a({id:e,level:r,children:n}),u.default.createElement(t,{id:e},n)},html:function(e){if("<example />"===e.value)return function(){if(!t)return u.default.createElement("div",null);var e=(0,c.default)("示例","Example"),r="heading-example-h";return a({id:r,level:2,children:[e]}),m([u.default.createElement("h2",{key:"h",id:r},e)],o(t.map(function(e,r){if(/\d+-/.test(e.name)){var n="heading-".concat(e.name),t=o(e.title.split("\n"),1)[0];return a({id:n,level:3,children:[t]}),u.default.createElement(p.default,l({key:r,id:n},e))}})),!1)}();var r,n=e.value.match(b);return n?(r=n[1],(n=(t||[]).find(function(e){return e.name===r}))?u.default.createElement(p.default,l({},n)):null):"<br>"===e.value||"<br />"===e.value?u.default.createElement("br",null):null},table:h.default,link:function(e){var r=0===e.href.indexOf("http")?"_blank":void 0;return r?u.default.createElement("a",{href:e.href,target:r},e.children):u.default.createElement(s.Link,{to:e.href,target:r},e.children)}}})})},54365:function(e,r,n){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,r,n,t){void 0===t&&(t=n),Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[n]}})}:function(e,r,n,t){void 0===t&&(t=n),e[t]=r[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(r,e,n);return a(r,e),r},m=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var u=l(n(24698)),i=n(12101),s=n(64744),d=n(36910),c=o(n(98789));r.default=function(o){return u.default.memo(function(e){var r=e.noNav,e=m((0,u.useState)(""),2),t=e[0],a=e[1],e=m((0,u.useState)([]),2),l=e[0],e=e[1],n=(0,s.useLocation)().hash;(0,u.useEffect)(function(){function e(){var n,t=document.documentElement.scrollTop,e=l.filter(function(e){return 3===e.level&&e.children.length});0!==e.length&&(n=e[0].id,e.forEach(function(e){var r=document.querySelector("#".concat(e.id));(null==r?void 0:r.offsetTop)<=t&&(n=e.id)}),a(n))}var r;return e(),n&&(r=document.querySelector(n),setTimeout(function(){null!=r&&r.scrollIntoView()},20)),document.addEventListener("scroll",e),function(){document.removeEventListener("scroll",e)}},[l]);return u.default.createElement("div",{className:(0,d.navClass)("_")},u.default.createElement(o,{onHeadingSet:e}),!r&&u.default.createElement(i.Sticky,{className:(0,d.navClass)("sticky"),top:50},u.default.createElement("div",{className:(0,d.navClass)("nav")},l.map(function(e,r){var n=e.children.filter(function(e){return"string"==typeof e});return u.default.createElement("a",{key:r,className:(0,d.navClass)("level-".concat(e.level),t===e.id&&"active"),onClick:function(e){0===c.default.location.search.indexOf("?example=")?c.default.push("".concat(c.default.location.pathname,"?example=").concat(e.replace("heading-",""))):(c.default.push("".concat(c.default.location.pathname,"#").concat(e)),null!=(e=document.getElementById(e))&&e.scrollIntoView())}.bind(null,e.id)},n)}))))})}},86212:function(e,r,n){"use strict";var t=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},a=this&&this.__spreadArray||function(e,r,n){if(n||2===arguments.length)for(var t,a=0,l=r.length;a<l;a++)!t&&a in r||((t=t||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(t||Array.prototype.slice.call(r))},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var o=l(n(24698));r.default=function(e){var e=e.children,r=a([],t(e[1].props.children),!1);try{r.sort(function(e,r){return e.props.children[0].props.children[0].localeCompare(r.props.children[0].props.children[0])})}catch(e){console.log("sort fail...")}return o.default.createElement("div",{style:{overflow:"auto"}},o.default.createElement("table",{className:"doc-api-table"},e[0],o.default.cloneElement(e[1],{children:r})))}},60727:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{onChange:console.log},a.default.createElement(l.Form.Item,{label:"Email",name:"test"},a.default.createElement("div",null,a.default.createElement(l.Input,{clearable:!0,popoverProps:{placement:"left-top"}}))),a.default.createElement(l.Form.Item,{label:"Email",name:"email"},a.default.createElement(l.Input,{clearable:!0,popoverProps:{placement:"left-top"}})),a.default.createElement(l.Form.Item,{label:"Password",name:"password"},a.default.createElement(l.Input.Password,{type:"password"})),a.default.createElement(l.Form.Item,{label:"Number",name:"number"},a.default.createElement(l.Input.Number,{width:120,max:100,min:10})),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null),name:"file"},a.default.createElement(l.Upload.Image,{action:"//jsonplaceholder.typicode.com/posts",accept:"image/*",limit:3})),a.default.createElement(l.Form.Item,{label:"Age",name:"age"},a.default.createElement(l.Input,{style:{width:100},type:"number",digits:0})),a.default.createElement(l.Form.Item,{label:"Favorite Color",name:"favoriteColor"},a.default.createElement(l.Checkbox.Group,{keygen:!0,data:["red","orange","yellow","green","cyan","blue","violet"]})),a.default.createElement(l.Form.Item,{label:"Other Color",name:"otherColor"},a.default.createElement(l.Radio.Group,{keygen:!0,data:["red","orange","yellow","green","cyan","blue","violet"]})),a.default.createElement(l.Form.Item,{label:"Hate Color",name:"hateColor"},a.default.createElement(l.Select,{keygen:!0,style:{width:100},clearable:!0,data:["red","orange","yellow","green","cyan","blue","violet"]})),a.default.createElement(l.Form.Item,{label:"Description",name:"desc"},a.default.createElement(l.Textarea,{autoSize:!0})),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement(l.Button,{htmlType:"submit",type:"primary"},"Submit"),a.default.createElement(l.Button,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"}},"Reset")))}},68288:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{labelAlign:"right",labelWidth:200,style:{maxWidth:500}},a.default.createElement(l.Form.Item,{label:"Email",name:"email"},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{label:"Password",name:"password"},a.default.createElement(l.Input,{type:"password"})))}},28860:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{inline:!0,onSubmit:console.log},a.default.createElement(l.Form.Item,{label:"Email"},a.default.createElement(l.Input,{name:"email"})),a.default.createElement(l.Form.Item,{name:"password"},a.default.createElement(l.Input,{placeholder:"Password",type:"password"})),a.default.createElement(l.Form.Item,{name:"remember",style:{verticalAlign:"middle"}},a.default.createElement(l.Checkbox,null,"Remember")),a.default.createElement(l.Button,{htmlType:"submit",type:"primary"},"Submit"))}},71834:function(e,r,n){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var r,n=1,t=arguments.length;n<t;n++)for(var a in r=arguments[n])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var l=t(n(24698)),o=n(12101),m=function(e){var r=e.value,n=void 0===r?{}:r,t=e.onChange;return l.default.createElement("span",null,l.default.createElement(o.Input,{type:"number",value:n.number,onChange:function(e){t&&t(a(a({},n),{number:e}))},style:{width:100}}),l.default.createElement(o.Select,{value:n.currency,style:{width:80,margin:"0 8px"},onChange:function(e){t&&t(a(a({},n),{currency:e}))},renderItem:"label",data:[{label:"RMB",value:"rmb"},{label:"Dollar",value:"dollar"}],format:"value"}))};r.default=function(){return l.default.createElement(o.Form,{defaultValue:{price:{number:0,currency:"rmb"}},onSubmit:console.log},l.default.createElement(o.Form.Item,{name:"price",label:"Price"},l.default.createElement(m,null)),l.default.createElement(o.Form.Item,{label:l.default.createElement(l.default.Fragment,null)},l.default.createElement(o.Button,{htmlType:"submit",type:"primary"},"Submit")))}},2059:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{disabled:!0},a.default.createElement(l.Form.Item,{label:"Email",name:"email"},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{label:"Password",name:"password"},a.default.createElement(l.Input,{type:"password"})),a.default.createElement(l.Form.Item,{label:"Age"},a.default.createElement(l.Input,{style:{width:100},name:"age",type:"number",digits:0,defaultValue:0})),a.default.createElement(l.Form.Item,{label:"Favorite Color",name:"favoriteColor"},a.default.createElement(l.Checkbox.Group,{keygen:!0,data:["red","orange","yellow","green","cyan","blue","violet"]})),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement(l.Button,{loading:!0},"Submit")))}},41483:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{onSubmit:console.log},a.default.createElement(l.Form.Item,{name:"name",label:"name"},a.default.createElement(l.Input,{clearable:!0})),a.default.createElement(l.Form.Item,{noStyle:!0,flow:["name"]},function(e){return e.form.get("name")?a.default.createElement(l.Form.Item,{name:"mobile",label:"Mobile",key:"mobile"},a.default.createElement(l.Input,{type:"number"})):a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement("span",null,"Enter your mobile after your name"))}),a.default.createElement(l.Form.Item,{noStyle:!0,flow:["name"]},function(e){return e.form.get("name")?a.default.createElement(l.Form.Item,{name:"information",label:"Information(preserve)",preserve:!0},a.default.createElement(l.Input,null)):a.default.createElement(a.default.Fragment,null,a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement("span",null,"Enter your information after your name")))}),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement(l.Button,{htmlType:"submit",type:"primary"},"Submit")))}},90896:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,{labelWidth:"80px",onChange:console.log},a.default.createElement(l.Form.Item,{label:"Username"},a.default.createElement("div",{style:{display:"flex",alignItems:"center"}},a.default.createElement(l.Form.Item,{name:"username",noStyle:!0,rules:[{required:!0,message:"Username is required"}]},a.default.createElement(l.Input,{style:{width:160},placeholder:"Please input"})),a.default.createElement("a",{href:"",style:{marginLeft:"10px"}},"Need Help?"))),a.default.createElement(l.Form.Item,{label:"Address"},a.default.createElement(l.Input.Group,null,a.default.createElement(l.Form.Item,{name:"address.province",noStyle:!0,rules:[{required:!0,message:"Province is required"}]},a.default.createElement(l.Select,{placeholder:"Select province",data:["Zhejiang","Jiangsu"],keygen:!0,clearable:!0})),a.default.createElement(l.Form.Item,{name:"address.street",noStyle:!0,rules:[{required:!0,message:"Street is required"}]},a.default.createElement(l.Input,{placeholder:"Input street"})))),a.default.createElement(l.Form.Item,{label:"BirthDate"},a.default.createElement(l.Form.Item,{name:"year",rules:[{required:!0,message:"Year is required"}],style:{display:"inline-block",width:"calc(50% - 8px)",marginBottom:0}},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{name:"month",rules:[{required:!0,message:"Month is required"}],style:{display:"inline-block",width:"calc(50% - 8px)",margin:"0 8px"}},a.default.createElement(l.Input,{placeholder:"Input birth month"}))),a.default.createElement(l.Form.Item,{name:"avatar",rules:[{required:!0,message:"Avatar is required"}],label:"Avatar"},function(e){var r=e.value,n=e.onChange,e=e.error;return a.default.createElement(a.default.Fragment,null,a.default.createElement(l.Upload,{value:r,onChange:n,style:{width:300},beforeUpload:function(){return Promise.resolve({status:"MANUAL"})}},a.default.createElement(l.Button,{type:e?"danger":"default"},a.default.createElement(l.FontAwesome,{name:"cloud-upload ",style:{marginRight:4}}),"Upload avatar")))}))}},69767:function(e,r,n){"use strict";var a=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var l=t(n(24698)),o=n(12101);r.default=function(){var n=(e=a(l.default.useState(0),2))[0],t=e[1],e=(0,o.Rule)();return l.default.createElement(o.Form,{animation:!0,defaultValue:{name:"Ethan",friends:[{age:n,name:n}]}},l.default.createElement(o.Form.Item,{label:"Name",name:"name"},l.default.createElement(o.Input,{defaultValue:"Harry Potter"})),l.default.createElement(o.Form.Item,{label:"Friends",noErrorInRoot:!0},l.default.createElement(o.Form.FieldSet,{name:"friends",rules:[e.min(1)],emptyRender:function(r){return l.default.createElement(o.Button,{key:"empty",onClick:function(){var e=n+1;t(e),r({age:e,name:e})}},"Add new friend")}},function(e){var r=e.onAppend,e=e.onRemove;return l.default.createElement("div",{style:{display:"flex",marginBottom:4}},l.default.createElement(o.Form.Item,{name:"name"},l.default.createElement(o.Input,{style:{width:180,marginInlineEnd:8},placeholder:"Name"})),l.default.createElement(o.Form.Item,{name:"age"},l.default.createElement(o.Input,{style:{width:60},type:"number",title:"Friend age",placeholder:"Age"})),l.default.createElement("div",{style:{lineHeight:"32px"}},l.default.createElement("a",{style:{margin:"0 12px"},onClick:function(){var e=n+1;t(e),r({age:e,name:e})}},l.default.createElement(o.FontAwesome,{name:"plus"})),l.default.createElement("a",{onClick:e},l.default.createElement(o.FontAwesome,{name:"close"}))))})))}},34874:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=n(12101),l=t(n(24698)),o=(0,a.Rule)({mandatory:function(e,r,n,t){var a=t.name,l=r.mobile,t=r.telephone;if(!l&&!t)return Promise.reject(new Error("手机、固话必须填写一项"));r=new RegExp(/^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/);return"mobile"!==a||r.test(l)||t?Promise.resolve(!0):Promise.reject(new Error("请输入真实11位手机号码"))}}).mandatory;r.default=function(){return l.default.createElement(a.Form,{labelWidth:60,labelAlign:"right"},l.default.createElement(a.Form.Item,{label:"姓名",name:"name",required:!0,rules:[{required:!0,message:"收货人姓名不能为空"}]},l.default.createElement(a.Input,{autoComplete:"new-password",width:165})),l.default.createElement(a.Form.Item,{label:"手机",name:"mobile",rules:[o],flow:["telephone"]},l.default.createElement(a.Input,{autoComplete:"new-password",width:165})),l.default.createElement(a.Form.Item,{label:"固话",name:"telephone",rules:[o],flow:["mobile"],className:"ml5"},l.default.createElement(a.Input,{autoComplete:"new-password",width:165})),l.default.createElement(a.Form.Item,{label:l.default.createElement(l.default.Fragment,null)},l.default.createElement(a.Button,{htmlType:"submit",type:"primary"},"Submit"),l.default.createElement(a.Button,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"}},"Reset")))}},44332:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});for(var a=t(n(24698)),l=n(12101),o=(0,l.Rule)({uploadSize:function(e){return e&&null!=e&&e[0]?61440<=e[0].blob.size?Promise.reject(new Error("The file is too large")):Promise.resolve(!0):Promise.reject(new Error("You have to upload file"))}}),m=[],u=1;u<20;u++)m.push({id:u,content:"content ".concat(u)});r.default=function(){return a.default.createElement(l.Form,{onChange:console.log,onSubmit:console.log,onError:console.log},a.default.createElement(l.Form.Item,{name:"select",label:"Select",required:!0,rules:[{required:!0,message:"Please select your country!"}]},a.default.createElement(l.Select,{placeholder:"Please select a country",data:["China","U.S.A"],keygen:!0,clearable:!0})),a.default.createElement(l.Form.Item,{name:"select-multiple",label:"Select[multiple]",rules:[o.required],required:!0},a.default.createElement(l.Select,{multiple:!0,placeholder:"Please select favorite colors",data:["red","green","blur"],keygen:!0,clearable:!0})),a.default.createElement(l.Form.Item,{label:"InputNumber"},a.default.createElement("div",{style:{display:"flex",alignItems:"center"}},a.default.createElement(l.Form.Item,{name:"input-number",noStyle:!0,rules:[{max:80,min:10,type:"number",message:"It has to be between 10 and 80"}]},a.default.createElement(l.Input.Number,{style:{width:200}})),a.default.createElement("span",{style:{marginLeft:"10px"}}," machines"))),a.default.createElement(l.Form.Item,{name:"slider",label:"Slider",required:!0,rules:[o.required("Can not be empty"),{min:10,max:80,type:"number",message:"It has to be between 10 and 80"}]},a.default.createElement(l.Slider,null)),a.default.createElement(l.Form.Item,{name:"radio-group",label:"Radio.Group",rules:[o.required],required:!0},a.default.createElement(l.Radio.Group,null,a.default.createElement(l.Radio,{value:"a"},"item 1"),a.default.createElement(l.Radio,{value:"b"},"item 2"),a.default.createElement(l.Radio,{value:"c"},"item 3"))),a.default.createElement(l.Form.Item,{name:"radio-button",label:"Radio.Button",rules:[o.required],required:!0},a.default.createElement(l.Radio.Group,{button:!0},a.default.createElement(l.Radio,{value:"a"},"item 1"),a.default.createElement(l.Radio,{value:"b"},"item 2"),a.default.createElement(l.Radio,{value:"c"},"item 3"))),a.default.createElement(l.Form.Item,{name:"checkbox-group",label:"Checkbox.Group",rules:[o.required],required:!0},a.default.createElement(l.Checkbox.Group,null,a.default.createElement(l.Checkbox,{value:"A",style:{lineHeight:"32px"}},"A"),a.default.createElement(l.Checkbox,{value:"B",style:{lineHeight:"32px"},disabled:!0},"B"),a.default.createElement(l.Checkbox,{value:"C",style:{lineHeight:"32px"}},"C"),a.default.createElement(l.Checkbox,{value:"D",style:{lineHeight:"32px"}},"D"),a.default.createElement(l.Checkbox,{value:"E",style:{lineHeight:"32px"}},"E"),a.default.createElement(l.Checkbox,{value:"F",style:{lineHeight:"32px"}},"F"))),a.default.createElement(l.Form.Item,{name:"rate",label:"Rate",rules:[o.required],required:!0},a.default.createElement(l.Rate,{size:40,background:a.default.createElement(l.FontAwesome,{name:"star"}),front:a.default.createElement(l.FontAwesome,{name:"star"})})),a.default.createElement(l.Form.Item,{name:"transfer",label:"Transfer",rules:[o.required]},a.default.createElement(l.Transfer,{data:m,format:"id",renderItem:"content",keygen:"id",titles:["Source","Target"]})),a.default.createElement(l.Form.Item,{name:"upload",label:"Upload",tip:"longgggggggggggggggggggggggggggggggggg",rules:[o.uploadSize]},a.default.createElement(l.Upload.Image,{name:"logo",beforeUpload:function(){return Promise.resolve({status:"MANUAL"})},width:250,limit:1},a.default.createElement("div",{style:{textAlign:"center",width:"100%",padding:20}},a.default.createElement(l.FontAwesome,{style:{color:"#409dfd",fontSize:20},name:"image"}),a.default.createElement("br",null),"Click to upload"))),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement(l.Button,{type:"primary",htmlType:"submit"},"Submit")))}},11878:function(e,r,n){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,r,n,t){void 0===t&&(t=n),Object.defineProperty(e,t,{enumerable:!0,get:function(){return r[n]}})}:function(e,r,n,t){void 0===t&&(t=n),e[t]=r[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(r,e,n);return a(r,e),r},o=this&&this.__awaiter||function(e,o,m,u){return new(m=m||Promise)(function(n,r){function t(e){try{l(u.next(e))}catch(e){r(e)}}function a(e){try{l(u.throw(e))}catch(e){r(e)}}function l(e){var r;e.done?n(e.value):((r=e.value)instanceof m?r:new m(function(e){e(r)})).then(t,a)}l((u=u.apply(e,o||[])).next())})},m=this&&this.__generator||function(n,t){var a,l,o,m={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},e={next:r(0),throw:r(1),return:r(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function r(r){return function(e){return function(r){if(a)throw new TypeError("Generator is already executing.");for(;m;)try{if(a=1,l&&(o=2&r[0]?l.return:r[0]?l.throw||((o=l.return)&&o.call(l),0):l.next)&&!(o=o.call(l,r[1])).done)return o;switch(l=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return m.label++,{value:r[1],done:!1};case 5:m.label++,l=r[1],r=[0];continue;case 7:r=m.ops.pop(),m.trys.pop();continue;default:if(!(o=0<(o=m.trys).length&&o[o.length-1])&&(6===r[0]||2===r[0])){m=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){m.label=r[1];break}if(6===r[0]&&m.label<o[1]){m.label=o[1],o=r;break}if(o&&m.label<o[2]){m.label=o[2],m.ops.push(r);break}o[2]&&m.ops.pop(),m.trys.pop();continue}r=t.call(n,m)}catch(e){r=[6,e],l=0}finally{a=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,e])}}},u=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o};Object.defineProperty(r,"__esModule",{value:!0});var i=l(n(24698)),s=n(12101);r.default=function(){var e=this,r=(a=u((0,i.useState)(void 0),2))[0],n=a[1],t=u((0,i.useState)(!1),2),a=t[0],l=t[1];return i.default.createElement(s.Form,{errors:r,disabled:a,onSubmit:function(){return o(e,void 0,void 0,function(){var r;return m(this,function(e){switch(e.label){case 0:return l(!0),[4,new Promise(function(e){setTimeout(function(){e({nickName:"Nicknames already exist"})},2e3)})];case 1:return r=e.sent(),n(r),l(!1),[2]}})})}},i.default.createElement(s.Form.Item,{label:"NickName",name:"nickName",rules:[(0,s.Rule)().required]},i.default.createElement(s.Input,{clearable:!0,popoverProps:{placement:"left-top"}})),i.default.createElement(s.Form.Item,{label:i.default.createElement(i.default.Fragment,null)},i.default.createElement(s.Button,{htmlType:"submit",type:"primary",loading:a},"Submit"),i.default.createElement(s.Button,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"},disabled:a},"Reset")))}},40363:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){var e=l.Form.useForm();return a.default.createElement(l.Form,{form:e,onSubmit:function(e){console.log("onSubmit:",e)}},a.default.createElement("div",{style:{margin:"20px 0"}},a.default.createElement(l.Button,{onClick:function(){return console.log(e.getValue())}},"get value"),a.default.createElement(l.Button,{onClick:function(){return e.validateForm()}},"validateForm"),a.default.createElement(l.Button,{onClick:function(){return e.submit()}},"submit"),a.default.createElement(l.Button,{onClick:function(){return e.reset()}},"reset")),a.default.createElement(l.Form.Item,{label:"name",name:"name",rules:[{required:!0,message:"Name can not be empty"}]},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Password can not be empty"}]},a.default.createElement(l.Input.Password,{type:"password"})),a.default.createElement(l.Form.Item,{label:a.default.createElement(a.default.Fragment,null)},a.default.createElement(l.Button,{type:"primary",htmlType:"submit"},"Submit"),a.default.createElement(l.Button,{htmlType:"reset"},"Reset")))}},98573:function(e,r,n){"use strict";var t,a=this&&this.__extends||(t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])})(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}),l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var o,m=l(n(24698)),u=n(12101),a=(o=m.default.PureComponent,a(i,o),i.prototype.render=function(){var e=this;return m.default.createElement(u.Form,{ref:this.formRef,onSubmit:function(e){console.log("onSubmit:",e)}},m.default.createElement("div",{style:{margin:"20px 0"}},m.default.createElement(u.Button,{onClick:function(){return console.log(e.formRef.current.getValue())}},"get value"),m.default.createElement(u.Button,{onClick:function(){return e.formRef.current.validateForm()}},"validateForm"),m.default.createElement(u.Button,{onClick:function(){return e.formRef.current.submit()}},"submit"),m.default.createElement(u.Button,{onClick:function(){return e.formRef.current.reset()}},"reset")),m.default.createElement(u.Form.Item,{label:"name",name:"name",rules:[{required:!0,message:"Name can not be empty"}]},m.default.createElement(u.Input,null)),m.default.createElement(u.Form.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Password can not be empty"}]},m.default.createElement(u.Input.Password,{type:"password"})),m.default.createElement(u.Form.Item,{label:m.default.createElement(m.default.Fragment,null)},m.default.createElement(u.Button,{type:"primary",htmlType:"submit"},"Submit"),m.default.createElement(u.Button,{htmlType:"reset"},"Reset")))},i);function i(){var e=null!==o&&o.apply(this,arguments)||this;return e.formRef=m.default.createRef(),e}r.default=a},49235:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){var e=l.Form.useForm();return l.Form.useFormValueEffect(function(e){console.log("UseFormValueEffect callback:",e)},{form:e,deep:["name","contact.phone","address","friends"]}),a.default.createElement(l.Form,{form:e},a.default.createElement(l.Form.Item,{name:"name",label:"Name"},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{label:"Contact"},a.default.createElement("div",{style:{display:"flex"}},a.default.createElement(l.Form.Item,{noStyle:!0,name:"contact.phone"},a.default.createElement(l.Input,{clearable:!0,placeholder:"phone"})),a.default.createElement(l.Form.Item,{noStyle:!0,name:"contact.telephone"},a.default.createElement(l.Input,{clearable:!0,placeholder:"telephone"})))),a.default.createElement(l.Form.Item,{label:"Address"},a.default.createElement(l.Form.FieldSet,{name:"address"},a.default.createElement("div",{style:{display:"flex"}},a.default.createElement(l.Form.Item,{noStyle:!0,name:"province"},a.default.createElement(l.Select,{keygen:!0,style:{width:100},clearable:!0,data:["BeiJing","ShangHai"]})),a.default.createElement(l.Form.Item,{noStyle:!0,name:"street"},a.default.createElement(l.Input,{clearable:!0}))))),a.default.createElement(l.Form.Item,{label:"Friends"},a.default.createElement(l.Form.FieldSet,{name:"friends",emptyRender:function(e){return a.default.createElement(l.Button,{key:"empty",onClick:function(){e({age:18,name:"Tom"})}},"Add new friend")}},function(e){var r=e.onAppend,e=e.onRemove;return a.default.createElement("div",{style:{display:"flex",marginBottom:4}},a.default.createElement(l.Form.Item,{name:"name"},a.default.createElement(l.Input,{style:{width:180,marginInlineEnd:8},placeholder:"Name"})),a.default.createElement(l.Form.Item,{name:"age"},a.default.createElement(l.Input,{style:{width:60},type:"number",title:"Friend age",placeholder:"Age"})),a.default.createElement("div",{style:{lineHeight:"32px"}},a.default.createElement("a",{style:{margin:"0 12px"},onClick:function(){r({age:void 0,name:void 0})}},a.default.createElement(l.FontAwesome,{name:"plus"})),a.default.createElement("a",{onClick:e},a.default.createElement(l.FontAwesome,{name:"close"}))))})))}},56433:function(e,r,n){"use strict";var t=this&&this.__read||function(e,r){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,l=n.call(e),o=[];try{for(;(void 0===r||0<r--)&&!(t=l.next()).done;)o.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=l.return)&&n.call(l)}finally{if(a)throw a.error}}return o},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var l=a(n(24698)),o=n(12101);r.default=function(){var e=o.Form.useForm(),r=(n=t(o.Form.useFormValueState(e,"name"),2))[0],n=n[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(o.Form,{form:e,labelAlign:"top"},l.default.createElement(o.Form.Item,{name:"name",label:"The name controlled by the form"},l.default.createElement(o.Input,null))),l.default.createElement("pre",{style:{padding:"5px",fontSize:"14px"}},"New name: ",r),l.default.createElement(o.Input,{placeholder:"The name controlled by the hooks",onChange:n}))}},63845:function(e,r,n){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var a=t(n(24698)),l=n(12101);r.default=function(){return a.default.createElement(l.Form,null,a.default.createElement(l.Form.Item,{name:"money",label:"money",beforeChange:function(e,r,n){var t;return void 0===r&&(r=""),"string"==typeof e&&(t=n.getValue().unit,n="".concat(t),e=!(e=e.replace(new RegExp(n,"g"),""))||e===t||r.includes("元")&&"磅"===t||r.includes("磅")&&"元"===t?"":"".concat(e).concat(t)),e}},a.default.createElement(l.Input,null)),a.default.createElement(l.Form.Item,{name:"unit",label:"unit",defaultValue:"元"},a.default.createElement(l.Select,{data:["元","磅"]})))}}}]);