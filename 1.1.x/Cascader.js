(self.webpackChunkEthanDoc=self.webpackChunkEthanDoc||[]).push([[475],{38542:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return s}});var t=r(67154),a=r.n(t),n=r(24698),o=r.n(n),t=r(54365),n=r.n(t),t=r(82281),i=r.n(t),t=r(70954),d=(0,t.default)("# Cascader *级联选择*\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| className | string | 无 | 扩展className |\r\n| clearable | boolean | true | 是否显示清除数据图标 |\r\n| data | any[] | [] | 数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点 |\r\n| defaultValue | any[] | 无 | 默认选中的 key （非受控） |\r\n| disabled | (data: any) => boolean \\| boolean | false | 显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用 |\r\n| expandTrigger | 'click' \\| 'hover' \\| 'hover-only' | 'click' | 节点展开触发方式 |\r\n| keygen | ((data: any, parentKey: any) => string) \\| string  | 必填 | 生成key的辅助方法<br />为函数时，使用此函数返回值<br />为string时，使用这个string对应的数据值。如 'id'，相当于 (d) => d.id |\r\n| loader | (key: any, data: any) => void | 无 | 设置loader属性后，未定义children的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点 |\r\n| mode | 0 \\| 1 \\| 2 \\| 3 | 无 | 选中值模式，未设置值为单选<br />0: 只返回完全选中的节点，包含父节点<br />1: 返回全部选中的节点和半选中的父节点<br />2: 只返回选中的子节点<br />3: 如果父节点选中，只返回父节点 |\r\n| onChange | (value: any[], selected: boolean) => void | 无 | 设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关 |\r\n| renderItem | (data: any) => ReactNode \\| string | 必填 | 为 string 时，返回 d\\[string]<br />为 function 时，返回函数结果 |\r\n| renderResult | (data: any, result: any[]) => ReactNode \\| string | renderItem | 选中后在结果中显示的内容，默认和 renderItem 相同。返回 null 则不展示，result 为当前选中的所有值。 |\r\n| value | any[] | 无 | 选中的 key （受控） |\r\n| absolute | boolean \\| (() => element) | false | 为 true 时，选项弹出层在 BODY 下独立 render， 为函数时 选项弹出层在函数返回的 DOM 下render  |\r\n| compressed | boolean \\| 'no-repeat' | false | 将选中值合并。为'no-repeat'时弹出框中不重复展示值 |\r\n| childrenKey | string | 'children' | 指定子数据的属性名 |\r\n| finalDismiss | boolean | false | 选择末级节点后是否关闭选项列表 |\r\n| onCollapse | (collapse: boolean) => void | 无 | 下拉列表展开/收起回调 |\r\n| onFilter | (text: string) => (data: any) => boolean | 无 | onFilter 不为空时，可以输入过滤数据<br />onFilter 如果返回一个函数，使用这个函数做前端过滤<br />如果不返回，可以自行做后端过滤<br />单选状态下支持 |\r\n| height | number | 300 | 下拉列表高度 |\r\n| size | string | 无 | 尺寸 |\r\n| showArrow | boolean | true | 是否显示下拉箭头，仅针对单选情况 |\r\n| loading | boolean \\| ReactNode | 无 | 下拉列表 loading 状态 |\r\n\r\n","# Cascader\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| className | string | - | Extend className |\r\n| clearable | boolean | false | If clearable is true, show clear value icon |\r\n| data | any[] | [] | data. The child node is children. If the children value is null or its length is 0, it is render as a leaf node. |\r\n| disabled | (data: any) => boolean \\| boolean | false | When it is true, all nodes disable the selection; when it is a function, it determines whether it is disabled according to the return result of the function. |\r\n| expandTrigger | 'click' \\| 'hover' \\| 'hover-only'  | 'click' | Expand mode |\r\n| keygen | ((data: any, parentKey: any) => string) \\| string | required | Auxiliary method for generating key. <br />When it is a function, use the return value of this function. <br /> When it is a string, use the data value corresponding to this string. For example, 'id' is the same thing as (d) => d.id. |\r\n| loader | (key: any, data: any) => void | - | If the loader attribute is a function, the node with no children is regarded as dynamically loaded node. Click expanded button to trigger the loader event. The children property is null or its length is 0 will be regarded as a leaf node. |\r\n| mode | 0 \\| 1 \\| 2 \\| 3 | none | mode <br />0: Returns only the fully selected node including the parent node. <br />1: Returns all selected nodes and semi-selected nodes. <br />2: Return only the selected child nodes. <br />3: If the parent node is full selected, only return the parent node. |\r\n| onChange | (value: any[], selected: boolean) => void | - | When the onChange property is set, the selection box is displayed. The parameter is the current selected value, which is related to the mode property. |\r\n| renderItem | (data: any) => ReactNode \\| string | required | When it is a string, return d\\[string].<br /> When it is a function, return the result of this function. |\r\n| renderResult | (data: any, result: any[]) => ReactNode \\| string | renderItem | The content displayed in the result after selecting, if not set, use renderItem. not show while return null, result is current selected |\r\n| defaultValue | any[] | - | Default selected key (not controlled) |\r\n| value | any[] | - | Selected key (controlled) |\r\n| absolute \\| (() => element) | boolean | false | When it is true, the pop-up layer of option append into document.body. When it is function, the pop-up layer of option append into it's return DOM.  |\r\n| compressed | boolean \\| 'no-repeat' | false | Merges selected values; the repeat value will not appear in the Popover when it is'no-repeat'. |\r\n| childrenKey | string | 'children' | the key of the children data name |\r\n| finalDismiss | boolean | false | close options after chose the final node |\r\n| onCollapse | (collapse: boolean) => void | none | options collapse callback |\r\n| onFilter | (text: string) => (data: any) => boolean | - | When the onFilter is not empty, you can filter data by input.<br />If the onFilter returns a function, use this function as a front-end filter.<br />If return undefined, you can do your own backend filtering.<br /> support in single selection state |\r\n| height | number | 300 | height of dropdown options |\r\n| size | string | none | size |\r\n| showArrow | boolean | true | show dropdown arrow, only single select |\r\n| loading | boolean \\| ReactNode | none | Dropdown list loading state |\r\n"),l=[{name:"01-basex",title:(0,t.default)("基本用法 \n 基础的级联用法","Base \n Basic usage of Cascader"),component:r(44087).default,rawText:r(85818).Z},{name:"02-multiplex",title:(0,t.default)("多选 \n 设置 mode 属性，使组件变为多选，mode 可选值如下 \n 0: 只返回完全选中的节点，包含父节点 \n 1: 返回全部选中的节点和半选中的父节点 \n 2: 只返回选中的子节点 \n 3: 如果父节点选中，只返回父节点","Multiple \n Set the mode property change the component to multiple select \n 0: Return only the fully selected node, including the parent node. \n 1: Return the fully selected nodes and semi-selected parent nodes. \n 2: Return only the selected child node. \n 3: Return only the parent node, if the parent node is selected."),component:r(91495).default,rawText:r(16352).Z},{name:"03-hoverx",title:(0,t.default)("移入展开 \n 设置 expandTrigger 为 'hover' 或 'hover-only', 可以在鼠标移入节点时展开，默认为 'click' \n 如果值为 'hover-only'，父节点只能 hover 触发展开, 只有子节点可以点击选择值","Hover \n Set expandTrigger to 'hover' or 'hover-only', expand the node when mouse hover, default value is 'click'."),component:r(83663).default,rawText:r(12254).Z},{name:"04-disabledx",title:(0,t.default)("禁用 \n disabled 为函数时，根据返回结果禁用节点，同时禁用子节点 \n disabled 为 true 时，禁用全部节点","disabled \n When the disabled property is a function, disable the node and its child nodes according to the returned result. \n When the disabled property is true, disable all nodes."),component:r(88666).default,rawText:r(24499).Z},{name:"05-lazyloadx",title:(0,t.default)("动态加载 \n 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数","Lazy load \n Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded."),component:r(56372).default,rawText:r(87284).Z}],s=n()(function(e){return o().createElement(i(),a()({},e,{source:d,examples:l}))})},85818:function(e,n){"use strict";n.Z="/**\r\n * cn - 基本用法\r\n *    -- 基础的级联用法\r\n * en - Base\r\n *   -- Basic usage of Cascader\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        value: 'jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'jiangning',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'anhui',\r\n        children: [\r\n            {\r\n                value: 'hefei',\r\n                children: [\r\n                    {\r\n                        value: 'feidong',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function() {\r\n    return <Cascader data={data} absolute keygen=\"value\" renderItem={n => `${n.value}`} />\r\n}\r\n"},16352:function(e,n){"use strict";n.Z="/**\r\n * cn - 多选\r\n *    -- 设置 mode 属性，使组件变为多选，mode 可选值如下\r\n *    -- 0: 只返回完全选中的节点，包含父节点\r\n *    -- 1: 返回全部选中的节点和半选中的父节点\r\n *    -- 2: 只返回选中的子节点\r\n *    -- 3: 如果父节点选中，只返回父节点\r\n * en - Multiple\r\n *   -- Set the mode property change the component to multiple select\r\n *    -- 0: Return only the fully selected node, including the parent node.\r\n *    -- 1: Return the fully selected nodes and semi-selected parent nodes.\r\n *    -- 2: Return only the selected child node.\r\n *    -- 3: Return only the parent node, if the parent node is selected.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader, Radio } from 'ethan-ui'\r\nimport { cascader as data } from 'doc/data/tree'\r\n\r\nconst modeList = [\r\n    { value: 0, text: 'mode=0 (full)' },\r\n    { value: 1, text: 'mode=1 (half)' },\r\n    { value: 2, text: 'mode=2 (child only)' },\r\n    { value: 3, text: 'mode=3 (shallow)' },\r\n]\r\n\r\nfunction getValue(list, value) {\r\n    const [node] = list\r\n    if (!node) return\r\n    value.push(node.id)\r\n    if (node.children) getValue(node.children, value)\r\n}\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const value = []\r\n        getValue(data, value)\r\n\r\n        this.state = { mode: 1, value }\r\n    }\r\n\r\n    handleChange = value => {\r\n        this.setState({ value })\r\n    }\r\n\r\n    handleModeChange = mode => {\r\n        this.setState({ mode, value: [] })\r\n    }\r\n\r\n    renderItem = node => `node ${node.id}`\r\n\r\n    render() {\r\n        const { mode, value } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Radio.Group\r\n                    keygen=\"value\"\r\n                    value={mode}\r\n                    format=\"value\"\r\n                    onChange={this.handleModeChange}\r\n                    data={modeList}\r\n                    renderItem=\"text\"\r\n                />\r\n\r\n                <br />\r\n\r\n                <Cascader\r\n                    data={data}\r\n                    keygen=\"id\"\r\n                    mode={mode}\r\n                    onChange={this.handleChange}\r\n                    renderItem={this.renderItem}\r\n                    value={value}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"},12254:function(e,n){"use strict";n.Z="/**\r\n * cn - 移入展开\r\n *    -- 设置 expandTrigger 为 'hover' 或 'hover-only', 可以在鼠标移入节点时展开，默认为 'click'\r\n *    -- 如果值为 'hover-only'，父节点只能 hover 触发展开, 只有子节点可以点击选择值\r\n * en - Hover\r\n *    -- Set expandTrigger to 'hover' or 'hover-only', expand the node when mouse hover, default value is 'click'.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\nimport { cascader as data } from 'doc/data/tree'\r\n\r\nexport default function() {\r\n    return (\r\n        <Cascader\r\n            data={data}\r\n            keygen=\"id\"\r\n            expandTrigger=\"hover-only\"\r\n            renderItem={n => `node ${n.text}`}\r\n            renderResult={n => (n.children && n.children.length > 0 ? '' : n.text)}\r\n            style={{ width: 300 }}\r\n        />\r\n    )\r\n}\r\n"},24499:function(e,n){"use strict";n.Z="/**\r\n * cn - 禁用\r\n *    -- disabled 为函数时，根据返回结果禁用节点，同时禁用子节点\r\n *    -- disabled 为 true 时，禁用全部节点\r\n * en - disabled\r\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\r\n *    -- When the disabled property is true, disable all nodes.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\nimport { cascader as data } from 'doc/data/tree'\r\n\r\nconst isDisabled = d => d.id === '1-0' || d.id === '2'\r\n\r\nexport default function() {\r\n    return <Cascader data={data} keygen=\"id\" disabled={isDisabled} mode={2} renderItem={n => `node ${n.text}`} />\r\n}\r\n"},87284:function(e,n){"use strict";n.Z="/**\r\n * cn - 动态加载\r\n *    -- 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数\r\n * en - Lazy load\r\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\r\n */\r\nimport React, { Component } from 'react'\r\nimport immer from 'immer'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst initData = ['0', '1', '2', '3', '4', '5', '6', '7', '8'].map(i => ({ id: i }))\r\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i)\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { data: initData, value: [] }\r\n    }\r\n\r\n    loader = key => {\r\n        const path = key.split(',')\r\n\r\n        setTimeout(() => {\r\n            this.setState(\r\n                immer(draft => {\r\n                    let { data } = draft\r\n                    path.forEach((pid, i) => {\r\n                        data = data.find(d => d.id === pid)\r\n                        if (i < path.length - 1) data = data.children\r\n                    })\r\n                    data.children = [...createRange().map(i => ({ id: `${data.id}-${i}` }))]\r\n                })\r\n            )\r\n        }, 500)\r\n    }\r\n\r\n    keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\r\n\r\n    handleChange = value => this.setState({ value })\r\n\r\n    renderItem = node => `node ${node.id}`\r\n\r\n    render() {\r\n        return (\r\n            <Cascader\r\n                data={this.state.data}\r\n                keygen={this.keyGenerator}\r\n                loader={this.loader}\r\n                renderItem={this.renderItem}\r\n                onChange={this.handleChange}\r\n                value={this.state.value}\r\n            />\r\n        )\r\n    }\r\n}\r\n"},74175:function(e,n,r){"use strict";var s=this&&this.__read||function(e,n){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,a,o=r.call(e),i=[];try{for(;(void 0===n||0<n--)&&!(t=o.next()).done;)i.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},u=this&&this.__spreadArray||function(e,n,r){if(r||2===arguments.length)for(var t,a=0,o=n.length;a<o;a++)!t&&a in n||((t=t||Array.prototype.slice.call(n,0,a))[a]=n[a]);return e.concat(t||Array.prototype.slice.call(n))};Object.defineProperty(n,"__esModule",{value:!0}),n.exampleTree=n.cascader=n.exampleIds=n.allIds=void 0;var c=r(71840),h=r(96222);n.allIds=[],n.exampleIds=[];var f=function(n,e,r,t,a,o){var i=r.join("-"),d=(0,h.pickNumber)(a,0===n?1:0),l={id:i,text:i};return 0<d&&n<t&&(l.children=(0,c.range)(d).map(function(e){return f(n+1,e,u(u([],s(r),!1),[e],!1),t,a,o)})),o&&o.push(i),l},r=(0,c.range)(4).map(function(e){return f(0,e,[e],10,5,n.allIds)});n.cascader=(0,c.range)(20).map(function(e){return f(0,e,[e],4,10)}),n.exampleTree=(0,c.range)(3).map(function(e){return f(0,e,[e],2,3,n.exampleIds)}),n.default=r},44087:function(e,n,r){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var a=t(r(24698)),o=r(12101),i=[{value:"jiangsu",children:[{value:"nanjing",children:[{value:"jiangning"}]}]},{value:"anhui",children:[{value:"hefei",children:[{value:"feidong"}]}]}];n.default=function(){return a.default.createElement(o.Cascader,{data:i,absolute:!0,keygen:"value",renderItem:function(e){return"".concat(e.value)}})}},91495:function(e,n,r){"use strict";var t,a=this&&this.__extends||(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])})(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),o=this&&this.__read||function(e,n){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,a,o=r.call(e),i=[];try{for(;(void 0===n||0<n--)&&!(t=o.next()).done;)i.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var d=i(r(24698)),l=r(12101),s=r(74175),u=[{value:0,text:"mode=0 (full)"},{value:1,text:"mode=1 (half)"},{value:2,text:"mode=2 (child only)"},{value:3,text:"mode=3 (shallow)"}];var c,a=(c=d.default.Component,a(h,c),h.prototype.render=function(){var e=this.state,n=e.mode,e=e.value;return d.default.createElement("div",null,d.default.createElement(l.Radio.Group,{keygen:"value",value:n,format:"value",onChange:this.handleModeChange,data:u,renderItem:"text"}),d.default.createElement("br",null),d.default.createElement(l.Cascader,{data:s.cascader,keygen:"id",mode:n,onChange:this.handleChange,renderItem:this.renderItem,value:e}))},h);function h(e){var n=c.call(this,e)||this;n.handleChange=function(e){n.setState({value:e})},n.handleModeChange=function(e){n.setState({mode:e,value:[]})},n.renderItem=function(e){return"node ".concat(e.id)};e=[];return function e(n,r){n=o(n,1)[0];n&&(r.push(n.id),n.children&&e(n.children,r))}(s.cascader,e),n.state={mode:1,value:e},n}n.default=a},83663:function(e,n,r){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var a=t(r(24698)),o=r(12101),i=r(74175);n.default=function(){return a.default.createElement(o.Cascader,{data:i.cascader,keygen:"id",expandTrigger:"hover-only",renderItem:function(e){return"node ".concat(e.text)},renderResult:function(e){return e.children&&0<e.children.length?"":e.text},style:{width:300}})}},88666:function(e,n,r){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var a=t(r(24698)),o=r(12101),i=r(74175),d=function(e){return"1-0"===e.id||"2"===e.id};n.default=function(){return a.default.createElement(o.Cascader,{data:i.cascader,keygen:"id",disabled:d,mode:2,renderItem:function(e){return"node ".concat(e.text)}})}},56372:function(e,n,r){"use strict";var t,a=this&&this.__extends||(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])})(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(e,n,r,t){void 0===t&&(t=r),Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[r]}})}:function(e,n,r,t){void 0===t&&(t=r),e[t]=n[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),d=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(n,e,r);return i(n,e),n},l=this&&this.__read||function(e,n){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,a,o=r.call(e),i=[];try{for(;(void 0===n||0<n--)&&!(t=o.next()).done;)i.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},s=this&&this.__spreadArray||function(e,n,r){if(r||2===arguments.length)for(var t,a=0,o=n.length;a<o;a++)!t&&a in n||((t=t||Array.prototype.slice.call(n,0,a))[a]=n[a]);return e.concat(t||Array.prototype.slice.call(n))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var c,h=d(r(24698)),f=u(r(18172)),p=r(12101),m=["0","1","2","3","4","5","6","7","8"].map(function(e){return{id:e}}),a=(c=h.Component,a(y,c),y.prototype.render=function(){return h.default.createElement(p.Cascader,{data:this.state.data,keygen:this.keyGenerator,loader:this.loader,renderItem:this.renderItem,onChange:this.handleChange,value:this.state.value})},y);function y(e){var n=c.call(this,e)||this;return n.loader=function(e){var t=e.split(",");setTimeout(function(){n.setState((0,f.default)(function(e){var r=e.data;t.forEach(function(n,e){r=r.find(function(e){return e.id===n}),e<t.length-1&&(r=r.children)}),r.children=s([],l(Array.from({length:Math.round(4*Math.random())},function(e,n){return n}).map(function(e){return{id:"".concat(r.id,"-").concat(e)}})),!1)}))},500)},n.keyGenerator=function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")},n.handleChange=function(e){return n.setState({value:e})},n.renderItem=function(e){return"node ".concat(e.id)},n.state={data:m,value:[]},n}n.default=a}}]);