"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[8206],{75722:function(e,n,t){t.d(n,{Z:function(){return T}});var r=t(87462),l=t(29439),a=t(93433),o=t(87363),i=t.n(o),u=t(92242),c=t.n(u),s=t(73727),p=t(22770),m=t(62625),d=t(94184),f=t.n(d),h=t(15660),I=t.n(h),y=(t(62356),function(e){var n=e.language,t=void 0===n?"lang-jsx":n,r=e.value,l=(0,o.useRef)(null);return(0,o.useEffect)((function(){I().highlightElement(l.current,!1)}),[]),i().createElement("pre",{ref:l,className:f()(t,(0,p.vf)("pre"))},i().createElement("code",null,r))}),v=t(84506),g=t(11888),b=t(91391),E=function(e){var n=e.component,t=e.id,r=e.rawText,a=void 0===r?"":r,u=e.title,c=(0,o.useState)(!1),s=(0,l.Z)(c,2),m=s[0],d=s[1],f=(0,o.useRef)((0,o.createElement)(n)).current,h=a.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),I=u.split("\n"),E=(0,v.Z)(I),w=E[0],x=E.slice(1),Z=function(){d(!m)};return i().createElement(i().Fragment,null,w&&i().createElement("h3",{id:t},w),i().createElement(g.Zr,{placeholder:i().createElement("div",{className:(0,p.vf)("placeholder")},i().createElement(g.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},i().createElement("div",{className:(0,p.vf)("_",m&&"showcode")},i().createElement("div",{className:(0,p.vf)("body")},f),u.length>0&&i().createElement("div",{className:(0,p.vf)("desc")},x.map((function(e,n){return i().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),i().createElement("a",{className:(0,p.vf)("toggle"),onClick:Z},i().createElement(b.Z,{name:m?"code-close":"code"}))),i().createElement(g.y_.Transition,{visible:m,transitionTypes:["collapse","fade"]},i().createElement(y,{value:h}),i().createElement("a",{className:(0,p.vf)("toggle"),onClick:Z},i().createElement(b.Z,{name:m?"code-close":"code"}))))))},w=i().memo(E),x=function(e){var n=e.children,t=(0,a.Z)(n[1].props.children);try{t.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return i().createElement("div",{style:{overflow:"auto"}},i().createElement("table",{className:"doc-api-table"},n[0],i().cloneElement(n[1],{children:t})))},Z=t(35087),P=function(e){var n=[],t=(0,o.useContext)(Z.Z).setHeadings,u=e.source,d=e.examples;return i().useEffect((function(){t(n)}),[]),i().createElement(c(),{className:(0,p.EX)("_"),source:u,renderers:{code:y,heading:function(e){var t=e.level,r=e.children,l="h".concat(t),a="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(t,r[0]));return 2!==t&&3!==t||n.push({id:a,level:t,children:r}),i().createElement(l,{id:a},r)},table:x,html:function(e){return"<example />"===e.value?i().createElement(i().Fragment,null,function(){if(!d)return i().createElement("div",null);var e=(0,m.ZP)("示例","Example"),t="heading-example-h";return n.push({id:t,level:2,children:[e]}),[i().createElement("h2",{key:"h",id:t},e)].concat((0,a.Z)(d.map((function(e){var t="heading-".concat(e.name),a=e.title.split("\n"),o=(0,l.Z)(a,1)[0];return n.push({id:t,level:3,children:[o]}),i().createElement(w,(0,r.Z)({key:t,id:t},e))}))))}()):"<br>"===e.value||"<br />"===e.value?i().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?i().createElement("a",{href:e.href,target:n},e.children):i().createElement(s.rU,{to:e.href},e.children)}}})},T=i().memo(P)},35087:function(e,n,t){var r=(0,t(87363).createContext)(void 0);n.Z=r},88981:function(e,n,t){var r=t(29439),l=t(87363),a=t.n(l),o=t(91291),i=t(22770),u=t(11888),c=t(75964),s=t(12025),p=t(35087),m=function(e){var n=e.children,t=(0,l.useState)(""),m=(0,r.Z)(t,2),d=m[0],f=m[1],h=(0,l.useState)([]),I=(0,r.Z)(h,2),y=I[0],v=I[1],g=(0,o.Z)().hash,b=(0,c.Z)((function(e){s.Z.push("".concat(s.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),E=(0,c.Z)((function(){var e=document.documentElement.scrollTop,n=y.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var t=n[0].id;n.forEach((function(n){var r=document.querySelector("#".concat(n.id));(null==r?void 0:r.offsetTop)<=e&&(t=n.id)})),f(t)}}));(0,l.useEffect)((function(){if(E(),g){var e=document.querySelector(g);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",E),function(){document.removeEventListener("scroll",E)}}),[y]);var w=a().useMemo((function(){return{setHeadings:v}}),[]);return a().createElement("div",{className:(0,i.EH)("_")},a().createElement(p.Z.Provider,{value:w},n),a().createElement(u.Le,{className:(0,i.EH)("sticky"),top:50},a().createElement("div",{className:(0,i.EH)("nav")},y.map((function(e,n){var t=e.children.filter((function(e){return"string"==typeof e}));return a().createElement("a",{key:n,className:(0,i.EH)("level-".concat(e.level),d===e.id&&"active"),onClick:b.bind(null,e.id)},t)})))))};n.Z=a().memo(m)},19329:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var r=t(87363),l=t.n(r),a=t(88981),o=t(75722),i=t(62625),u=t(36519),c=(0,i.ZP)("# Input _输入框_\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性         | 类型                                  | 默认值    | 说明                                                                                                             |\r\n| ------------ | ------------------------------------- | --------- | ---------------------------------------------------------------------------------------------------------------- |\r\n| defaultValue | string \\| number                      | -         | 默认值                                                                                                           |\r\n| name         | string                                | -         | Form 存取数据的名称                                                                                              |\r\n| onChange     | (value: string) => void               | -         | 值改变回调函数                                                                                                   |\r\n| onEnterPress | (value: string) => void               | -         | 回车键回调函数                                                                                                   |\r\n| placeholder  | string                                | -         | 同原生 input 标签的 placeholder                                                                                  |\r\n| size         | 'large' \\| 'default' \\| 'small'       | 'default' | 尺寸                                                                                                             |\r\n| style        | object                                | -         | 最外层扩展样式                                                                                                   |\r\n| tip          | ReactNode \\|(value:string)=>ReactNode | -         | 提示信息                                                                                                         |\r\n| trim         | boolean                               | false     | trim 为 true 时，失去焦点时会自动删除空白字符。                                                                  |\r\n| type         | string                                | 'text'    | 同原生 input 标签的 type                                                                                         |\r\n| value        | string \\| number                      | -         | defaultValue 和 value 可以同时设置，defaultValue 会被 value 覆盖<br />在 Form 中，value 会被表单接管，value 无效 |\r\n| clearable    | () => void \\| boolean                 | -         | 可点击清空图标删除输入框内容，为函数式表示清空回调                                                               |\r\n| info         | (value: string) => string \\| number   | -         | 提示信息                                                                                                         |\r\n| popoverProps | object                                | -         | 校验弹框接受的属性，具体属性参考 Popover 组件说明                                                                |\r\n| maxLength    | number                                | -         | 可输入最大长度                                                                                                   |\r\n| prefix       | ReactNode                             | -         | 带有前缀图标的 input                                                                                             |\r\n| suffix       | ReactNode                             | -         | 带有后缀图标的 input                                                                                             |\r\n\r\n### Input.Number\r\n\r\n基本 API 和上表相同，特定的 API 如下：\r\n\r\n| 属性      | 类型                    | 默认值 | 说明                   |\r\n| --------- | ----------------------- | ------ | ---------------------- |\r\n| max       | number                  | -      | 最大值                 |\r\n| min       | number                  | -      | 最小值                 |\r\n| step      | number                  | 1      | 改变数字跨度，可为小数 |\r\n| digits    | number                  | -      | 数值的精度             |\r\n| allowNull | boolean                 | false  | 允许空值               |\r\n| hideArrow | boolean                 | false  | 是否展示增减按钮       |\r\n| onChange  | (value: number) => void | -      | 值改变回调函数         |\r\n| onInput   | (value: string) => void | -      | 输入框改变时回调函数   |\r\n","# Input\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Input\r\n\r\n| Property     | Type                                 | Default   | Description                                                                                                                                                                                      |\r\n| ------------ | ------------------------------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| defaultValue | string \\| number                     | -         | Default value                                                                                                                                                                                    |\r\n| name         | string                               | -         | The name of Form which access data                                                                                                                                                               |\r\n| onChange     | (value: string) => void              | -         | The callback function when the value is changing                                                                                                                                                 |\r\n| onEnterPress | (value: string) => void              | -         | The callback function for enter key                                                                                                                                                              |\r\n| placeholder  | string                               | -         | Same as the native input tag                                                                                                                                                                     |\r\n| size         | 'large' \\| 'default' \\| 'small'      | 'default' | size of input                                                                                                                                                                                    |\r\n| style        | object                               | -         | Container element style                                                                                                                                                                          |\r\n| tip          | ReactNode\\|(value:string)=>ReactNode | -         | Prompt information                                                                                                                                                                               |\r\n| trim         | boolean                              | false     | When trim is true, blank characters are automatically deleted when lose focus。                                                                                                                  |\r\n| type         | string                               | 'text'    | Same as the type of the native input tag                                                                                                                                                         |\r\n| value        | string \\| number                     | -         | The defaultValue and value can be set at the same time and defaultValue will be overridden by value<br />In the Form, the value will be taken over by the form and the value will lose efficacy. |\r\n| clearable    | () => void \\| boolean                | false     | Remove content of the input when clicking the clear icon, clear event function                                                                                                                   |\r\n| info         | (value: string) => string \\| number  | -         | Infomation                                                                                                                                                                                       |\r\n| popoverProps | object                               | -         | Validate popup properties, specific properties refer to Popover component description                                                                                                            |\r\n| maxLength    | number                               | -         | input max length                                                                                                                                                                                 |\r\n| prefix       | ReactNode                            | -         | The prefix icon for the Input                                                                                                                                                                    |\r\n| suffix       | ReactNode                            | -         | The suffix icon for the Input                                                                                                                                                                    |\r\n\r\n### Input.Number\r\n\r\nThe basic API is the same as the above table, and the specific API is as follows:\r\n\r\n| Property  | Type                    | Default | Description                                                |\r\n| --------- | ----------------------- | ------- | ---------------------------------------------------------- |\r\n| max       | number                  | -       | The maximum value                                          |\r\n| min       | number                  | -       | The minimum value                                          |\r\n| step      | number                  | 1       | Change the digital span. It can be decimal.                |\r\n| digits    | number                  | -       | the digits of number                                       |\r\n| allowNull | boolean                 | false   | allow value is null                                        |\r\n| hideArrow | boolean                 | false   | Whether to show increase/decrease buttons                  |\r\n| onChange  | (value: string) => void | -       | The callback function when the value is changing           |\r\n| onInput   | (value: string) => void | -       | The callback function when the input component is changing |\r\n"),s=[{name:"01-base",title:(0,i.ZP)("基本用法 \n Input 通常需要和其他的组件配合使用，所以默认的宽度是 100%，默认 display 为 block \n 如果设置了 style.width，默认 display 为 inline-flex","Base \n Input usually needs to be used with other components, so the default width is 100% and the default display is block. \n If the style.width is set, the default display is inline-flex."),component:t(16021).Z,rawText:t(30393).Z},{name:"02-size",title:(0,i.ZP)("大小 \n 提供了三种尺寸的输入框，small、default、large","Size \n There are three size of input, small, default, large."),component:t(10524).Z,rawText:t(96850).Z},{name:"03-number",title:(0,i.ZP)("数字 \n type 为 number 时，输入时会做一次校验，禁止输入非数字类型字符，并且根据 digits 属性限制小数位数","Number \n When type is number, it is forbidden to input non-numeric characters, and the number of decimal places is limited according to the digits property"),component:t(17827).Z,rawText:t(30801).Z},{name:"04-number",title:(0,i.ZP)(" \n Input.Number 组件，可以通过鼠标和上下键辅助输入"," \n Input.Number component can be assisted by mouse and up and down keyboard."),component:t(45357).Z,rawText:t(22487).Z},{name:"05-group",title:(0,i.ZP)("组合 \n Icon, span, string, Button 类型可以直接放入 Input.Group 中。需要背景色可以放在 b 标签中。","Group \n The Icon, span, string and Button types can be placed directly into the Input.Group. Use b tag can change the background color."),component:t(59897).Z,rawText:t(87846).Z},{name:"06-tip",title:(0,i.ZP)("提示文字 \n 在 input 上设置的 tip 在 focus 时弹出","Tip \n The tip set on input pops up when it is focused."),component:t(50020).Z,rawText:t(95570).Z},{name:"07-validate",title:(0,i.ZP)("校验 \n 设置了 rules，会自动校验输入数据，设置了 popover 会在指定位置弹出 \n 如果没有设置 popover，不会弹出错误提示。 \n 有错误时，提示框不会隐藏。","Validate \n When the rules property is set, it will automatically verify the input data. When the popover property is set, it will pop up at the specified location. \n If the popover property is not set, no error message will pop up. \n If input is invalid, the message will not be hidden."),component:t(62453).Z,rawText:t(53646).Z},{name:"08-disabled",title:(0,i.ZP)("禁用 \n 设置 disabled 属性禁用组件","Disabled \n Set the disabled property to disable the component."),component:t(44596).Z,rawText:t(86088).Z},{name:"09-password",title:(0,i.ZP)("密码 \n 密码框。","Password \n Password."),component:t(71822).Z,rawText:t(45278).Z},{name:"10-icon",title:(0,i.ZP)("前缀和后缀 \n 在输入框上添加前缀或后缀图标。","Prefix and suffix \n Add a prefix or suffix icon to the input."),component:t(1421).Z,rawText:t(57528).Z},{name:"11-clearable",title:(0,i.ZP)("允许删除 \n Input 允许删除","allow clear \n Input allow clear"),component:t(69918).Z,rawText:t(3694).Z}],p=(0,u.Z)((function(){return l().createElement(a.Z,null,l().createElement(o.Z,{source:c,examples:s}))}))},16021:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(87363),l=t.n(r),a=t(11888);function o(){return l().createElement(a.II,{placeholder:"input something"})}},10524:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o={width:120,marginRight:12};function i(){return l().createElement("div",null,l().createElement(a.II,{size:"small",style:o,placeholder:"small size"}),l().createElement(a.II,{style:o,placeholder:"default size"}),l().createElement(a.II,{size:"large",style:o,placeholder:"large size"}))}},17827:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o={marginBottom:12};function i(){return l().createElement("div",{style:{width:300}},l().createElement(a.II,{style:o,type:"number",placeholder:"digits undefined"}),l().createElement(a.II,{style:o,digits:0,type:"number",placeholder:"digits 0"}),l().createElement(a.II,{style:o,digits:1,type:"number",placeholder:"digits 1"}),l().createElement(a.II,{style:o,digits:2,type:"number",placeholder:"digits 2"}),l().createElement(a.II,{style:o,digits:3,type:"number",placeholder:"digits 3"}))}},45357:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(87363),l=t.n(r),a=t(11888);function o(){return l().createElement(a.II.Number,{width:120,min:23,max:100,digits:2,clearable:!0,onEnterPress:function(e){console.log("onEnterPress:",e)},onChange:function(e){console.log("onChange:",e)},onInput:function(e){console.log("onInput:",e)}})}},59897:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o={width:300,marginBottom:12};function i(){return l().createElement("div",null,l().createElement(a.II.Group,{style:o},l().createElement(a.Ay,{name:"user"}),l().createElement(a.II,{placeholder:"first name"}),"-",l().createElement(a.II,{placeholder:"last name"})),l().createElement(a.II.Group,{style:o},l().createElement(a.II,{placeholder:"search text"}),l().createElement(a.zx,{text:!0},l().createElement(a.Ay,{name:"search"}))),l().createElement(a.II.Group,{style:o},l().createElement(a.II,{style:{flex:1},placeholder:"flex 1"}),l().createElement(a.II,{style:{flex:3},placeholder:"flex 3"})),l().createElement(a.II.Group,{style:o},l().createElement(a.II,{placeholder:"search text"}),l().createElement(a.zx,{type:"primary"},"Search")),l().createElement(a.II.Group,{size:"small",style:o},l().createElement("b",null,l().createElement(a.Ay,{name:"envelope"})),l().createElement(a.II,{placeholder:"email"}),l().createElement("b",null,".com")))}},50020:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o={marginBottom:12};function i(){return l().createElement("div",{style:{width:300}},l().createElement(a.II,{style:o,placeholder:"email",tip:"enter you email."}),l().createElement(a.II.Group,{style:o},l().createElement(a.Ay,{name:"envelope"}),l().createElement(a.II,{tip:"enter you email.",placeholder:"email"})))}},62453:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o=(0,a.$9)();function i(){return l().createElement(a.II,{placeholder:"email",rules:[o.required],tip:"Email, required",popoverProps:{placement:"top-left"},width:300})}},44596:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),l=t.n(r),a=t(11888),o={width:300,marginBottom:12};function i(){return l().createElement("div",null,l().createElement(a.II.Group,{disabled:!0,style:o},l().createElement(a.II,{placeholder:"first name"}),"-",l().createElement(a.II,{placeholder:"last name"})),l().createElement(a.II,{disabled:!0,style:o,placeholder:"disabled input"}))}},71822:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(87363),l=t.n(r),a=t(11888);function o(){return l().createElement(l().Fragment,null,l().createElement(a.II.Password,{placeholder:"input password",style:{width:"200px"},clearable:!0}),l().createElement("br",null),l().createElement(a.II.Password,{placeholder:"input password",style:{width:"200px",marginTop:10},clearable:!0,disabled:!0}))}},1421:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(87363),l=t.n(r),a=t(11888);function o(){return l().createElement(l().Fragment,null,l().createElement(a.II,{style:{width:"300px"},prefix:l().createElement(a.Ay,{name:"jpy"}),suffix:"RMB",size:"small"}),l().createElement("br",null),l().createElement(a.II,{style:{width:"300px",marginTop:"10px"},prefix:l().createElement(a.Ay,{name:"jpy"}),suffix:"RMB",size:"default"}),l().createElement("br",null),l().createElement(a.II,{disabled:!0,style:{width:"300px",marginTop:"10px"},prefix:l().createElement(a.Ay,{name:"jpy"}),suffix:"RMB",size:"large"}))}},69918:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(87363),l=t.n(r),a=t(11888);function o(){return l().createElement(a.II,{clearable:!0,placeholder:"input something"})}},36519:function(e,n,t){var r=t(11888),l=t(87363),a=t.n(l);n.Z=function(e){var n=function(n){return(0,l.useEffect)((function(){return r.gb.finish(),function(){r.gb.start()}}),[]),a().createElement(e,n)};return a().memo(n)}},30393:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- Input 通常需要和其他的组件配合使用，所以默认的宽度是 100%，默认 display 为 block\r\n *    -- 如果设置了 style.width，默认 display 为 inline-flex\r\n * en - Base\r\n *    -- Input usually needs to be used with other components, so the default width is 100% and the default display is block.\r\n *    -- If the style.width is set, the default display is inline-flex.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return <Input placeholder=\"input something\" />\r\n}\r\n"},96850:function(e,n){n.Z='/**\r\n * cn - 大小\r\n *    -- 提供了三种尺寸的输入框，small、default、large\r\n * en - Size\r\n *    -- There are three size of input, small, default, large.\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'ethan-ui\'\r\n\r\nconst style = { width: 120, marginRight: 12 }\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Input size="small" style={style} placeholder="small size" />\r\n            <Input style={style} placeholder="default size" />\r\n            <Input size="large" style={style} placeholder="large size" />\r\n        </div>\r\n    )\r\n}\r\n'},30801:function(e,n){n.Z='/**\r\n * cn - 数字\r\n *    -- type 为 number 时，输入时会做一次校验，禁止输入非数字类型字符，并且根据 digits 属性限制小数位数\r\n * en - Number\r\n *    -- When type is number, it is forbidden to input non-numeric characters, and the number of decimal places is limited according to the digits property\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'ethan-ui\'\r\n\r\nconst style = { marginBottom: 12 }\r\n\r\nexport default function () {\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Input style={style} type="number" placeholder="digits undefined" />\r\n            <Input style={style} digits={0} type="number" placeholder="digits 0" />\r\n            <Input style={style} digits={1} type="number" placeholder="digits 1" />\r\n            <Input style={style} digits={2} type="number" placeholder="digits 2" />\r\n            <Input style={style} digits={3} type="number" placeholder="digits 3" />\r\n        </div>\r\n    )\r\n}\r\n'},22487:function(e,n){n.Z="/**\r\n * cn -\r\n *  . -- Input.Number 组件，可以通过鼠标和上下键辅助输入\r\n * en -\r\n *  . -- Input.Number component can be assisted by mouse and up and down keyboard.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return (\r\n        <Input.Number\r\n            width={120}\r\n            min={23}\r\n            max={100}\r\n            digits={2}\r\n            clearable\r\n            onEnterPress={(value) => {\r\n                console.log('onEnterPress:', value)\r\n            }}\r\n            onChange={(value) => {\r\n                console.log('onChange:', value)\r\n            }}\r\n            onInput={(value) => {\r\n                console.log('onInput:', value)\r\n            }}\r\n        />\r\n    )\r\n}\r\n"},87846:function(e,n){n.Z='/**\r\n * cn - 组合\r\n *  . -- Icon, span, string, Button 类型可以直接放入 Input.Group 中。需要背景色可以放在 b 标签中。\r\n * en - Group\r\n *  . -- The Icon, span, string and Button types can be placed directly into the Input.Group. Use b tag can change the background color.\r\n */\r\nimport React from \'react\'\r\nimport { Input, Button, FontAwesome } from \'ethan-ui\'\r\n\r\nconst style = { width: 300, marginBottom: 12 }\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Input.Group style={style}>\r\n                <FontAwesome name="user" />\r\n                <Input placeholder="first name" />\r\n                -\r\n                <Input placeholder="last name" />\r\n            </Input.Group>\r\n\r\n            <Input.Group style={style}>\r\n                <Input placeholder="search text" />\r\n                <Button text>\r\n                    <FontAwesome name="search" />\r\n                </Button>\r\n            </Input.Group>\r\n\r\n            <Input.Group style={style}>\r\n                <Input style={{ flex: 1 }} placeholder="flex 1" />\r\n                <Input style={{ flex: 3 }} placeholder="flex 3" />\r\n            </Input.Group>\r\n\r\n            <Input.Group style={style}>\r\n                <Input placeholder="search text" />\r\n                <Button type="primary">Search</Button>\r\n            </Input.Group>\r\n\r\n            <Input.Group size="small" style={style}>\r\n                <b>\r\n                    <FontAwesome name="envelope" />\r\n                </b>\r\n                <Input placeholder="email" />\r\n                <b>.com</b>\r\n            </Input.Group>\r\n        </div>\r\n    )\r\n}\r\n'},95570:function(e,n){n.Z='/**\r\n * cn - 提示文字\r\n *    -- 在 input 上设置的 tip 在 focus 时弹出\r\n * en - Tip\r\n *    -- The tip set on input pops up when it is focused.\r\n */\r\nimport React from \'react\'\r\nimport { Input, FontAwesome } from \'ethan-ui\'\r\n\r\nconst style = { marginBottom: 12 }\r\n\r\nexport default function () {\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Input style={style} placeholder="email" tip="enter you email." />\r\n\r\n            <Input.Group style={style}>\r\n                <FontAwesome name="envelope" />\r\n                <Input tip="enter you email." placeholder="email" />\r\n            </Input.Group>\r\n        </div>\r\n    )\r\n}\r\n'},53646:function(e,n){n.Z="/**\r\n * cn - 校验\r\n *    -- 设置了 rules，会自动校验输入数据，设置了 popover 会在指定位置弹出\r\n *    -- 如果没有设置 popover，不会弹出错误提示。\r\n *    -- 有错误时，提示框不会隐藏。\r\n * en - Validate\r\n *    -- When the rules property is set, it will automatically verify the input data. When the popover property is set, it will pop up at the specified location.\r\n *    -- If the popover property is not set, no error message will pop up.\r\n *    -- If input is invalid, the message will not be hidden.\r\n */\r\nimport React from 'react'\r\nimport { Input, Rule } from 'ethan-ui'\r\n\r\nconst rules = Rule()\r\n\r\nexport default function () {\r\n    return (\r\n        <Input\r\n            placeholder=\"email\"\r\n            rules={[rules.required]}\r\n            tip=\"Email, required\"\r\n            popoverProps={{ placement: 'top-left' }}\r\n            width={300}\r\n        />\r\n    )\r\n}\r\n"},86088:function(e,n){n.Z='/**\r\n * cn - 禁用\r\n *    -- 设置 disabled 属性禁用组件\r\n * en - Disabled\r\n *    -- Set the disabled property to disable the component.\r\n */\r\nimport React from \'react\'\r\nimport { Input } from \'ethan-ui\'\r\n\r\nconst style = { width: 300, marginBottom: 12 }\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Input.Group disabled style={style}>\r\n                <Input placeholder="first name" />\r\n                -\r\n                <Input placeholder="last name" />\r\n            </Input.Group>\r\n\r\n            <Input disabled style={style} placeholder="disabled input" />\r\n        </div>\r\n    )\r\n}\r\n'},45278:function(e,n){n.Z="/**\r\n * cn - 密码\r\n *    -- 密码框。\r\n * en - Password\r\n *    -- Password.\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return (\r\n        <>\r\n            <Input.Password placeholder=\"input password\" style={{ width: '200px' }} clearable />\r\n\r\n            <br />\r\n\r\n            <Input.Password placeholder=\"input password\" style={{ width: '200px', marginTop: 10 }} clearable disabled />\r\n        </>\r\n    )\r\n}\r\n"},57528:function(e,n){n.Z='/**\r\n * cn - 前缀和后缀\r\n *    -- 在输入框上添加前缀或后缀图标。\r\n * en - Prefix and suffix\r\n *    -- Add a prefix or suffix icon to the input.\r\n */\r\nimport React from \'react\'\r\nimport { FontAwesome, Input } from \'ethan-ui\'\r\n\r\nexport default function () {\r\n    return (\r\n        <>\r\n            <Input style={{ width: \'300px\' }} prefix={<FontAwesome name="jpy" />} suffix="RMB" size="small" />\r\n            <br />\r\n            <Input\r\n                style={{ width: \'300px\', marginTop: \'10px\' }}\r\n                prefix={<FontAwesome name="jpy" />}\r\n                suffix="RMB"\r\n                size="default"\r\n            />\r\n            <br />\r\n            <Input\r\n                disabled\r\n                style={{ width: \'300px\', marginTop: \'10px\' }}\r\n                prefix={<FontAwesome name="jpy" />}\r\n                suffix="RMB"\r\n                size="large"\r\n            />\r\n        </>\r\n    )\r\n}\r\n'},3694:function(e,n){n.Z="/**\r\n * cn - 允许删除\r\n *    -- Input 允许删除\r\n * en -  allow clear\r\n *    -- Input allow clear\r\n */\r\nimport React from 'react'\r\nimport { Input } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return <Input clearable placeholder=\"input something\" />\r\n}\r\n"}}]);