"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1923],{75722:function(e,n,r){r.d(n,{Z:function(){return S}});var t=r(87462),a=r(29439),l=r(93433),o=r(87363),m=r.n(o),i=r(92242),u=r.n(i),c=r(73727),s=r(22770),d=r(62625),p=r(94184),f=r.n(p),b=r(15660),h=r.n(b),g=(r(62356),function(e){var n=e.language,r=void 0===n?"lang-jsx":n,t=e.value,a=(0,o.useRef)(null);return(0,o.useEffect)((function(){h().highlightElement(a.current,!1)}),[]),m().createElement("pre",{ref:a,className:f()(r,(0,s.vf)("pre"))},m().createElement("code",null,t))}),y=r(84506),I=r(11888),F=r(91391),v=function(e){var n=e.component,r=e.id,t=e.rawText,l=void 0===t?"":t,i=e.title,u=(0,o.useState)(!1),c=(0,a.Z)(u,2),d=c[0],p=c[1],f=(0,o.useRef)((0,o.createElement)(n)).current,b=l.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),h=i.split("\n"),v=(0,y.Z)(h),E=v[0],w=v.slice(1),x=function(){p(!d)};return m().createElement(m().Fragment,null,E&&m().createElement("h3",{id:r},E),m().createElement(I.Zr,{placeholder:m().createElement("div",{className:(0,s.vf)("placeholder")},m().createElement(I.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},m().createElement("div",{className:(0,s.vf)("_",d&&"showcode")},m().createElement("div",{className:(0,s.vf)("body")},f),i.length>0&&m().createElement("div",{className:(0,s.vf)("desc")},w.map((function(e,n){return m().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),m().createElement("a",{className:(0,s.vf)("toggle"),onClick:x},m().createElement(F.Z,{name:d?"code-close":"code"}))),m().createElement(I.y_.Transition,{visible:d,transitionTypes:["collapse","fade"]},m().createElement(g,{value:b}),m().createElement("a",{className:(0,s.vf)("toggle"),onClick:x},m().createElement(F.Z,{name:d?"code-close":"code"}))))))},E=m().memo(v),w=function(e){var n=e.children,r=(0,l.Z)(n[1].props.children);try{r.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return m().createElement("div",{style:{overflow:"auto"}},m().createElement("table",{className:"doc-api-table"},n[0],m().cloneElement(n[1],{children:r})))},x=r(35087),C=function(e){var n=[],r=(0,o.useContext)(x.Z).setHeadings,i=e.source,p=e.examples;return m().useEffect((function(){r(n)}),[]),m().createElement(u(),{className:(0,s.EX)("_"),source:i,renderers:{code:g,heading:function(e){var r=e.level,t=e.children,a="h".concat(r),l="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(r,t[0]));return 2!==r&&3!==r||n.push({id:l,level:r,children:t}),m().createElement(a,{id:l},t)},table:w,html:function(e){return"<example />"===e.value?m().createElement(m().Fragment,null,function(){if(!p)return m().createElement("div",null);var e=(0,d.ZP)("示例","Example"),r="heading-example-h";return n.push({id:r,level:2,children:[e]}),[m().createElement("h2",{key:"h",id:r},e)].concat((0,l.Z)(p.map((function(e){var r="heading-".concat(e.name),l=e.title.split("\n"),o=(0,a.Z)(l,1)[0];return n.push({id:r,level:3,children:[o]}),m().createElement(E,(0,t.Z)({key:r,id:r},e))}))))}()):"<br>"===e.value||"<br />"===e.value?m().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?m().createElement("a",{href:e.href,target:n},e.children):m().createElement(c.rU,{to:e.href},e.children)}}})},S=m().memo(C)},35087:function(e,n,r){var t=(0,r(87363).createContext)(void 0);n.Z=t},88981:function(e,n,r){var t=r(29439),a=r(87363),l=r.n(a),o=r(91291),m=r(22770),i=r(11888),u=r(75964),c=r(12025),s=r(35087),d=function(e){var n=e.children,r=(0,a.useState)(""),d=(0,t.Z)(r,2),p=d[0],f=d[1],b=(0,a.useState)([]),h=(0,t.Z)(b,2),g=h[0],y=h[1],I=(0,o.Z)().hash,F=(0,u.Z)((function(e){c.Z.push("".concat(c.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),v=(0,u.Z)((function(){var e=document.documentElement.scrollTop,n=g.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var r=n[0].id;n.forEach((function(n){var t=document.querySelector("#".concat(n.id));(null==t?void 0:t.offsetTop)<=e&&(r=n.id)})),f(r)}}));(0,a.useEffect)((function(){if(v(),I){var e=document.querySelector(I);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",v),function(){document.removeEventListener("scroll",v)}}),[g]);var E=l().useMemo((function(){return{setHeadings:y}}),[]);return l().createElement("div",{className:(0,m.EH)("_")},l().createElement(s.Z.Provider,{value:E},n),l().createElement(i.Le,{className:(0,m.EH)("sticky"),top:50},l().createElement("div",{className:(0,m.EH)("nav")},g.map((function(e,n){var r=e.children.filter((function(e){return"string"==typeof e}));return l().createElement("a",{key:n,className:(0,m.EH)("level-".concat(e.level),p===e.id&&"active"),onClick:F.bind(null,e.id)},r)})))))};n.Z=l().memo(d)},24804:function(e,n,r){r.r(n),r.d(n,{default:function(){return s}});var t=r(87363),a=r.n(t),l=r(88981),o=r(75722),m=r(62625),i=r(36519),u=(0,m.ZP)("# Form _表单_\r\n\r\n表单组件，提供数据管理，校验，提交，交互等\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Form\r\n\r\n| 属性            | 类型                                | 默认值  | 说明                                                       |\r\n| --------------- | ----------------------------------- | ------- | ---------------------------------------------------------- |\r\n| className       | string                              | -       | 样式名称                                                   |\r\n| disabled        | boolean                             | false   | 是否禁用                                                   |\r\n| defaultValue    | any                                 | -       | 表单默认值，只有初始化以及重置时生效                       |\r\n| inline          | boolean                             | false   | 是否水平布局                                               |\r\n| onError         | (error:Error)=>void                 | -       | 提交表单且数据验证失败后回调事件                           |\r\n| onReset         | ()=>void                            | -       | 重置表单回调事件                                           |\r\n| onSubmit        | (value:any)=>void                   | -       | 提交表单且数据验证成功后回调事件                           |\r\n| scrollToError   | boolean                             | -       | 提交失败自动滚动到第一个错误字段                           |\r\n| style           | React.CSSProperties                 | -       | 样式                                                       |\r\n| labelAlign      | 'top' \\|'right' \\|'left'            | -       | Label 的排序方式                                           |\r\n| labelWidth      | string \\| number                    | '140px' | 标签宽度，labelAlign 为 'top' 时无效。                     |\r\n| onChange        | (changeValues:any,values:any)=>void | -       | 字段更新时触发回调事件                                     |\r\n| removeUndefined | boolean                             | true    | 是否删除值为 undefined 的字段，默认值为删除                |\r\n| errors          | Record<string,string\\|number>       | -       | 表单的错误值                                               |\r\n| animation       | boolean                             | false   | 是否以动画展示 error                                       |\r\n| preserve        | boolean                             | false   | 当字段被删除时保留字段值                                   |\r\n| form            | FormInstance                        | -       | 经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建 |\r\n\r\n### Form.Item\r\n\r\n** 表单字段组件，用于数据双向绑定、校验、布局等。 **\r\n\r\n| 属性          | 类型                                                               | 默认值 | 说明                                                                                               |\r\n| ------------- | ------------------------------------------------------------------ | ------ | -------------------------------------------------------------------------------------------------- |\r\n| className     | string                                                             | -      | 样式名称                                                                                           |\r\n| defaultValue  | any                                                                | -      | 表单字段的默认值，优先级低于 Form 的 defaultValue                                                  |\r\n| label         | ReactNode                                                          | -      | 未定义时，标签不会 render，也不会占位。                                                            |\r\n| labelAlign    | 'top' \\|'right' \\|'left'                                           | -      | Label 的排序方式                                                                                   |\r\n| labelWidth    | string \\| number                                                   | -      | 标签宽度，labelAlign 为 'top' 时无效。                                                             |\r\n| required      | boolean                                                            | false  | 必填标记，纯展示用，不会触发校验                                                                   |\r\n| tip           | ReactNode                                                          | -      | 提示文案                                                                                           |\r\n| style         | React.CSSProperties                                                | -      | 样式                                                                                               |\r\n| grid          | number \\| { width?: number; offset?: number; responsive?: number } | -      | 表单字段的栅格配置                                                                                 |\r\n| rules         | Rule[]                                                             | -      | 校验规则                                                                                           |\r\n| name          | string \\| string[]                                                 | -      | 字段名，支持数组，支持多级嵌套数据                                                                 |\r\n| flow          | boolean \\| string[]                                                | -      | 订阅对应字段的更新,如果 flow 的字段更新，会重新渲染 FormItem                                       |\r\n| noStyle       | boolean                                                            | false  | 不带样式，作为纯字段控件使用                                                                       |\r\n| noErrorInRoot | boolean                                                            | false  | 默认情况下，顶层的 FormItem 会收集所有 FormItem 的错误展示，设置为 true 的 FormItem 不收集错误信息 |\r\n| preserve      | boolean                                                            | false  | 当字段被删除时保留字段值                                                                           |\r\n| animation     | boolean                                                            | false  | 是否以动画展示 error                                                                               |\r\n\r\n### Form.FieldSet\r\n\r\n** 用来处理 object 类型 字段和数组。 **\r\n\r\n| 属性         | 类型                                     | 默认值 | 说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r\n| ------------ | ---------------------------------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| children     | (opts: object) => ReactNode \\| ReactNode | 必填   | children 不为 function，用来处理 object 类型数据，children 内的 name 会拼接 FieldSet name，如 FieldSet name 为 'a', children 元素 name 为 b，children 实际处理的数据为 a.b; <br /> children 为 function 时，用来处理数组数据。options 属性为<br />list: name 下的全部数据<br />value：根据 name 获取的值的单条数据<br />onChange：子组件数据改变回调<br />onRemove：子组件删除回调<br />index：当前项索引<br />onInsert: 在当前项之前插入一条数据<br />onAppend: 在当前项之后附加一条数据 |\r\n| defaultValue | string \\| number                         | -      | 默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\r\n| emptyRender  | (onInsert: any) => ReactNode             | 无     | 数据为空时展示内容。（仅在 children 为 function 时有效）                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| name         | string                                   | 必填   | 从 Form 中存取数据的名称                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| rules        | any[]                                    | 无     | 校验规则                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| preserve     | boolean                                  | false  | 当字段被删除时保留字段值                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\r\n| flow         | boolean \\| string[]                      | -      | 订阅对应字段的更新,如果 flow 的字段更新，会重新渲染白 FormItem                                                                                                                                                                                                                                                                                                                                                                                                                            |\r\n| animation    | boolean                                  | false  | 是否以动画展示 error                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r\n\r\n### FormInstance\r\n\r\n** 表单组件的实例，用于操作表单 Store **\r\n\r\n| 属性         | 类型                                                        | 说明                                 |\r\n| ------------ | ----------------------------------------------------------- | ------------------------------------ |\r\n| get          | (name:string\\|string[])=>any                                | 获取特定字段的值                     |\r\n| getValue     | ()=>any                                                     | 获取表单所有的字段值                 |\r\n| set          | (params:{name:string\\|string[],value:any})=>any             | 设置特定字段的值                     |\r\n| setValue     | (values:any)=>any                                           | 设置表单的值                         |\r\n| setError     | (params:{name:string\\|string[],error:Error \\| string})=>any | 设置表单特定字段的错误值             |\r\n| setFormError | (errors:Record<string,string\\|Error>>)                      | 设置表单的错误值                     |\r\n| validate     | (name:string)=>any                                          | 校验特定字段的表单值，并且返回字段值 |\r\n| validateForm | (names?:string[])=>any                                      | 校验表单，并返回对应的值，默认为全部 |\r\n| reset        | (names?:string[])=>void                                     | 重置表单，默认为全部字段             |\r\n\r\n### Hooks\r\n\r\n#### Form.useForm\r\n\r\n创建 Form 实例，操作 Form 的 Store。\r\n\r\n```typescript\r\ntype Form.useForm = (): [FormInstance]\r\n```\r\n\r\n#### Form.useFormValueState\r\n\r\n获取特定字段的状态，可以操作该字段的值\r\n\r\n```typescript\r\ntype Form.useFormValueState = (name:string): [value:any,(value: any) => void]\r\n```\r\n\r\n#### Form.useFormValueEffect\r\n\r\n监听特定字段的值，发生变化时执行回调\r\n\r\n```typescript\r\ntype FormComponent.useFormValueEffect = (callback: (v: any) => void, params: {form: FormInstance,deep: string[]}) => void\r\n```\r\n","# Form\r\n\r\nForm component, providing data management, validation, submission, interaction, etc\r\n\r\n<example />\r\n\r\n## API\r\n\r\n### Form\r\n\r\n| Property        | Type                                | Default | Description                                                                                           |\r\n| --------------- | ----------------------------------- | ------- | ----------------------------------------------------------------------------------------------------- |\r\n| className       | string                              | -       | Extend className                                                                                      |\r\n| disabled        | boolean                             | false   | When disabled is true, all the elements in the form are disabled.                                     |\r\n| defaultValue    | any                                 | -       | Form default value                                                                                    |\r\n| inline          | boolean                             | false   | When inline is true, the form is horizontal layout                                                    |\r\n| onError         | (error:Error)=>void                 | -       | Callback when the error happens                                                                       |\r\n| onReset         | ()=>void                            | -       | Reset the form callback event                                                                         |\r\n| onSubmit        | (value:any)=>void                   | -       | Callback events after the form is submitted and data validation is successful                         |\r\n| scrollToError   | boolean                             | -       | Submit failure automatically scrolls to the first error field                                         |\r\n| style           | React.CSSProperties                 | -       | Container element style                                                                               |\r\n| labelAlign      | 'top' \\|'right' \\|'left'            | -       | Label sort                                                                                            |\r\n| labelWidth      | string \\| number                    | '140px' | Label width, invalid if labelAlign is 'top'.                                                          |\r\n| onChange        | (changeValues:any,values:any)=>void | -       | A callback event is triggered when a field is updated                                                 |\r\n| removeUndefined | boolean                             | true    | Whether to delete fields whose value is undefined, the default value is delete                        |\r\n| errors          | Record<string,string\\|number>       | -       | Form errors                                                                                           |\r\n| animation       | boolean                             | false   | Whether to animate error                                                                              |\r\n| preserve        | boolean                             | false   | Preserve the field value when the field is deleted                                                    |\r\n| form            | FormInstance                        | -       | The Form control instance created by form.useForm () is automatically created when it is not provided |\r\n\r\n### Form.Item\r\n\r\n** Form field components for bidirectional data binding, validation, layout, and so on. **\r\n\r\n| Property      | Type                                                               | Default | Description                                                                                                                      |\r\n| ------------- | ------------------------------------------------------------------ | ------- | -------------------------------------------------------------------------------------------------------------------------------- |\r\n| className     | string                                                             | -       | Extend className.                                                                                                                |\r\n| defaultValue  | any                                                                | -       | The defaultValue of the Form field, which has a lower priority than the defaultValue of the Form.                                |\r\n| label         | ReactNode                                                          | -       | When undefined, the tag will not render and will not hold space.                                                                 |\r\n| labelAlign    | 'top' \\|'right' \\|'left'                                           | -       | Label sort                                                                                                                       |\r\n| labelWidth    | string \\| number                                                   | -       | Label width, invalid if labelAlign is 'top'.                                                                                     |\r\n| required      | boolean                                                            | false   | Required tag, for display only, does not trigger check                                                                           |\r\n| tip           | ReactNode                                                          | -       | Tip information                                                                                                                  |\r\n| style         | React.CSSProperties                                                | -       | FormItem style                                                                                                                   |\r\n| grid          | number \\| { width?: number; offset?: number; responsive?: number } | -       | Configuration of rasters for FormItem                                                                                            |\r\n| rules         | Rule[]                                                             | -       | Rules of verification                                                                                                            |\r\n| name          | string \\| string[]                                                 | -       | Field name, support array, support multilevel nested data                                                                        |\r\n| flow          | boolean \\| string[]                                                | -       | Subscribe to the update of the corresponding field. If the Flow field is updated, the FormItem is re-rendered                    |\r\n| noStyle       | boolean                                                            | false   | No style, used as a pure field control                                                                                           |\r\n| noErrorInRoot | boolean                                                            | false   | By default, the top-level FormItem collects error displays for all FormItems. FormItem set to true do not collect error messages |\r\n| preserve      | boolean                                                            | false   | Preserve the field value when the field is deleted                                                                               |\r\n| animation     | boolean                                                            | false   | Whether to animate error                                                                                                         |\r\n\r\n### Form.FieldSet\r\n\r\n** Handle a set(group) data from form by name. **\r\n\r\n| Property     | Type                                     | Default  | Description|\r\n| ------------ | ---------------------------------------- | -------- ||\r\n| children     | (opts: object) => ReactNode \\| ReactNode | required | When children type is not function, handle a set data type of object, When children type is function, handle a group of data type of array. options property: <br />list: all data of name <br />value：a single piece of data for the value obtained by name <br />onChange：a callback when the value is changing <br />onRemove：a callback when a child component is removed <br />index：the current index <br />onInsert: Insert a piece of data before the current item <br />onAppend: Insert a piece of data after the current item |\r\n| defaultValue | string \\| number                         |          | Default value|\r\n| emptyRender  | (onInsert: any) => ReactNode             | -        | Display content when data is empty. (Only valid if children is function)                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\r\n| name         | string                                   | required | The name to access data from the Form                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| rules        | any[]                                    | -        | Rules of verification                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| preserve     | boolean                                  | false    | Preserve the field value when the field is deleted 值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\r\n| flow         | boolean \\| string[]                      | -        | Subscribe to the update of the corresponding field. If the Flow field is updated, the FormItem is re-rendered                                                                                                                                                                                                                                                                                                                                                                                                                                |\r\n| animation    | boolean                                  | false    | Whether to animate error error                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\r\n\r\n### FormInstance\r\n\r\n** An instance of the form component that manipulates the Form Store **\r\n\r\n| Property     | Type                                                        | Description                                                                   |\r\n| ------------ | ----------------------------------------------------------- | ----------------------------------------------------------------------------- |\r\n| get          | (name:string\\|string[])=>any                                | Gets the value of a specific field                                            |\r\n| getValue     | ()=>any                                                     | Returns the values of the form                                                |\r\n| set          | (params:{name:string\\|string[],value:any})=>any             | Sets the value of a specific field                                            |\r\n| setValue     | (values:any)=>any                                           | Sets the values of the form                                                   |\r\n| setError     | (params:{name:string\\|string[],error:Error \\| string})=>any | Sets the value of a specific field error                                      |\r\n| setFormError | (errors:Record<string,string\\|Error>>)                      | Sets the errors of the form                                                   |\r\n| validate     | (name:string)=>any                                          | Verifies the form value for a particular field and returns the field value    |\r\n| validateForm | (names?:string[])=>any                                      | Validates the form and returns the corresponding value, which defaults to all |\r\n| reset        | (names?:string[])=>void                                     | Reset the form, which defaults to all fields                                  |\r\n\r\n### Hooks\r\n\r\n#### Form.useForm\r\n\r\nCreate Form instance to maintain data store.\r\n\r\n```typescript\r\ntype Form.useForm = (): [FormInstance]\r\n```\r\n\r\n#### Form.useFormValueState\r\n\r\nGets the status of a specific field, the value of which can be manipulated\r\n\r\n```typescript\r\ntype Form.useFormValueState = (name:string): [value:any,(value: any) => void]\r\n```\r\n\r\n#### Form.useFormValueEffect\r\n\r\nSubscribe for the value of a particular field and perform a callback when it changes\r\n\r\n```typescript\r\ntype FormComponent.useFormValueEffect = (callback: (v: any) => void, params: {form: FormInstance,deep: string[]}) => void\r\n```\r\n"),c=[{name:"01-base",title:(0,m.ZP)("基本用法 \n 表单内置了类似双向绑定的机制，根据FormItem的 name 属性自动下发、收集数据","Base \n The form has a two-way binding mechanism built in, automatically sending and collecting data based on the name property of the FormItem."),component:r(20383).Z,rawText:r(37985).Z},{name:"02-labelWidth",title:(0,m.ZP)("标签 \n 通过 labelWidth 和 labelAlign 改变标签宽度和对齐方式","Label \n Set labelWidth and labelAlign to change label with and alignment."),component:r(11906).Z,rawText:r(37953).Z},{name:"03-inline",title:(0,m.ZP)("水平布局 \n 设置 inline 属性使 Form 变为水平布局","Inline \n Set the inline property to true to make the Form horizontal."),component:r(51650).Z,rawText:r(50084).Z},{name:"04-component",title:(0,m.ZP)("自定义表单组件 \n 提供受控的value和onChange使组件成为自定义表单组件","Customized Form Controls \n Providing controlled values and onChange makes the component a customized form component."),component:r(75743).Z,rawText:r(44097).Z},{name:"04-disabled",title:(0,m.ZP)("禁用 \n 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时","Disabled \n Use the disabled property to make the Form support to disable component."),component:r(25001).Z,rawText:r(87248).Z},{name:"05-children",title:(0,m.ZP)("函数Children \n Form.Item children 为函数时，会提供一些操作Form的参数","Function children \n When form. Item children is a function, it provides some parameters to manipulate the Form."),component:r(87047).Z,rawText:r(69287).Z},{name:"06-noStyle",title:(0,m.ZP)("无样式 \n 无样式的FormItem可直接展示组件，但仍然保留收集数据的能力,实现更复杂的组件","NoStyle \n FormItem without styles can directly display components, but still retain the ability to collect data and implement more complex components"),component:r(54118).Z,rawText:r(10325).Z},{name:"07-fieldSet",title:(0,m.ZP)("FieldSet \n FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件。","FieldSet \n When FieldSet's children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents."),component:r(45774).Z,rawText:r(91067).Z},{name:"08-flow",title:(0,m.ZP)("依赖更新 \n 设置flow值时，不仅会重新渲染FormItem，还会进行校验操作","Flow update \n When the flow value is set, the FormItem is not only re-rendered, but also validated"),component:r(34481).Z,rawText:r(64104).Z},{name:"09-validate",title:(0,m.ZP)("校验 \n 更多组件的检验","Validate \n More component validation"),component:r(85843).Z,rawText:r(39763).Z},{name:"10-errors",title:(0,m.ZP)(" \n 通过给 Form 设置 errors，实现后端校验数据展示。在表单值被改变后，对应后端校验数据会被清空。前端校验优先级大于后端校验。"," \n By setting an errors on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared.front-end validation priority is greater than back-end validation."),component:r(6758).Z,rawText:r(14503).Z},{name:"11-instance",title:(0,m.ZP)("表单实例 \n 获取表单实例,通过表单实例去操作表单的一些方法, 包含校验, 提交等.(函数组件)","Form instance \n Get Form component instance. \n And then use the form instance to operate some methods of the form, including validate, submit, etc(Function component)"),component:r(98735).Z,rawText:r(1458).Z},{name:"12-instance-class",title:(0,m.ZP)(" \n 获取表单实例.(类组件)"," \n Get Form component instance.(Class component)"),component:r(91659).Z,rawText:r(79880).Z},{name:"13-hooks-effect",title:(0,m.ZP)(" \n useFormValueEffect 基本用法(无法读取不存在的属性)"," \n useFormValueEffect basic usage(Cannot read a property that does not exist)"),component:r(10350).Z,rawText:r(55573).Z},{name:"13-hooks-state",title:(0,m.ZP)("Hooks \n useFormValueState基本用法","Hooks \n UseFormValueState basic usage"),component:r(19973).Z,rawText:r(78520).Z},{name:"14-beforeChange",title:(0,m.ZP)("改变前回调 \n 使用beforeChange可以在改变回传到onChange中的value","beforeChange \n Use beforeChange to set the value in the change back to onChange"),component:r(41818).Z,rawText:r(11319).Z}],s=(0,i.Z)((function(){return a().createElement(l.Z,null,a().createElement(o.Z,{source:u,examples:c}))}))},67473:function(e,n,r){r.d(n,{a:function(){return t}});var t="//jsonplaceholder.typicode.com/posts"},20383:function(e,n,r){r.d(n,{Z:function(){return m}});var t=r(87363),a=r.n(t),l=r(11888),o=r(67473);function m(){var e=(0,t.useCallback)((function(e,n){console.log("onChange:",e,n)}),[]),n=(0,t.useCallback)((function(){console.log("onReset")}),[]);return a().createElement(l.l0,{onChange:e,onReset:n},a().createElement(l.l0.Item,{label:"Email",name:"email"},a().createElement(l.II,{clearable:!0,popoverProps:{placement:"left-top"}})),a().createElement(l.l0.Item,{label:"Password",name:"password"},a().createElement(l.II.Password,{type:"password"})),a().createElement(l.l0.Item,{label:"Number",name:"number"},a().createElement(l.II.Number,{width:120,max:100,min:10})),a().createElement(l.l0.Item,{label:"Age",name:"age"},a().createElement(l.II,{style:{width:100},type:"number",digits:0})),a().createElement(l.l0.Item,{label:"Favorite Color",name:"favoriteColor"},a().createElement(l.XZ.Group,{data:["red","orange","yellow","green","cyan","blue","violet"]})),a().createElement(l.l0.Item,{label:"Other Color",name:"otherColor"},a().createElement(l.Y8.Group,{data:["red","orange","yellow","green","cyan","blue","violet"]})),a().createElement(l.l0.Item,{label:"Hate Color",name:"hateColor"},a().createElement(l.Ph,{style:{width:100},clearable:!0,data:["red","orange","yellow","green","cyan","blue","violet"]})),a().createElement(l.l0.Item,{label:"CurrentColor",name:"currentColor"},a().createElement(l.zH,null)),a().createElement(l.l0.Item,{label:"Description",name:"desc"},a().createElement(l.gx,{autoSize:!0})),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null),name:"file"},a().createElement(l.gq.Image,{action:o.a,accept:"image/*",limit:3,name:"file"})),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement(l.zx,{htmlType:"submit",type:"primary"},"Submit"),a().createElement(l.zx,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"}},"Reset")))}},11906:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){return a().createElement(l.l0,{labelAlign:"right",labelWidth:200,style:{maxWidth:500}},a().createElement(l.l0.Item,{label:"Email",name:"email"},a().createElement(l.II,null)),a().createElement(l.l0.Item,{label:"Password",name:"password"},a().createElement(l.II,{type:"password"})))}},51650:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){return a().createElement(l.l0,{inline:!0,onSubmit:console.log},a().createElement(l.l0.Item,{label:"Email"},a().createElement(l.II,{name:"email"})),a().createElement(l.l0.Item,{name:"password"},a().createElement(l.II,{placeholder:"Password",type:"password"})),a().createElement(l.l0.Item,{name:"remember",style:{verticalAlign:"middle"}},a().createElement(l.XZ,null,"Remember")),a().createElement(l.zx,{htmlType:"submit",type:"primary"},"Submit"))}},75743:function(e,n,r){r.d(n,{Z:function(){return c}});var t=r(4942),a=r(87363),l=r.n(a),o=r(11888);function m(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?m(Object(r),!0).forEach((function(n){(0,t.Z)(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}var u=function(e){var n=e.value,r=void 0===n?{}:n,t=e.onChange;return l().createElement("span",null,l().createElement(o.II,{type:"number",value:r.number,onChange:function(e){t&&t(i(i({},r),{},{number:e}))},style:{width:100}}),l().createElement(o.Ph,{value:r.currency,style:{width:80,margin:"0 8px"},onChange:function(e){t&&t(i(i({},r),{},{currency:e}))},data:[{label:"RMB",value:"rmb"},{label:"Dollar",value:"dollar"}]}))};function c(){return l().createElement(o.l0,{defaultValue:{price:{number:0,currency:"rmb"}},onSubmit:console.log},l().createElement(o.l0.Item,{name:"price",label:"Price"},l().createElement(u,null)),l().createElement(o.l0.Item,{label:l().createElement(l().Fragment,null)},l().createElement(o.zx,{htmlType:"submit",type:"primary"},"Submit")))}},25001:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){return a().createElement(l.l0,{disabled:!0},a().createElement(l.l0.Item,{label:"Email",name:"email"},a().createElement(l.II,null)),a().createElement(l.l0.Item,{label:"Password",name:"password"},a().createElement(l.II,{type:"password"})),a().createElement(l.l0.Item,{label:"Age"},a().createElement(l.II,{style:{width:100},name:"age",type:"number",digits:0,defaultValue:0})),a().createElement(l.l0.Item,{label:"Favorite Color",name:"favoriteColor"},a().createElement(l.XZ.Group,{data:["red","orange","yellow","green","cyan","blue","violet"]})),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement(l.zx,{loading:!0},"Submit")))}},87047:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){return a().createElement(l.l0,{onSubmit:console.log},a().createElement(l.l0.Item,{name:"name",label:"name"},a().createElement(l.II,{clearable:!0})),a().createElement(l.l0.Item,{noStyle:!0,flow:["name"]},(function(e){return e.form.get("name")?a().createElement(l.l0.Item,{name:"mobile",label:"Mobile",key:"mobile"},a().createElement(l.II,{type:"number"})):a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement("span",null,"Enter your mobile after your name"))})),a().createElement(l.l0.Item,{noStyle:!0,flow:["name"]},(function(e){return e.form.get("name")?a().createElement(l.l0.Item,{name:"information",label:"Information(preserve)",preserve:!0},a().createElement(l.II,null)):a().createElement(a().Fragment,null,a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement("span",null,"Enter your information after your name")))})),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement(l.zx,{htmlType:"submit",type:"primary"},"Submit")))}},54118:function(e,n,r){var t=r(87363),a=r.n(t),l=r(11888);n.Z=function(){return a().createElement(l.l0,{labelWidth:"80px",onChange:console.log},a().createElement(l.l0.Item,{label:"Username"},a().createElement("div",{style:{display:"flex",alignItems:"center"}},a().createElement(l.l0.Item,{name:"username",noStyle:!0,rules:[{required:!0,message:"Username is required"}]},a().createElement(l.II,{style:{width:160},placeholder:"Please input"})),a().createElement("a",{href:"",style:{marginLeft:"10px"}},"Need Help?"))),a().createElement(l.l0.Item,{label:"Address"},a().createElement(l.II.Group,null,a().createElement(l.l0.Item,{name:"address.province",noStyle:!0,rules:[{required:!0,message:"Province is required"}]},a().createElement(l.Ph,{placeholder:"Select province",data:["Zhejiang","Jiangsu"],clearable:!0})),a().createElement(l.l0.Item,{name:"address.street",noStyle:!0,rules:[{required:!0,message:"Street is required"}]},a().createElement(l.II,{placeholder:"Input street"})))),a().createElement(l.l0.Item,{label:"BirthDate"},a().createElement(l.l0.Item,{name:"year",rules:[{required:!0,message:"Year is required"}],style:{display:"inline-block",width:"calc(50% - 8px)",marginBottom:0}},a().createElement(l.II,null)),a().createElement(l.l0.Item,{name:"month",rules:[{required:!0,message:"Month is required"}],style:{display:"inline-block",width:"calc(50% - 8px)",margin:"0 8px"}},a().createElement(l.II,{placeholder:"Input birth month"}))),a().createElement(l.l0.Item,{name:"avatar",rules:[{required:!0,message:"Avatar is required"}],label:"Avatar"},(function(e){var n=e.value,r=e.onChange,t=e.error;return a().createElement(a().Fragment,null,a().createElement(l.gq,{value:n,onChange:r,style:{width:300},beforeUpload:function(){return Promise.resolve({status:"MANUAL"})}},a().createElement(l.zx,{type:t?"danger":"default"},a().createElement(l.Ay,{name:"cloud-upload ",style:{marginRight:4}}),"Upload avatar")))})))}},45774:function(e,n,r){r.d(n,{Z:function(){return m}});var t=r(29439),a=r(87363),l=r.n(a),o=r(11888);function m(){var e=l().useState(0),n=(0,t.Z)(e,2),r=n[0],a=n[1],m=(0,o.$9)();return l().createElement(o.l0,{animation:!0,defaultValue:{name:"Ethan",friends:[{age:r,name:r}]},onChange:console.log},l().createElement(o.l0.Item,{label:"Name",name:"name"},l().createElement(o.II,{defaultValue:"Harry Potter"})),l().createElement(o.l0.Item,{label:"Friends",collectErrorInRoot:!0},l().createElement(o.l0.FieldSet,{name:"friends",rules:[m.min(1)],emptyRender:function(e){return l().createElement(o.zx,{key:"empty",onClick:function(){var n=r+1;a(n),e({age:n,name:n})}},"Add new friend")}},(function(e){var n=e.onAppend,t=e.onRemove;return l().createElement("div",{style:{display:"flex",marginBottom:4}},l().createElement(o.l0.Item,{name:"name"},l().createElement(o.II,{style:{width:180,marginInlineEnd:8},placeholder:"Name"})),l().createElement(o.l0.Item,{name:"age"},l().createElement(o.II,{style:{width:60},type:"number",title:"Friend age",placeholder:"Age"})),l().createElement("div",{style:{lineHeight:"32px"}},l().createElement("a",{style:{margin:"0 12px"},onClick:function(){var e=r+1;a(e),n({age:e,name:e})}},l().createElement(o.Ay,{name:"plus"})),l().createElement("a",{onClick:t},l().createElement(o.Ay,{name:"close"}))))}))))}},34481:function(e,n,r){r.d(n,{Z:function(){return m}});var t=r(11888),a=r(87363),l=r.n(a),o=(0,t.$9)({mandatory:function(e,n,r,t){var a=t.name,l=n.mobile,o=n.telephone;if(!l&&!o)return Promise.reject(new Error("手机、固话必须填写一项"));var m=new RegExp(/^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/);return"mobile"!==a||m.test(l)||o?Promise.resolve(!0):Promise.reject(new Error("请输入真实11位手机号码"))}}).mandatory;function m(){return l().createElement(t.l0,{labelWidth:60,labelAlign:"right"},l().createElement(t.l0.Item,{label:"姓名",name:"name",required:!0,rules:[{required:!0,message:"收货人姓名不能为空"}]},l().createElement(t.II,{autoComplete:"new-password",width:165})),l().createElement(t.l0.Item,{label:"手机",name:"mobile",rules:[o],flow:["telephone"]},l().createElement(t.II,{autoComplete:"new-password",width:165})),l().createElement(t.l0.Item,{label:"固话",name:"telephone",rules:[o],flow:["mobile"],className:"ml5"},l().createElement(t.II,{autoComplete:"new-password",width:165})),l().createElement(t.l0.Item,{label:l().createElement(l().Fragment,null)},l().createElement(t.zx,{htmlType:"submit",type:"primary"},"Submit"),l().createElement(t.zx,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"}},"Reset")))}},85843:function(e,n,r){r.d(n,{Z:function(){return u}});for(var t=r(87363),a=r.n(t),l=r(11888),o=(0,l.$9)({uploadSize:function(e){return e&&null!=e&&e[0]?e[0].blob.size>=61440?Promise.reject(new Error("The file is too large")):Promise.resolve(!0):Promise.reject(new Error("You have to upload file"))}}),m=[],i=1;i<20;i++)m.push({id:i,content:"content ".concat(i)});function u(){return a().createElement(l.l0,{onChange:console.log,onSubmit:console.log,onError:console.log},a().createElement(l.l0.Item,{name:"select",label:"Select",required:!0,rules:[{required:!0,message:"Can not be empty"}]},a().createElement(l.Ph,{placeholder:"Please select a country",data:["China","U.S.A"],clearable:!0})),a().createElement(l.l0.Item,{name:"select-multiple",label:"Select[multiple]",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.Ph,{multiple:!0,placeholder:"Please select favorite colors",data:["red","green","blur"],clearable:!0})),a().createElement(l.l0.Item,{name:"checkbox",label:"Checkbox",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.XZ,null,"Check")),a().createElement(l.l0.Item,{name:"switch",label:"Switch",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.rs,null)),a().createElement(l.l0.Item,{label:"InputNumber",required:!0},a().createElement("div",{style:{display:"flex",alignItems:"center"}},a().createElement(l.l0.Item,{name:"input-number",noStyle:!0,rules:[o.required("Can not be empty"),{max:80,min:10,type:"number",message:"It has to be between 10 and 80"}]},a().createElement(l.II.Number,{style:{width:200}})),a().createElement("span",{style:{marginLeft:"10px"}}," machines"))),a().createElement(l.l0.Item,{label:"DatePicker",name:"date-picker",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.Mt,{clearable:!0})),a().createElement(l.l0.Item,{label:"RatePicker",name:"range-picker",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.Mt.RangePicker,{clearable:!0})),a().createElement(l.l0.Item,{name:"slider",label:"Slider",required:!0,rules:[o.required("Can not be empty"),{min:10,max:80,type:"number",message:"It has to be between 10 and 80"}]},a().createElement(l.iR,null)),a().createElement(l.l0.Item,{name:"radio-group",label:"Radio.Group",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.Y8.Group,null,a().createElement(l.Y8,{value:"a"},"item 1"),a().createElement(l.Y8,{value:"b"},"item 2"),a().createElement(l.Y8,{value:"c"},"item 3"))),a().createElement(l.l0.Item,{name:"radio-button",label:"Radio.Button",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.Y8.Group,{button:!0},a().createElement(l.Y8,{value:"a"},"item 1"),a().createElement(l.Y8,{value:"b"},"item 2"),a().createElement(l.Y8,{value:"c"},"item 3"))),a().createElement(l.l0.Item,{name:"checkbox-group",label:"Checkbox.Group",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.XZ.Group,null,a().createElement(l.XZ,{value:"A",style:{lineHeight:"32px"}},"A"),a().createElement(l.XZ,{value:"B",style:{lineHeight:"32px"},disabled:!0},"B"),a().createElement(l.XZ,{value:"C",style:{lineHeight:"32px"}},"C"),a().createElement(l.XZ,{value:"D",style:{lineHeight:"32px"}},"D"),a().createElement(l.XZ,{value:"E",style:{lineHeight:"32px"}},"E"),a().createElement(l.XZ,{value:"F",style:{lineHeight:"32px"}},"F"))),a().createElement(l.l0.Item,{name:"rate",label:"Rate",rules:[o.required("Can not be empty")],required:!0},a().createElement(l.j8,{size:40,background:a().createElement(l.Ay,{name:"star"}),front:a().createElement(l.Ay,{name:"star"})})),a().createElement(l.l0.Item,{name:"transfer",label:"Transfer",rules:[o.required("Can not be empty")]},a().createElement(l.FE,{data:m,titles:["Source","Target"]})),a().createElement(l.l0.Item,{name:"upload",label:"Upload",tip:"longgggggggggggggggggggggggggggggggggg",rules:[o.uploadSize]},a().createElement(l.gq.Image,{name:"logo",beforeUpload:function(){return Promise.resolve({status:"MANUAL"})},width:250,limit:1},a().createElement("div",{style:{textAlign:"center",width:"100%",padding:20}},a().createElement(l.Ay,{style:{color:"#409dfd",fontSize:20},name:"image"}),a().createElement("br",null),"Click to upload"))),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement(l.zx,{type:"primary",htmlType:"submit"},"Submit")))}},6758:function(e,n,r){r.d(n,{Z:function(){return c}});var t=r(15861),a=r(29439),l=r(64687),o=r.n(l),m=r(87363),i=r.n(m),u=r(11888);function c(){var e=(0,m.useState)(void 0),n=(0,a.Z)(e,2),r=n[0],l=n[1],c=(0,m.useState)(!1),s=(0,a.Z)(c,2),d=s[0],p=s[1];return i().createElement(u.l0,{errors:r,disabled:d,onSubmit:(0,t.Z)(o().mark((function e(){var n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return p(!0),e.next=3,new Promise((function(e){setTimeout((function(){e({nickName:"Nicknames already exist"})}),2e3)}));case 3:n=e.sent,l(n),p(!1);case 6:case"end":return e.stop()}}),e)})))},i().createElement(u.l0.Item,{label:"NickName",name:"nickName",rules:[(0,u.$9)().required]},i().createElement(u.II,{clearable:!0,popoverProps:{placement:"left-top"}})),i().createElement(u.l0.Item,{label:i().createElement(i().Fragment,null)},i().createElement(u.zx,{htmlType:"submit",type:"primary",loading:d},"Submit"),i().createElement(u.zx,{htmlType:"reset",type:"primary",style:{marginLeft:"10px"},disabled:d},"Reset")))}},98735:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){var e=l.l0.useForm();return a().createElement(l.l0,{form:e,onSubmit:function(e){console.log("onSubmit:",e)}},a().createElement("div",{style:{margin:"20px 0"}},a().createElement(l.zx,{onClick:function(){return console.log(e.getValue())}},"get value"),a().createElement(l.zx,{onClick:function(){return e.validateForm()}},"validateForm"),a().createElement(l.zx,{onClick:function(){return e.submit()}},"submit"),a().createElement(l.zx,{onClick:function(){return e.reset()}},"reset")),a().createElement(l.l0.Item,{label:"name",name:"name",rules:[{required:!0,message:"Name can not be empty"}]},a().createElement(l.II,null)),a().createElement(l.l0.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Password can not be empty"}]},a().createElement(l.II.Password,{type:"password"})),a().createElement(l.l0.Item,{label:a().createElement(a().Fragment,null)},a().createElement(l.zx,{type:"primary",htmlType:"submit"},"Submit"),a().createElement(l.zx,{htmlType:"reset"},"Reset")))}},91659:function(e,n,r){r.d(n,{Z:function(){return p}});var t=r(15671),a=r(43144),l=r(97326),o=r(60136),m=r(82963),i=r(61120),u=r(4942),c=r(87363),s=r.n(c),d=r(11888);var p=function(e){(0,o.Z)(p,e);var n,r,c=(n=p,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=(0,i.Z)(n);if(r){var a=(0,i.Z)(this).constructor;e=Reflect.construct(t,arguments,a)}else e=t.apply(this,arguments);return(0,m.Z)(this,e)});function p(){var e;(0,t.Z)(this,p);for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return e=c.call.apply(c,[this].concat(r)),(0,u.Z)((0,l.Z)(e),"formRef",s().createRef()),e}return(0,a.Z)(p,[{key:"render",value:function(){var e=this;return s().createElement(d.l0,{ref:this.formRef,onSubmit:function(e){console.log("onSubmit:",e)}},s().createElement("div",{style:{margin:"20px 0"}},s().createElement(d.zx,{onClick:function(){return console.log(e.formRef.current.getValue())}},"get value"),s().createElement(d.zx,{onClick:function(){return e.formRef.current.validateForm()}},"validateForm"),s().createElement(d.zx,{onClick:function(){return e.formRef.current.submit()}},"submit"),s().createElement(d.zx,{onClick:function(){return e.formRef.current.reset()}},"reset")),s().createElement(d.l0.Item,{label:"name",name:"name",rules:[{required:!0,message:"Name can not be empty"}]},s().createElement(d.II,null)),s().createElement(d.l0.Item,{label:"Password",name:"password",rules:[{required:!0,message:"Password can not be empty"}]},s().createElement(d.II.Password,{type:"password"})),s().createElement(d.l0.Item,{label:s().createElement(s().Fragment,null)},s().createElement(d.zx,{type:"primary",htmlType:"submit"},"Submit"),s().createElement(d.zx,{htmlType:"reset"},"Reset")))}}]),p}(s().PureComponent)},10350:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){var e=l.l0.useForm();return l.l0.useFormValueEffect((function(e){console.log("UseFormValueEffect callback:",e)}),{form:e,deep:["name","contact.phone","address","friends"]}),a().createElement(l.l0,{form:e},a().createElement(l.l0.Item,{name:"name",label:"Name"},a().createElement(l.II,null)),a().createElement(l.l0.Item,{label:"Contact"},a().createElement("div",{style:{display:"flex"}},a().createElement(l.l0.Item,{noStyle:!0,name:"contact.phone"},a().createElement(l.II,{clearable:!0,placeholder:"phone"})),a().createElement(l.l0.Item,{noStyle:!0,name:"contact.telephone"},a().createElement(l.II,{clearable:!0,placeholder:"telephone"})))),a().createElement(l.l0.Item,{label:"Address"},a().createElement(l.l0.FieldSet,{name:"address"},a().createElement("div",{style:{display:"flex"}},a().createElement(l.l0.Item,{noStyle:!0,name:"province"},a().createElement(l.Ph,{style:{width:100},clearable:!0,data:["BeiJing","ShangHai"]})),a().createElement(l.l0.Item,{noStyle:!0,name:"street"},a().createElement(l.II,{clearable:!0}))))),a().createElement(l.l0.Item,{label:"Friends"},a().createElement(l.l0.FieldSet,{name:"friends",emptyRender:function(e){return a().createElement(l.zx,{key:"empty",onClick:function(){e({age:18,name:"Tom"})}},"Add new friend")}},(function(e){var n=e.onAppend,r=e.onRemove;return a().createElement("div",{style:{display:"flex",marginBottom:4}},a().createElement(l.l0.Item,{name:"name"},a().createElement(l.II,{style:{width:180,marginInlineEnd:8},placeholder:"Name"})),a().createElement(l.l0.Item,{name:"age"},a().createElement(l.II,{style:{width:60},type:"number",title:"Friend age",placeholder:"Age"})),a().createElement("div",{style:{lineHeight:"32px"}},a().createElement("a",{style:{margin:"0 12px"},onClick:function(){n({age:void 0,name:void 0})}},a().createElement(l.Ay,{name:"plus"})),a().createElement("a",{onClick:r},a().createElement(l.Ay,{name:"close"}))))}))))}},19973:function(e,n,r){r.d(n,{Z:function(){return m}});var t=r(29439),a=r(87363),l=r.n(a),o=r(11888);function m(){var e=o.l0.useForm(),n=o.l0.useFormValueState(e,"name"),r=(0,t.Z)(n,2),a=r[0],m=r[1];return l().createElement(l().Fragment,null,l().createElement(o.l0,{form:e,labelAlign:"top"},l().createElement(o.l0.Item,{name:"name",label:"The name controlled by the form"},l().createElement(o.II,null))),l().createElement("pre",{style:{padding:"5px",fontSize:"14px"}},"New name: ",a),l().createElement(o.II,{placeholder:"The name controlled by the hooks",onChange:m}))}},41818:function(e,n,r){r.d(n,{Z:function(){return o}});var t=r(87363),a=r.n(t),l=r(11888);function o(){return a().createElement(l.l0,null,a().createElement(l.l0.Item,{name:"money",label:"money",beforeChange:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0;if("string"==typeof e){var t=r.getValue(),a=t.unit,l="".concat(a);e=!(e=e.replace(new RegExp(l,"g"),""))||e===a||n.includes("元")&&"磅"===a||n.includes("磅")&&"元"===a?"":"".concat(e).concat(a)}return e}},a().createElement(l.II,null)),a().createElement(l.l0.Item,{name:"unit",label:"unit",defaultValue:"元"},a().createElement(l.Ph,{data:["元","磅"]})))}},36519:function(e,n,r){var t=r(11888),a=r(87363),l=r.n(a);n.Z=function(e){var n=function(n){return(0,a.useEffect)((function(){return t.gb.finish(),function(){t.gb.start()}}),[]),l().createElement(e,n)};return l().memo(n)}},37985:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- 表单内置了类似双向绑定的机制，根据FormItem的 name 属性自动下发、收集数据\r\n * en - Base\r\n *    -- The form has a two-way binding mechanism built in, automatically sending and collecting data based on the name property of the FormItem.\r\n */\r\nimport React, { useCallback } from 'react'\r\nimport { Form, Input, Checkbox, Radio, Textarea, Select, Upload, Button, ColorPicker } from 'ethan-ui'\r\nimport { EthanFile } from '@/component/Upload/type'\r\nimport { action } from 'doc/config'\r\n\r\ninterface FormValues {\r\n    email: string\r\n    password: string\r\n    number: number\r\n    file: EthanFile\r\n    age: number\r\n    favoriteColor: string[]\r\n    otherColor: string\r\n    hateColor: string\r\n    currentColor: string\r\n}\r\n\r\nexport default function App() {\r\n    const handleChange = useCallback((changeValues: Partial<FormValues>, allValues: FormValues) => {\r\n        console.log('onChange:', changeValues, allValues)\r\n    }, [])\r\n\r\n    const handleReset = useCallback(() => {\r\n        console.log('onReset')\r\n    }, [])\r\n\r\n    return (\r\n        <Form<FormValues> onChange={handleChange} onReset={handleReset}>\r\n            <Form.Item label=\"Email\" name=\"email\">\r\n                <Input clearable popoverProps={{ placement: 'left-top' }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Password\" name=\"password\">\r\n                <Input.Password type=\"password\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Number\" name=\"number\">\r\n                <Input.Number width={120} max={100} min={10} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Age\" name=\"age\">\r\n                <Input style={{ width: 100 }} type=\"number\" digits={0} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Favorite Color\" name=\"favoriteColor\">\r\n                <Checkbox.Group data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Other Color\" name=\"otherColor\">\r\n                <Radio.Group data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Hate Color\" name=\"hateColor\">\r\n                <Select\r\n                    style={{ width: 100 }}\r\n                    clearable\r\n                    data={['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"CurrentColor\" name=\"currentColor\">\r\n                <ColorPicker />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Description\" name=\"desc\">\r\n                <Textarea autoSize />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>} name=\"file\">\r\n                <Upload.Image action={action} accept=\"image/*\" limit={3} name=\"file\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType=\"submit\" type=\"primary\">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType=\"reset\" type=\"primary\" style={{ marginLeft: '10px' }}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"},37953:function(e,n){n.Z='/**\r\n * cn - 标签\r\n *    -- 通过 labelWidth 和 labelAlign 改变标签宽度和对齐方式\r\n * en - Label\r\n *    -- Set labelWidth and labelAlign to change label with and alignment.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input } from \'ethan-ui\'\r\n\r\nexport default function () {\r\n    return (\r\n        <Form labelAlign="right" labelWidth={200} style={{ maxWidth: 500 }}>\r\n            <Form.Item label="Email" name="email">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Password" name="password">\r\n                <Input type="password" />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},50084:function(e,n){n.Z='/**\r\n * cn - 水平布局\r\n *    -- 设置 inline 属性使 Form 变为水平布局\r\n * en - Inline\r\n *    -- Set the inline property to true to make the Form horizontal.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Checkbox, Button } from \'ethan-ui\'\r\n\r\nexport default function () {\r\n    return (\r\n        <Form inline onSubmit={console.log}>\r\n            <Form.Item label="Email">\r\n                <Input name="email" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="password">\r\n                <Input placeholder="Password" type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="remember" style={{ verticalAlign: \'middle\' }}>\r\n                <Checkbox>Remember</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Button htmlType="submit" type="primary">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    )\r\n}\r\n'},44097:function(e,n){n.Z="/**\r\n * cn - 自定义表单组件\r\n *    -- 提供受控的value和onChange使组件成为自定义表单组件\r\n * en - Customized Form Controls\r\n *    -- Providing controlled values and onChange makes the component a customized form component.\r\n */\r\nimport React from 'react'\r\nimport { Button, Form, Input, Select } from 'ethan-ui'\r\n\r\ninterface PriceInputProps {\r\n    value?: { number?: number; currency?: string }\r\n    onChange?: (value: { number?: number; currency?: string }) => void\r\n}\r\n\r\nconst PriceInput: React.FC<PriceInputProps> = ({ value = {}, onChange }) => {\r\n    function handleNumberChange(num) {\r\n        if (onChange) {\r\n            onChange({ ...value, number: num })\r\n        }\r\n    }\r\n\r\n    function handleCurrencyChange(cur) {\r\n        if (onChange) {\r\n            onChange({ ...value, currency: cur })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <Input type=\"number\" value={value.number} onChange={handleNumberChange} style={{ width: 100 }} />\r\n            <Select\r\n                value={value.currency}\r\n                style={{ width: 80, margin: '0 8px' }}\r\n                onChange={handleCurrencyChange}\r\n                data={[\r\n                    { label: 'RMB', value: 'rmb' },\r\n                    { label: 'Dollar', value: 'dollar' },\r\n                ]}\r\n            />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default function App() {\r\n    const defaultValue = {\r\n        price: {\r\n            number: 0,\r\n            currency: 'rmb',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Form defaultValue={defaultValue} onSubmit={console.log}>\r\n            <Form.Item name=\"price\" label=\"Price\">\r\n                <PriceInput />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType=\"submit\" type=\"primary\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"},87248:function(e,n){n.Z='/**\r\n * cn - 禁用\r\n *    -- 使用 disabled 属性使表单内支持 disabled 属性的组件禁用，通常用在表单数据加载或提交时\r\n * en - Disabled\r\n *    -- Use the disabled property to make the Form support to disable component.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Checkbox, Button } from \'ethan-ui\'\r\n\r\nexport default function () {\r\n    return (\r\n        <Form disabled>\r\n            <Form.Item label="Email" name="email">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Password" name="password">\r\n                <Input type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Age">\r\n                <Input style={{ width: 100 }} name="age" type="number" digits={0} defaultValue={0} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Favorite Color" name="favoriteColor">\r\n                <Checkbox.Group data={[\'red\', \'orange\', \'yellow\', \'green\', \'cyan\', \'blue\', \'violet\']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button loading>Submit</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},69287:function(e,n){n.Z='/**\r\n * cn - 函数Children\r\n *    -- Form.Item children 为函数时，会提供一些操作Form的参数\r\n * en - Function children\r\n *    -- When form. Item children is a function, it provides some parameters to manipulate the Form.\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    mobile: number\r\n\r\n    telephone: number\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form onSubmit={console.log}>\r\n            <Form.Item<FormValues> name="name" label="name">\r\n                <Input clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> noStyle flow={[\'name\']}>\r\n                {({ form }) => {\r\n                    const name = form.get(\'name\')\r\n\r\n                    if (!name) {\r\n                        return (\r\n                            <Form.Item label={<></>}>\r\n                                <span>Enter your mobile after your name</span>\r\n                            </Form.Item>\r\n                        )\r\n                    }\r\n\r\n                    /** FormItem内部没有对添加key值，如果存在多种可能的实例，需要显式指名Key */\r\n                    return (\r\n                        <Form.Item name="mobile" label="Mobile" key="mobile">\r\n                            <Input type="number" />\r\n                        </Form.Item>\r\n                    )\r\n                }}\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> noStyle flow={[\'name\']}>\r\n                {({ form }) => {\r\n                    const name = form.get(\'name\')\r\n\r\n                    if (!name) {\r\n                        /** 改变组件的结构，使条件语句中的实例不一样 */\r\n                        return (\r\n                            <>\r\n                                <Form.Item label={<></>}>\r\n                                    <span>Enter your information after your name</span>\r\n                                </Form.Item>\r\n                            </>\r\n                        )\r\n                    }\r\n\r\n                    return (\r\n                        <Form.Item name="information" label="Information(preserve)" preserve>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    )\r\n                }}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},10325:function(e,n){n.Z="/**\r\n * cn - 无样式\r\n *    -- 无样式的FormItem可直接展示组件，但仍然保留收集数据的能力,实现更复杂的组件\r\n * en - NoStyle\r\n *    -- FormItem without styles can directly display components, but still retain the ability to collect data and implement more complex components\r\n */\r\nimport React from 'react'\r\nimport { Button, FontAwesome, Form, Input, Select, Upload } from 'ethan-ui'\r\n\r\nconst App = () => (\r\n    <Form labelWidth=\"80px\" onChange={console.log}>\r\n        <Form.Item label=\"Username\">\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <Form.Item\r\n                    name=\"username\"\r\n                    noStyle\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Username is required',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        style={{\r\n                            width: 160,\r\n                        }}\r\n                        placeholder=\"Please input\"\r\n                    />\r\n                </Form.Item>\r\n                <a href=\"\" style={{ marginLeft: '10px' }}>\r\n                    Need Help?\r\n                </a>\r\n            </div>\r\n        </Form.Item>\r\n        <Form.Item label=\"Address\">\r\n            <Input.Group>\r\n                <Form.Item\r\n                    name=\"address.province\"\r\n                    noStyle\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Province is required',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select placeholder=\"Select province\" data={['Zhejiang', 'Jiangsu']} clearable />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address.street\"\r\n                    noStyle\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Street is required',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"Input street\" />\r\n                </Form.Item>\r\n            </Input.Group>\r\n        </Form.Item>\r\n        <Form.Item label=\"BirthDate\">\r\n            <Form.Item\r\n                name=\"year\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Year is required',\r\n                    },\r\n                ]}\r\n                style={{\r\n                    display: 'inline-block',\r\n                    width: 'calc(50% - 8px)',\r\n                    marginBottom: 0,\r\n                }}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"month\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Month is required',\r\n                    },\r\n                ]}\r\n                style={{\r\n                    display: 'inline-block',\r\n                    width: 'calc(50% - 8px)',\r\n                    margin: '0 8px',\r\n                }}\r\n            >\r\n                <Input placeholder=\"Input birth month\" />\r\n            </Form.Item>\r\n        </Form.Item>\r\n        <Form.Item\r\n            name=\"avatar\"\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: 'Avatar is required',\r\n                },\r\n            ]}\r\n            label=\"Avatar\"\r\n        >\r\n            {({ value, onChange, error }) => (\r\n                <>\r\n                    <Upload\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        style={{ width: 300 }}\r\n                        beforeUpload={() => Promise.resolve({ status: 'MANUAL' })}\r\n                    >\r\n                        <Button type={error ? 'danger' : 'default'}>\r\n                            <FontAwesome name=\"cloud-upload \" style={{ marginRight: 4 }} />\r\n                            Upload avatar\r\n                        </Button>\r\n                    </Upload>\r\n                </>\r\n            )}\r\n        </Form.Item>\r\n    </Form>\r\n)\r\n\r\nexport default App\r\n"},91067:function(e,n){n.Z='/**\r\n * cn - FieldSet\r\n *    -- FieldSet children 为函数时，根据 name 从 Form 中获取 value （类型为 array），遍历这个 value 生成一组子组件。\r\n * en - FieldSet\r\n *    -- When FieldSet\'s children is a function, takes the value (type is array) from the form by the name property, and generate a set of subcomponents.\r\n */\r\nimport React from \'react\'\r\nimport { Form, Input, Button, FontAwesome, Rule } from \'ethan-ui\'\r\n\r\nexport default function App() {\r\n    const [index, updateIndex] = React.useState(0)\r\n\r\n    const rule = Rule()\r\n\r\n    return (\r\n        <Form animation defaultValue={{ name: \'Ethan\', friends: [{ age: index, name: index }] }} onChange={console.log}>\r\n            <Form.Item label="Name" name="name">\r\n                <Input defaultValue="Harry Potter" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Friends" collectErrorInRoot>\r\n                <Form.FieldSet<{ age: number; name: number }>\r\n                    name="friends"\r\n                    rules={[rule.min(1)]}\r\n                    emptyRender={(onAppend) => (\r\n                        <Button\r\n                            key="empty"\r\n                            onClick={() => {\r\n                                const nextIndex = index + 1\r\n\r\n                                updateIndex(nextIndex)\r\n\r\n                                onAppend({ age: nextIndex, name: nextIndex })\r\n                            }}\r\n                        >\r\n                            Add new friend\r\n                        </Button>\r\n                    )}\r\n                >\r\n                    {({ onAppend, onRemove }) => (\r\n                        <div style={{ display: \'flex\', marginBottom: 4 }}>\r\n                            <Form.Item name="name">\r\n                                <Input style={{ width: 180, marginInlineEnd: 8 }} placeholder="Name" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name="age">\r\n                                <Input style={{ width: 60 }} type="number" title="Friend age" placeholder="Age" />\r\n                            </Form.Item>\r\n\r\n                            <div style={{ lineHeight: \'32px\' }}>\r\n                                <a\r\n                                    style={{ margin: \'0 12px\' }}\r\n                                    onClick={() => {\r\n                                        const nextIndex = index + 1\r\n\r\n                                        updateIndex(nextIndex)\r\n\r\n                                        onAppend({ age: nextIndex, name: nextIndex })\r\n                                    }}\r\n                                >\r\n                                    <FontAwesome name="plus" />\r\n                                </a>\r\n                                <a onClick={onRemove}>\r\n                                    <FontAwesome name="close" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},64104:function(e,n){n.Z='/**\r\n * cn - 依赖更新\r\n *    -- 设置flow值时，不仅会重新渲染FormItem，还会进行校验操作\r\n * en - Flow update\r\n *    -- When the flow value is set, the FormItem is not only re-rendered, but also validated\r\n */\r\nimport { FormItemProps } from \'@/component/Form/type\'\r\nimport { Input, Form, Rule, Button } from \'ethan-ui\'\r\nimport React from \'react\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n    mobile?: string\r\n    telephone?: string\r\n}\r\n\r\nconst { mandatory } = Rule({\r\n    mandatory(_, formValues: FormValues, callback, props: FormItemProps<FormValues>) {\r\n        const { name } = props\r\n\r\n        const { mobile, telephone } = formValues\r\n\r\n        if (!mobile && !telephone) {\r\n            return Promise.reject(new Error(\'手机、固话必须填写一项\'))\r\n        }\r\n\r\n        const mobileRegExp = new RegExp(/^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$/)\r\n\r\n        if (name === \'mobile\' && !mobileRegExp.test(mobile) && !telephone) {\r\n            return Promise.reject(new Error(\'请输入真实11位手机号码\'))\r\n        }\r\n\r\n        return Promise.resolve(true)\r\n    },\r\n})\r\n\r\nexport default function () {\r\n    return (\r\n        <Form labelWidth={60} labelAlign="right">\r\n            <Form.Item\r\n                label="姓名"\r\n                name="name"\r\n                required\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: \'收货人姓名不能为空\',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="手机" name="mobile" rules={[mandatory]} flow={[\'telephone\']}>\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n            <Form.Item label="固话" name="telephone" rules={[mandatory]} flow={[\'mobile\']} className="ml5">\r\n                <Input autoComplete="new-password" width={165} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset" type="primary" style={{ marginLeft: \'10px\' }}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},39763:function(e,n){n.Z='/**\r\n * cn - 校验\r\n *    -- 更多组件的检验\r\n * en - Validate\r\n *    -- More component validation\r\n */\r\nimport React from \'react\'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FontAwesome,\r\n    Form,\r\n    Input,\r\n    Radio,\r\n    Rate,\r\n    Rule,\r\n    Select,\r\n    Slider,\r\n    Upload,\r\n    Transfer,\r\n    Switch,\r\n    DatePicker,\r\n} from \'ethan-ui\'\r\n\r\nconst rule = Rule({\r\n    uploadSize(value) {\r\n        if (!value || !value?.[0]) return Promise.reject(new Error(\'You have to upload file\'))\r\n\r\n        const { blob } = value[0]\r\n\r\n        const { size } = blob\r\n\r\n        if (size >= 1024 * 60) return Promise.reject(new Error(\'The file is too large\'))\r\n\r\n        return Promise.resolve(true)\r\n    },\r\n})\r\n\r\nconst transferData = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    transferData.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form onChange={console.log} onSubmit={console.log} onError={console.log}>\r\n            <Form.Item name="select" label="Select" required rules={[{ required: true, message: \'Can not be empty\' }]}>\r\n                <Select placeholder="Please select a country" data={[\'China\', \'U.S.A\']} clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="select-multiple"\r\n                label="Select[multiple]"\r\n                rules={[rule.required(\'Can not be empty\')]}\r\n                required\r\n            >\r\n                <Select\r\n                    multiple\r\n                    placeholder="Please select favorite colors"\r\n                    data={[\'red\', \'green\', \'blur\']}\r\n                    clearable\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="checkbox" label="Checkbox" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <Checkbox>Check</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="switch" label="Switch" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <Switch />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="InputNumber" required>\r\n                <div style={{ display: \'flex\', alignItems: \'center\' }}>\r\n                    <Form.Item\r\n                        name="input-number"\r\n                        noStyle\r\n                        rules={[\r\n                            rule.required(\'Can not be empty\'),\r\n                            { max: 80, min: 10, type: \'number\', message: \'It has to be between 10 and 80\' },\r\n                        ]}\r\n                    >\r\n                        <Input.Number style={{ width: 200 }} />\r\n                    </Form.Item>\r\n                    <span style={{ marginLeft: \'10px\' }}> machines</span>\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Form.Item label="DatePicker" name="date-picker" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <DatePicker clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="RatePicker" name="range-picker" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <DatePicker.RangePicker clearable />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="slider"\r\n                label="Slider"\r\n                required\r\n                rules={[\r\n                    rule.required(\'Can not be empty\'),\r\n                    { min: 10, max: 80, type: \'number\', message: \'It has to be between 10 and 80\' },\r\n                ]}\r\n            >\r\n                <Slider />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="radio-group" label="Radio.Group" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <Radio.Group>\r\n                    <Radio value="a">item 1</Radio>\r\n                    <Radio value="b">item 2</Radio>\r\n                    <Radio value="c">item 3</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="radio-button" label="Radio.Button" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <Radio.Group button>\r\n                    <Radio value="a">item 1</Radio>\r\n                    <Radio value="b">item 2</Radio>\r\n                    <Radio value="c">item 3</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="checkbox-group"\r\n                label="Checkbox.Group"\r\n                rules={[rule.required(\'Can not be empty\')]}\r\n                required\r\n            >\r\n                <Checkbox.Group>\r\n                    <Checkbox value="A" style={{ lineHeight: \'32px\' }}>\r\n                        A\r\n                    </Checkbox>\r\n                    <Checkbox value="B" style={{ lineHeight: \'32px\' }} disabled>\r\n                        B\r\n                    </Checkbox>\r\n                    <Checkbox value="C" style={{ lineHeight: \'32px\' }}>\r\n                        C\r\n                    </Checkbox>\r\n                    <Checkbox value="D" style={{ lineHeight: \'32px\' }}>\r\n                        D\r\n                    </Checkbox>\r\n                    <Checkbox value="E" style={{ lineHeight: \'32px\' }}>\r\n                        E\r\n                    </Checkbox>\r\n                    <Checkbox value="F" style={{ lineHeight: \'32px\' }}>\r\n                        F\r\n                    </Checkbox>\r\n                </Checkbox.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item name="rate" label="Rate" rules={[rule.required(\'Can not be empty\')]} required>\r\n                <Rate size={40} background={<FontAwesome name="star" />} front={<FontAwesome name="star" />} />\r\n            </Form.Item>\r\n\r\n            <Form.Item name="transfer" label="Transfer" rules={[rule.required(\'Can not be empty\')]}>\r\n                <Transfer data={transferData} titles={[\'Source\', \'Target\']} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name="upload"\r\n                label="Upload"\r\n                tip="longgggggggggggggggggggggggggggggggggg"\r\n                rules={[rule.uploadSize]}\r\n            >\r\n                <Upload.Image\r\n                    name="logo"\r\n                    beforeUpload={() => Promise.resolve({ status: \'MANUAL\' })}\r\n                    width={250}\r\n                    limit={1}\r\n                >\r\n                    <div style={{ textAlign: \'center\', width: \'100%\', padding: 20 }}>\r\n                        <FontAwesome style={{ color: \'#409dfd\', fontSize: 20 }} name="image" />\r\n                        <br />\r\n                        Click to upload\r\n                    </div>\r\n                </Upload.Image>\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button type="primary" htmlType="submit">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},14503:function(e,n){n.Z='/**\r\n * cn -\r\n *    -- 通过给 Form 设置 errors，实现后端校验数据展示。在表单值被改变后，对应后端校验数据会被清空。前端校验优先级大于后端校验。\r\n * en -\r\n *    -- By setting an errors on the Form, the back-end validation data is presented. After the form value is changed, the corresponding back-end validation data is cleared.front-end validation priority is greater than back-end validation.\r\n */\r\nimport React, { useState } from \'react\'\r\nimport { Form, Input, Button, Rule } from \'ethan-ui\'\r\n\r\nexport default function App() {\r\n    const [errors, updateErrors] = useState(undefined)\r\n\r\n    const [loading, updateLoading] = useState(false)\r\n\r\n    return (\r\n        <Form\r\n            errors={errors}\r\n            disabled={loading}\r\n            onSubmit={async () => {\r\n                updateLoading(true)\r\n\r\n                const errorResults = await new Promise((resolve) => {\r\n                    setTimeout(() => {\r\n                        resolve({ nickName: \'Nicknames already exist\' })\r\n                    }, 2000)\r\n                })\r\n\r\n                updateErrors(errorResults)\r\n\r\n                updateLoading(false)\r\n            }}\r\n        >\r\n            <Form.Item label="NickName" name="nickName" rules={[Rule().required]}>\r\n                <Input clearable popoverProps={{ placement: \'left-top\' }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button htmlType="submit" type="primary" loading={loading}>\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset" type="primary" style={{ marginLeft: \'10px\' }} disabled={loading}>\r\n                    Reset\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},1458:function(e,n){n.Z='/**\r\n * cn - 表单实例\r\n *    -- 获取表单实例,通过表单实例去操作表单的一些方法, 包含校验, 提交等.(函数组件)\r\n * en - Form instance\r\n *    -- Get Form component instance.\r\n *    -- And then use the form instance to operate some methods of the form, including validate, submit, etc(Function component)\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            onSubmit={(data) => {\r\n                console.log(\'onSubmit:\', data)\r\n            }}\r\n        >\r\n            <div style={{ margin: \'20px 0\' }}>\r\n                <Button onClick={() => console.log(form.getValue())}>get value</Button>\r\n                <Button onClick={() => form.validateForm()}>validateForm</Button>\r\n                <Button onClick={() => form.submit()}>submit</Button>\r\n                <Button onClick={() => form.reset()}>reset</Button>\r\n            </div>\r\n            <Form.Item label="name" name="name" rules={[{ required: true, message: \'Name can not be empty\' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label="Password"\r\n                name="password"\r\n                rules={[{ required: true, message: \'Password can not be empty\' }]}\r\n            >\r\n                <Input.Password type="password" />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={<></>}>\r\n                <Button type="primary" htmlType="submit">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType="reset">Reset</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},79880:function(e,n){n.Z='/**\r\n * cn -\r\n *    -- 获取表单实例.(类组件)\r\n * en -\r\n *    -- Get Form component instance.(Class component)\r\n */\r\nimport React from \'react\'\r\nimport { Button, Form, Input } from \'ethan-ui\'\r\nimport { FormInstance } from \'@/component/Form/type\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default class extends React.PureComponent {\r\n    formRef = React.createRef<FormInstance<FormValues>>()\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                ref={this.formRef}\r\n                onSubmit={(data) => {\r\n                    console.log(\'onSubmit:\', data)\r\n                }}\r\n            >\r\n                <div style={{ margin: \'20px 0\' }}>\r\n                    <Button onClick={() => console.log(this.formRef.current.getValue())}>get value</Button>\r\n                    <Button onClick={() => this.formRef.current.validateForm()}>validateForm</Button>\r\n                    <Button onClick={() => this.formRef.current.submit()}>submit</Button>\r\n                    <Button onClick={() => this.formRef.current.reset()}>reset</Button>\r\n                </div>\r\n                <Form.Item label="name" name="name" rules={[{ required: true, message: \'Name can not be empty\' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label="Password"\r\n                    name="password"\r\n                    rules={[{ required: true, message: \'Password can not be empty\' }]}\r\n                >\r\n                    <Input.Password type="password" />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={<></>}>\r\n                    <Button type="primary" htmlType="submit">\r\n                        Submit\r\n                    </Button>\r\n\r\n                    <Button htmlType="reset">Reset</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n'},55573:function(e,n){n.Z='/**\r\n * cn -\r\n *    -- useFormValueEffect 基本用法(无法读取不存在的属性)\r\n * en -\r\n *    -- useFormValueEffect basic usage(Cannot read a property that does not exist)\r\n */\r\nimport React from \'react\'\r\nimport { Button, FontAwesome, Form, Input, Select } from \'ethan-ui\'\r\n\r\ninterface FormValues {\r\n    name: string\r\n    contact: {\r\n        phone: string\r\n        telephone: string\r\n    }\r\n    address: string\r\n    friends: any[]\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    Form.useFormValueEffect(\r\n        (v) => {\r\n            console.log(\'UseFormValueEffect callback:\', v)\r\n        },\r\n        { form, deep: [\'name\', \'contact.phone\', \'address\', \'friends\'] }\r\n    )\r\n\r\n    return (\r\n        <Form form={form}>\r\n            <Form.Item name="name" label="Name">\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Contact">\r\n                <div style={{ display: \'flex\' }}>\r\n                    <Form.Item noStyle name="contact.phone">\r\n                        <Input clearable placeholder="phone" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item noStyle name="contact.telephone">\r\n                        <Input clearable placeholder="telephone" />\r\n                    </Form.Item>\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Address">\r\n                <Form.FieldSet name="address">\r\n                    <div style={{ display: \'flex\' }}>\r\n                        <Form.Item noStyle name="province">\r\n                            <Select style={{ width: 100 }} clearable data={[\'BeiJing\', \'ShangHai\']} />\r\n                        </Form.Item>\r\n                        <Form.Item noStyle name="street">\r\n                            <Input clearable />\r\n                        </Form.Item>\r\n                    </div>\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n\r\n            <Form.Item label="Friends">\r\n                <Form.FieldSet\r\n                    name="friends"\r\n                    emptyRender={(onAppend) => (\r\n                        <Button\r\n                            key="empty"\r\n                            onClick={() => {\r\n                                onAppend({ age: 18, name: \'Tom\' })\r\n                            }}\r\n                        >\r\n                            Add new friend\r\n                        </Button>\r\n                    )}\r\n                >\r\n                    {({ onAppend, onRemove }) => (\r\n                        <div style={{ display: \'flex\', marginBottom: 4 }}>\r\n                            <Form.Item name="name">\r\n                                <Input style={{ width: 180, marginInlineEnd: 8 }} placeholder="Name" />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item name="age">\r\n                                <Input style={{ width: 60 }} type="number" title="Friend age" placeholder="Age" />\r\n                            </Form.Item>\r\n\r\n                            <div style={{ lineHeight: \'32px\' }}>\r\n                                <a\r\n                                    style={{ margin: \'0 12px\' }}\r\n                                    onClick={() => {\r\n                                        onAppend({\r\n                                            age: undefined,\r\n                                            name: undefined,\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <FontAwesome name="plus" />\r\n                                </a>\r\n                                <a onClick={onRemove}>\r\n                                    <FontAwesome name="close" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Form.FieldSet>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n'},78520:function(e,n){n.Z="/**\r\n * cn - Hooks\r\n *    -- useFormValueState基本用法\r\n * en - Hooks\r\n *    -- UseFormValueState basic usage\r\n */\r\nimport React from 'react'\r\nimport { Form, Input } from 'ethan-ui'\r\n\r\ninterface FormValues {\r\n    name: string\r\n}\r\n\r\nexport default function App() {\r\n    const form = Form.useForm<FormValues>()\r\n\r\n    const [name, updateName] = Form.useFormValueState(form, 'name')\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} labelAlign=\"top\">\r\n                <Form.Item name=\"name\" label=\"The name controlled by the form\">\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n\r\n            <pre style={{ padding: '5px', fontSize: '14px' }}>New name: {name}</pre>\r\n\r\n            <Input placeholder=\"The name controlled by the hooks\" onChange={updateName} />\r\n        </>\r\n    )\r\n}\r\n"},11319:function(e,n){n.Z="/**\r\n * cn - 改变前回调\r\n *    -- 使用beforeChange可以在改变回传到onChange中的value\r\n * en - beforeChange\r\n *    -- Use beforeChange to set the value in the change back to onChange\r\n */\r\nimport React from 'react'\r\nimport { Form, Input, Select } from 'ethan-ui'\r\n\r\ninterface FormValues {\r\n    money: string\r\n\r\n    unit: string\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <Form>\r\n            <Form.Item<FormValues>\r\n                name=\"money\"\r\n                label=\"money\"\r\n                beforeChange={(value, prevValue = '', form) => {\r\n                    if (typeof value === 'string') {\r\n                        const { unit } = form.getValue()\r\n\r\n                        const regExpStr = `${unit}`\r\n\r\n                        value = value.replace(new RegExp(regExpStr, 'g'), '')\r\n\r\n                        if (\r\n                            !value ||\r\n                            value === unit ||\r\n                            (prevValue.includes('元') && unit === '磅') ||\r\n                            (prevValue.includes('磅') && unit === '元')\r\n                        ) {\r\n                            value = ''\r\n                        } else {\r\n                            value = `${value}${unit}`\r\n                        }\r\n                    }\r\n\r\n                    return value\r\n                }}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FormValues> name=\"unit\" label=\"unit\" defaultValue=\"元\">\r\n                <Select data={['元', '磅']} />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n"}}]);