"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[7446],{75722:function(e,n,t){t.d(n,{Z:function(){return S}});var r=t(87462),a=t(29439),o=t(93433),d=t(87363),i=t.n(d),l=t(92242),c=t.n(l),s=t(73727),u=t(22770),f=t(62625),h=t(94184),p=t.n(h),m=t(15660),g=t.n(m),y=(t(62356),function(e){var n=e.language,t=void 0===n?"lang-jsx":n,r=e.value,a=(0,d.useRef)(null);return(0,d.useEffect)((function(){g().highlightElement(a.current,!1)}),[]),i().createElement("pre",{ref:a,className:p()(t,(0,u.vf)("pre"))},i().createElement("code",null,r))}),v=t(84506),x=t(11888),Z=t(91391),E=function(e){var n=e.component,t=e.id,r=e.rawText,o=void 0===r?"":r,l=e.title,c=(0,d.useState)(!1),s=(0,a.Z)(c,2),f=s[0],h=s[1],p=(0,d.useRef)((0,d.createElement)(n)).current,m=o.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),g=l.split("\n"),E=(0,v.Z)(g),b=E[0],k=E.slice(1),I=function(){h(!f)};return i().createElement(i().Fragment,null,b&&i().createElement("h3",{id:t},b),i().createElement(x.Zr,{placeholder:i().createElement("div",{className:(0,u.vf)("placeholder")},i().createElement(x.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},i().createElement("div",{className:(0,u.vf)("_",f&&"showcode")},i().createElement("div",{className:(0,u.vf)("body")},p),l.length>0&&i().createElement("div",{className:(0,u.vf)("desc")},k.map((function(e,n){return i().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),i().createElement("a",{className:(0,u.vf)("toggle"),onClick:I},i().createElement(Z.Z,{name:f?"code-close":"code"}))),i().createElement(x.y_.Transition,{visible:f,transitionTypes:["collapse","fade"]},i().createElement(y,{value:m}),i().createElement("a",{className:(0,u.vf)("toggle"),onClick:I},i().createElement(Z.Z,{name:f?"code-close":"code"}))))))},b=i().memo(E),k=function(e){var n=e.children,t=(0,o.Z)(n[1].props.children);try{t.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return i().createElement("div",{style:{overflow:"auto"}},i().createElement("table",{className:"doc-api-table"},n[0],i().cloneElement(n[1],{children:t})))},I=t(35087),C=function(e){var n=[],t=(0,d.useContext)(I.Z).setHeadings,l=e.source,h=e.examples;return i().useEffect((function(){t(n)}),[]),i().createElement(c(),{className:(0,u.EX)("_"),source:l,renderers:{code:y,heading:function(e){var t=e.level,r=e.children,a="h".concat(t),o="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(t,r[0]));return 2!==t&&3!==t||n.push({id:o,level:t,children:r}),i().createElement(a,{id:o},r)},table:k,html:function(e){return"<example />"===e.value?i().createElement(i().Fragment,null,function(){if(!h)return i().createElement("div",null);var e=(0,f.ZP)("示例","Example"),t="heading-example-h";return n.push({id:t,level:2,children:[e]}),[i().createElement("h2",{key:"h",id:t},e)].concat((0,o.Z)(h.map((function(e){var t="heading-".concat(e.name),o=e.title.split("\n"),d=(0,a.Z)(o,1)[0];return n.push({id:t,level:3,children:[d]}),i().createElement(b,(0,r.Z)({key:t,id:t},e))}))))}()):"<br>"===e.value||"<br />"===e.value?i().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?i().createElement("a",{href:e.href,target:n},e.children):i().createElement(s.rU,{to:e.href},e.children)}}})},S=i().memo(C)},35087:function(e,n,t){var r=(0,t(87363).createContext)(void 0);n.Z=r},88981:function(e,n,t){var r=t(29439),a=t(87363),o=t.n(a),d=t(91291),i=t(22770),l=t(11888),c=t(75964),s=t(12025),u=t(35087),f=function(e){var n=e.children,t=(0,a.useState)(""),f=(0,r.Z)(t,2),h=f[0],p=f[1],m=(0,a.useState)([]),g=(0,r.Z)(m,2),y=g[0],v=g[1],x=(0,d.Z)().hash,Z=(0,c.Z)((function(e){s.Z.push("".concat(s.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),E=(0,c.Z)((function(){var e=document.documentElement.scrollTop,n=y.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var t=n[0].id;n.forEach((function(n){var r=document.querySelector("#".concat(n.id));(null==r?void 0:r.offsetTop)<=e&&(t=n.id)})),p(t)}}));(0,a.useEffect)((function(){if(E(),x){var e=document.querySelector(x);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",E),function(){document.removeEventListener("scroll",E)}}),[y]);var b=o().useMemo((function(){return{setHeadings:v}}),[]);return o().createElement("div",{className:(0,i.EH)("_")},o().createElement(u.Z.Provider,{value:b},n),o().createElement(l.Le,{className:(0,i.EH)("sticky"),top:50},o().createElement("div",{className:(0,i.EH)("nav")},y.map((function(e,n){var t=e.children.filter((function(e){return"string"==typeof e}));return o().createElement("a",{key:n,className:(0,i.EH)("level-".concat(e.level),h===e.id&&"active"),onClick:Z.bind(null,e.id)},t)})))))};n.Z=o().memo(f)},18669:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var r=t(87363),a=t.n(r),o=t(88981),d=t(75722),i=t(62625),l=t(36519),c=(0,i.ZP)("# Tree *树形选择*\r\n\r\n## \r\n\r\n\r\n\r\n<example />\r\n\r\n## API\r\n\r\n\r\n### Tree\r\n\r\n| 属性 | 类型 | 默认值 | 说明 |\r\n| --- | --- | --- | --- |\r\n| className | string | 无 | 扩展className |\r\n| onChange | (value: string[]) => void | 无 | 设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关 |\r\n| data | object[] | [] | 数据，子节点为children，如果 children 值为 null 或 长度为 0 时，视为叶子节点 |\r\n| defaultExpanded | string[] | 无 | 默认展开的节点 key（非受控） |\r\n| disabled | (data: any) => boolean \\| boolean | false | 显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用 |\r\n| expanded | string[] | 无 | 展开的节点 key （受控） |\r\n| keygen | ((data: any, parentKey: string) => string) \\| string | 必填 | 生成key的辅助方法<br />为函数时，使用此函数返回值<br />为string时，使用这个string对应的数据值。如 'id'，相当于 (d) => d.id |\r\n| line | boolean | true | 是否显示连接线 |\r\n| loader | (key: string) => void | 无 | 设置loader属性后，未定义children的节点视为动态加载节点，点击展开触发 loader事件，children 为 null 或者长度为 0 视为叶子节点 |\r\n| mode | 0 \\| 1 \\| 2 \\| 3 \\| 4 | 1 | 选中值模式<br />0: 只返回完全选中的节点，包含父节点<br />1: 返回全部选中的节点和半选中的父节点<br />2: 只返回选中的子节点<br />3: 如果父节点选中，只返回父节点 |\r\n| onExpand | (value: string[]) => void | 无 | 节点展开回调，参数为当前展开节点 key 数组 |\r\n| renderItem | (data: object) => ReactNode | 必填 | 为 string 时，返回 d\\[string]<br />为 function 时，返回函数结果 |\r\n| defaultValue | string[] | 无 | 默认选中的 key （非受控） | \r\n| value | string[] | 无 | 选中的 key （受控） | \r\n| onDrop | (data: object, key: string, targetKey: string, position: number) => void | 无 | 设置 onDrop 属性时，为可拖动状态<br />data: 拖动后重新排序的完整数据<br />key: 拖动的节点key<br />targetKey: 目标节点 key<br />position: 在目标节点的位置，以 0 开始 | \r\n| defaultExpandAll | boolean | false | 默认展开所有节点 | \r\n| childrenKey | string | 'children' | 指定子数据的属性名 |\r\n| expandIcons | \\[ReactNode, ReactNode] | 无 | 自定义展开/收起按钮 |\r\n| dragImageStyle | object | 无 | 拖拽图片的样式 |\r\n| leafClass | (data: object) => string \\| string | 无 | 叶子节点的 class, 函数的参数为该条叶子节点数据 |\r\n| dragHoverExpand | boolean | false | 拖拽时自动展开含有子节点的节点 |\r\n| doubleClickExpand | boolean | false | 双击是否展开节点 |\r\n| onClick | (data: object) => void | 无 | 节点点击事件 |\r\n| iconClass | string | 无 | 展开/收起按钮的类名 |\r\n| nodeClass | string \\| ((data: any) => string) | 无 | 节点的class，如果是函数，参数为该节点数据 |\r\n| dragImageSelector | (data: object) => string \\| string | 无 | 定义拖拽图片的选择器 |\r\n\r\n\r\n### Tree.Directory\r\n\r\n**Tree.Directory组件与Tree的Props一致，但不包含下面的Props**\r\n\r\n* mode\r\n* onDrop\r\n* onChange\r\n* dragImageSelector\r\n\r\n\r\n","# Tree\r\n\r\n##\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| className | string | - | Extend className |\r\n| data | object[] | [] | data. The child node is children. If the children value is null or its length is 0, it is render as a leaf node. |\r\n| defaultExpanded | string[] | - | Default expanded node key. |\r\n| disabled | (data: any) => boolean \\| boolean | false | When it is true, all nodes disable the selection; when it is a function, it determines whether it is disabled according to the return result of the function. |\r\n| expanded | string[] | - | Expanded node key (controlled) |\r\n| keygen | ((data: any, parentKey: string) => string) \\| string | required | Auxiliary method for generating key. <br />When it is a function, use the return value of this function. <br /> When it is a string, use the data value corresponding to this string. For example, 'id' is the same thing as (d) => d.id. |\r\n| line | boolean | true | Whether to display the connection line. |\r\n| loader | (key: string) => void | - | If the loader attribute is a function, the node with no children is regarded as dynamically loaded node. Click expanded button to trigger the loader event. The children property is null or its length is 0 will be regarded as a leaf node. |\r\n| mode | 0 \\| 1 \\| 2 \\| 3 \\| 4 | 1 | mode <br />0: Returns only the fully selected node including the parent node. <br />1: Returns all selected nodes and semi-selected nodes. <br />2: Return only the selected child nodes. <br />3: If the parent node is full selected, only return the parent node. |\r\n| onChange | (value: string[]) => void | - | When the onChange property is set, the selection box is displayed. The parameter is the current selected value, which is related to the mode property. |\r\n| onExpand |  (value: string[]) => void | - | The callback function for expanding the node. The parameter is the key array of the currently expanded nodes. |\r\n| renderItem | (data: object) => ReactNode | required | When it is a string, return d\\[string].<br /> When it is a function, return the result of this function. |\r\n| defaultValue | string[] | - | Default selected key (not controlled) | \r\n| value | string[] | - | Selected key (controlled) |\r\n| onDrop | (data: object, key: string, targetKey: string, position: number) => void | - | It is draggable when setting the onDrop property. <br />data: Full data after dragging.<br />key: the key of dragged node<br />targetKey: the key of target node<br />position: The position of the target node. start at 0. | \r\n| defaultExpandAll | boolean | false | default expand all nodes | \r\n| childrenKey | string | 'children' | the key of the children data name | \r\n| expandIcons | \\[ReactNode, ReactNode] | none | custom expand/collapse button |\r\n| dragImageStyle | object | - | the style of drag Image |\r\n| leafClass | (data: object) => string \\| string | - | the class of lead, the params of function is data |\r\n| dragHoverExpand | boolean | false | auto expand the node when drag over |\r\n| doubleClickExpand | boolean | false | expand node while double click |\r\n| onClick | (data: object) => void | none | node click |\r\n| iconClass | string | - | expand/collapse button's class |\r\n| nodeClass | string \\| ((data: any) => string) | - | The class of the node, if it is a function, the parameter is the node data. |\r\n| dragImageSelector | (data: object) => string \\| string | - | the selector of drag image |\r\n\r\n### Tree.Directory\r\n\r\n**The tree.directory component is identical to the Props of the Tree, but does not contain the Props below**\r\n\r\n* mode\r\n* onDrop\r\n* onChange\r\n* dragImageSelector"),s=[{name:"01-base",title:(0,i.ZP)("基本用法 \n 基础的 Tree 用法","Base \n Basic usage of Tree"),component:t(99962).Z,rawText:t(12175).Z},{name:"02-icon",title:(0,i.ZP)("图标 \n 在 renderItem 中根据状态展示不同的图标","Icons \n Display different icon in the renderItem."),component:t(28304).Z,rawText:t(429).Z},{name:"03-directory",title:(0,i.ZP)("目录 \n 目录模式","Directory \n Use Tree.Directory."),component:t(26306).Z,rawText:t(37363).Z},{name:"04-noline",title:(0,i.ZP)("无连接线 \n 设置 line 为 false，隐藏连接线","Line \n Set the line property to false to hid the connecting line."),component:t(70477).Z,rawText:t(79791).Z},{name:"05-expanded",title:(0,i.ZP)("控制展开 \n 受控的展开（此示例数据量太大，第一次全部展开会比较慢）","Expanded \n Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)"),component:t(25733).Z,rawText:t(65857).Z},{name:"06-change",title:(0,i.ZP)("可选择 \n 选中值取值提供了 4 种模式 \n 0: 只返回完全选中的节点，包含父节点 \n 1: 返回全部选中的节点和半选中的父节点 \n 2: 只返回选中的子节点 \n 3: 如果父节点选中，只返回父节点","onChange \n Selected values provide 4 modes \n 0: Return only the fully selected node, including the parent node. \n 1: Return the fully selected nodes and semi-selected parent nodes. \n 2: Return only the selected child node. \n 3: Return only the parent node, if the parent node is selected."),component:t(3297).Z,rawText:t(11567).Z},{name:"07-disabled",title:(0,i.ZP)("禁用 \n disabled 为函数时，根据返回结果禁用节点，同时禁用子节点 \n disabled 为 true 时，禁用全部节点","disabled \n When the disabled property is a function, disable the node and its child nodes according to the returned result. \n When the disabled property is true, disable all nodes."),component:t(26269).Z,rawText:t(11972).Z},{name:"08-drag",title:(0,i.ZP)("拖动 \n 设置 onDrop 属性可以拖动节点","Drag \n Set the onDrop property to drag nodes."),component:t(85455).Z,rawText:t(49919).Z},{name:"08-styledrag",title:(0,i.ZP)("设置拖动样式 \n 可以通过 dragImageSelector, dragImageStyle, dragHoverExpand定义一些拖动的设置","Set the drag style \n Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand"),component:t(49744).Z,rawText:t(37151).Z},{name:"09-lazyload",title:(0,i.ZP)("动态加载 \n 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数","Lazy load \n Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded."),component:t(43057).Z,rawText:t(10537).Z}],u=(0,l.Z)((function(){return a().createElement(o.Z,null,a().createElement(d.Z,{source:c,examples:s}))}))},44878:function(e,n,t){t.d(n,{$9:function(){return d},Ln:function(){return s}});var r=t(93433),a=t(53897),o=t(27055),d=[],i=[],l=function e(n,t,d,i,l,c){var s=d.join("-"),u=(0,o.Pz)(l,0===n?1:0),f={id:s,text:s};return u>0&&n<i&&(f.children=(0,a.w6)(u).map((function(t){return e(n+1,0,[].concat((0,r.Z)(d),[t]),i,l,c)}))),c&&c.push(s),f},c=(0,a.w6)(4).map((function(e){return l(0,0,[e],10,5,d)})),s=(0,a.w6)(20).map((function(e){return l(0,0,[e],4,10)}));(0,a.w6)(3).map((function(e){return l(0,0,[e],2,3,i)})),n.ZP=c},99962:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),a=t.n(r),o=t(11888),d=[{id:"1",text:"1",children:[{id:"1-1",text:"1-1",children:[{id:"1-1-1",text:"1-1-1"},{id:"1-1-2",text:"1-1-2"}]},{id:"1-2",text:"1-2"}]},{id:"2",text:"2",children:[{id:"2-1",text:"2-1"},{id:"2-2",text:"2-2"}]},{id:"3",text:"3",children:[{id:"3-1",text:"3-1"}]},{id:"4",text:"4",children:[{id:"4-1",text:"4-1"}]},{id:"5",text:"5",children:[{id:"5-1",text:"5-1"}]}];function i(){return a().createElement(o.mp,{data:d,keygen:"id",defaultExpanded:["2"],renderItem:function(e){return"node ".concat(e.text)}})}},28304:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),a=t.n(r),o=t(11888),d=t(44878);function i(){return a().createElement(o.mp,{data:d.ZP,keygen:"id",renderItem:"text",doubleClickExpand:!0,expandIcons:[a().createElement(o.Ay,{name:"angle-right",key:"angle-right",style:{fontSize:"16px",color:"#adb5bd"}}),a().createElement(o.Ay,{name:"angle-down",key:"angle-down",style:{fontSize:"16px",color:"#adb5bd"}})]})}},26306:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),a=t.n(r),o=t(11888),d=t(44878);function i(){return a().createElement(o.mp.Directory,{data:d.ZP,keygen:"id",renderItem:function(e,n){var t;return t=e.children&&0!==e.children.length?n?a().createElement(o.Ay,{name:"folder-open",style:{color:"#ffd666"}}):a().createElement(o.Ay,{name:"folder",style:{color:"#ffd666"}}):a().createElement(o.Ay,{name:"file-text-o"}),a().createElement("span",{style:{fontSize:"16px"}},t," ",e.text)},doubleClickExpand:!0,expandIcons:[a().createElement(o.Ay,{name:"angle-right",key:"angle-right",style:{fontSize:"16px",color:"#adb5bd"}}),a().createElement(o.Ay,{name:"angle-down",key:"angle-down",style:{fontSize:"16px",color:"#adb5bd"}})]})}},70477:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(87363),a=t.n(r),o=t(11888),d=t(44878);function i(){return a().createElement(o.mp,{data:d.ZP,defaultExpanded:["1","2"],line:!1,keygen:"id",renderItem:function(e){return"node ".concat(e.id)}})}},25733:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(93433),a=t(15671),o=t(43144),d=t(97326),i=t(60136),l=t(82963),c=t(61120),s=t(4942),u=t(87363),f=t.n(u),h=t(11888),p=t(44878);var m=function(e){(0,i.Z)(m,e);var n,t,u=(n=m,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,c.Z)(n);if(t){var a=(0,c.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,l.Z)(this,e)});function m(e){var n;return(0,a.Z)(this,m),n=u.call(this,e),(0,s.Z)((0,d.Z)(n),"handleExpand",(function(e){n.setState({expanded:e})})),(0,s.Z)((0,d.Z)(n),"renderItem",(function(e){return"node ".concat(e.id)})),n.state={expanded:["1"]},n.collapseAll=n.handleExpand.bind((0,d.Z)(n),[]),n.expandAll=n.handleExpand.bind((0,d.Z)(n),(0,r.Z)(p.$9)),n}return(0,o.Z)(m,[{key:"render",value:function(){return f().createElement("div",null,f().createElement("div",{style:{marginBottom:12}},f().createElement(h.zx,{onClick:this.expandAll},"Expand all"),f().createElement(h.zx,{onClick:this.collapseAll},"Collapse all")),f().createElement(h.mp,{data:p.ZP,keygen:"id",line:!1,expanded:this.state.expanded,onExpand:this.handleExpand,renderItem:this.renderItem}))}}]),m}(u.Component)},3297:function(e,n,t){t.d(n,{Z:function(){return v}});var r=t(15671),a=t(43144),o=t(97326),d=t(60136),i=t(82963),l=t(61120),c=t(4942),s=t(29439),u=t(87363),f=t.n(u),h=t(11888),p=t(44878);var m={position:"absolute",right:30,top:100,bottom:40,width:240,overflow:"auto",background:"#f2f2f2",padding:10,zIndex:100},g=[{value:0,text:"mode=0 (full)"},{value:1,text:"mode=1 (half)"},{value:2,text:"mode=2 (child only)"},{value:3,text:"mode=3 (shallow)"}];function y(e,n){var t=(0,s.Z)(e,1)[0];t&&(n.push(t.id),t.children&&y(t.children,n))}var v=function(e){(0,d.Z)(u,e);var n,t,s=(n=u,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,l.Z)(n);if(t){var a=(0,l.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,i.Z)(this,e)});function u(e){var n;(0,r.Z)(this,u),n=s.call(this,e),(0,c.Z)((0,o.Z)(n),"handleChange",(function(e){n.setState({value:e})})),(0,c.Z)((0,o.Z)(n),"handleModeChange",(function(e){n.setState({mode:e,value:[]})})),(0,c.Z)((0,o.Z)(n),"renderItem",(function(e){return"node ".concat(e.id)}));var t=[];return y(p.ZP,t),n.state={mode:1,value:t},n}return(0,a.Z)(u,[{key:"render",value:function(){var e=this.state,n=e.mode,t=e.value;return f().createElement("div",null,f().createElement(h.Y8.Group,{keygen:"value",value:n,format:"value",onChange:this.handleModeChange,data:g,labelKey:"text"}),f().createElement("br",null),f().createElement(h.mp,{data:p.ZP,defaultExpanded:["0","2"],keygen:"id",mode:n,onChange:this.handleChange,renderItem:this.renderItem,value:t}),f().createElement("div",{style:m},"Current select value:",f().createElement("pre",{style:{background:"#f2f2f2"}},JSON.stringify(t,null,2))))}}]),u}(u.Component)},26269:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(15671),a=t(43144),o=t(97326),d=t(60136),i=t(82963),l=t(61120),c=t(4942),s=t(87363),u=t.n(s),f=t(11888),h=t(44878);var p=function(e){(0,d.Z)(p,e);var n,t,s=(n=p,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,l.Z)(n);if(t){var a=(0,l.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,i.Z)(this,e)});function p(){var e;(0,r.Z)(this,p);for(var n=arguments.length,t=new Array(n),a=0;a<n;a++)t[a]=arguments[a];return e=s.call.apply(s,[this].concat(t)),(0,c.Z)((0,o.Z)(e),"handleChange",(function(e){console.log(e)})),(0,c.Z)((0,o.Z)(e),"isDisabled",(function(e){return"1-0"===e.id})),(0,c.Z)((0,o.Z)(e),"renderItem",(function(e){return"node ".concat(e.id)})),e}return(0,a.Z)(p,[{key:"render",value:function(){return u().createElement(f.mp,{data:h.ZP,defaultExpanded:["1","2"],disabled:this.isDisabled,keygen:"id",onChange:this.handleChange,renderItem:this.renderItem})}}]),p}(s.Component)},85455:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(15671),a=t(43144),o=t(97326),d=t(60136),i=t(82963),l=t(61120),c=t(4942),s=t(87363),u=t.n(s),f=t(11888),h=t(44878);var p=function(e){(0,d.Z)(p,e);var n,t,s=(n=p,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,l.Z)(n);if(t){var a=(0,l.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,i.Z)(this,e)});function p(e){var n;return(0,r.Z)(this,p),n=s.call(this,e),(0,c.Z)((0,o.Z)(n),"handleDrop",(function(e,t,r,a){console.log(e,t,r,a),n.setState({data:e})})),(0,c.Z)((0,o.Z)(n),"renderItem",(function(e){return u().createElement("div",null,u().createElement("span",null,"node "),u().createElement("span",{id:"node-id-".concat(e.id)},e.text))})),n.state={data:h.ZP},n.defaultExpanded=["1"],n}return(0,a.Z)(p,[{key:"render",value:function(){return u().createElement(f.mp,{data:this.state.data,keygen:"id",defaultExpanded:this.defaultExpanded,onDrop:this.handleDrop,renderItem:this.renderItem})}}]),p}(s.Component)},49744:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(15671),a=t(43144),o=t(97326),d=t(60136),i=t(82963),l=t(61120),c=t(4942),s=t(87363),u=t.n(s),f=t(11888),h=t(44878);var p=function(e){(0,d.Z)(p,e);var n,t,s=(n=p,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,l.Z)(n);if(t){var a=(0,l.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,i.Z)(this,e)});function p(e){var n;return(0,r.Z)(this,p),n=s.call(this,e),(0,c.Z)((0,o.Z)(n),"handleDrop",(function(e,t,r,a){console.log(e,t,r,a),n.setState({data:e})})),(0,c.Z)((0,o.Z)(n),"renderItem",(function(e){return u().createElement("div",null,u().createElement("span",null,"node "),u().createElement("span",{id:"node-id-".concat(e.id)},e.text))})),n.state={data:h.ZP},n.defaultExpanded=["1"],n}return(0,a.Z)(p,[{key:"render",value:function(){return u().createElement(f.mp,{data:this.state.data,keygen:"id",defaultExpanded:this.defaultExpanded,onDrop:this.handleDrop,dragImageStyle:{color:"red"},renderItem:this.renderItem,dragImageSelector:function(e){return"#node-id-".concat(e.id)},dragHoverExpand:!0})}}]),p}(s.Component)},43057:function(e,n,t){t.d(n,{Z:function(){return g}});var r=t(93433),a=t(15671),o=t(43144),d=t(97326),i=t(60136),l=t(82963),c=t(61120),s=t(4942),u=t(87363),f=t.n(u),h=t(18172),p=t(11888);var m=["0","1","2","3","4"].map((function(e){return{id:e}})),g=function(e){(0,i.Z)(g,e);var n,t,u=(n=g,t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,c.Z)(n);if(t){var a=(0,c.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,l.Z)(this,e)});function g(e){var n;return(0,a.Z)(this,g),n=u.call(this,e),(0,s.Z)((0,d.Z)(n),"loader",(function(e){var t=e.split(",");setTimeout((function(){n.setState((0,h.ZP)((function(e){var n=e.data;t.forEach((function(e,r){n=n.find((function(n){return n.id===e})),r<t.length-1&&(n=n.children)})),n.children=(0,r.Z)(Array.from({length:Math.round(4*Math.random())},(function(e,n){return n})).map((function(e){return{id:"".concat(n.id,"-").concat(e)}})))})))}),500)})),(0,s.Z)((0,d.Z)(n),"keyGenerator",(function(e,n){return"".concat(n,",").concat(e.id).replace(/^,/,"")})),(0,s.Z)((0,d.Z)(n),"handleChange",(function(e){return n.setState({value:e})})),(0,s.Z)((0,d.Z)(n),"renderItem",(function(e){return"node ".concat(e.id)})),n.state={data:m,value:[]},n}return(0,o.Z)(g,[{key:"render",value:function(){return f().createElement(p.mp,{data:this.state.data,keygen:this.keyGenerator,loader:this.loader,renderItem:this.renderItem,onChange:this.handleChange,value:this.state.value})}}]),g}(u.Component)},36519:function(e,n,t){var r=t(11888),a=t(87363),o=t.n(a);n.Z=function(e){var n=function(n){return(0,a.useEffect)((function(){return r.gb.finish(),function(){r.gb.start()}}),[]),o().createElement(e,n)};return o().memo(n)}},27055:function(e,n,t){t.d(n,{J_:function(){return l},Pz:function(){return a},TP:function(){return i},TV:function(){return s},ei:function(){return c},py:function(){return o}}),t(53897);var r=t(49546);function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:65555,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;"string"==typeof e&&(e=parseInt(e,10)),"string"==typeof n&&(n=parseInt(n,10));var r=Math.random()*(e-n)+n;return parseFloat(r.toFixed(t),0)}function o(){return Math.round(a.apply(void 0,arguments))}function d(e){return Math.ceil(Math.random()*e)}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"yyyy-MM-dd",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e10,t=Date.now()-d(n);return(0,r.Z)(t,e)}function l(e){return e[Math.floor(Math.random()*e.length)]}function c(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=arguments.length>2?arguments[2]:void 0,r=n;t&&(r=o(n,t));for(var a=[];r>0;)a.push(l(e)),r-=1;return a}function s(e){for(var n=[],t=e.slice();0!==t.length;){var r=Math.floor(t.length*Math.random());n.push(t[r]),t.splice(r,1)}return n}},12175:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- 基础的 Tree 用法\r\n * en - Base\r\n *   -- Basic usage of Tree\r\n */\r\nimport React from 'react'\r\nimport { Tree } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        id: '1',\r\n        text: '1',\r\n        children: [\r\n            {\r\n                id: '1-1',\r\n                text: '1-1',\r\n                children: [\r\n                    { id: '1-1-1', text: '1-1-1' },\r\n                    { id: '1-1-2', text: '1-1-2' },\r\n                ],\r\n            },\r\n            { id: '1-2', text: '1-2' },\r\n        ],\r\n    },\r\n    {\r\n        id: '2',\r\n        text: '2',\r\n        children: [\r\n            { id: '2-1', text: '2-1' },\r\n            { id: '2-2', text: '2-2' },\r\n        ],\r\n    },\r\n    { id: '3', text: '3', children: [{ id: '3-1', text: '3-1' }] },\r\n    { id: '4', text: '4', children: [{ id: '4-1', text: '4-1' }] },\r\n    { id: '5', text: '5', children: [{ id: '5-1', text: '5-1' }] },\r\n]\r\n\r\nexport default function () {\r\n    return <Tree data={data} keygen=\"id\" defaultExpanded={['2']} renderItem={(n) => `node ${n.text}`} />\r\n}\r\n"},429:function(e,n){n.Z="/**\r\n * cn - 图标\r\n *    -- 在 renderItem 中根据状态展示不同的图标\r\n * en - Icons\r\n *    -- Display different icon in the renderItem.\r\n */\r\nimport React from 'react'\r\nimport { Tree, FontAwesome } from 'ethan-ui'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default function () {\r\n    return (\r\n        <Tree\r\n            data={data}\r\n            keygen=\"id\"\r\n            renderItem=\"text\"\r\n            doubleClickExpand\r\n            expandIcons={[\r\n                <FontAwesome name=\"angle-right\" key=\"angle-right\" style={{ fontSize: '16px', color: '#adb5bd' }} />,\r\n                <FontAwesome name=\"angle-down\" key=\"angle-down\" style={{ fontSize: '16px', color: '#adb5bd' }} />,\r\n            ]}\r\n        />\r\n    )\r\n}\r\n"},37363:function(e,n){n.Z="/**\r\n * cn - 目录\r\n *    -- 目录模式\r\n * en - Directory\r\n *    -- Use Tree.Directory.\r\n */\r\nimport React from 'react'\r\nimport { FontAwesome, Tree } from 'ethan-ui'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default function () {\r\n    return (\r\n        <Tree.Directory\r\n            data={data}\r\n            keygen=\"id\"\r\n            renderItem={(node, isExpanded) => {\r\n                let icon\r\n                if (!node.children || node.children.length === 0) {\r\n                    icon = <FontAwesome name=\"file-text-o\" />\r\n                } else if (isExpanded) {\r\n                    icon = <FontAwesome name=\"folder-open\" style={{ color: '#ffd666' }} />\r\n                } else {\r\n                    icon = <FontAwesome name=\"folder\" style={{ color: '#ffd666' }} />\r\n                }\r\n\r\n                return (\r\n                    <span style={{ fontSize: '16px' }}>\r\n                        {icon} {node.text}\r\n                    </span>\r\n                )\r\n            }}\r\n            doubleClickExpand\r\n            expandIcons={[\r\n                <FontAwesome name=\"angle-right\" key=\"angle-right\" style={{ fontSize: '16px', color: '#adb5bd' }} />,\r\n                <FontAwesome name=\"angle-down\" key=\"angle-down\" style={{ fontSize: '16px', color: '#adb5bd' }} />,\r\n            ]}\r\n        />\r\n    )\r\n}\r\n"},79791:function(e,n){n.Z="/**\r\n * cn - 无连接线\r\n *    -- 设置 line 为 false，隐藏连接线\r\n * en - Line\r\n *    -- Set the line property to false to hid the connecting line.\r\n */\r\nimport React from 'react'\r\nimport { Tree } from 'ethan-ui'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default function () {\r\n    return <Tree data={data} defaultExpanded={['1', '2']} line={false} keygen=\"id\" renderItem={(n) => `node ${n.id}`} />\r\n}\r\n"},65857:function(e,n){n.Z="/**\r\n * cn - 控制展开\r\n *    -- 受控的展开（此示例数据量太大，第一次全部展开会比较慢）\r\n * en - Expanded\r\n *    -- Controlled expansion (Because the data in this example is too large, it will be slower for the first time.)\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree, Button } from 'ethan-ui'\r\nimport data, { allIds } from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { expanded: ['1'] }\r\n\r\n        this.collapseAll = this.handleExpand.bind(this, [])\r\n        this.expandAll = this.handleExpand.bind(this, [...allIds])\r\n    }\r\n\r\n    handleExpand = (expanded) => {\r\n        this.setState({ expanded })\r\n    }\r\n\r\n    renderItem = (node) => `node ${node.id}`\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ marginBottom: 12 }}>\r\n                    <Button onClick={this.expandAll}>Expand all</Button>\r\n                    <Button onClick={this.collapseAll}>Collapse all</Button>\r\n                </div>\r\n                <Tree\r\n                    data={data}\r\n                    keygen=\"id\"\r\n                    line={false}\r\n                    expanded={this.state.expanded}\r\n                    onExpand={this.handleExpand}\r\n                    renderItem={this.renderItem}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"},11567:function(e,n){n.Z="/**\r\n * cn - 可选择\r\n *    -- 选中值取值提供了 4 种模式\r\n *    -- 0: 只返回完全选中的节点，包含父节点\r\n *    -- 1: 返回全部选中的节点和半选中的父节点\r\n *    -- 2: 只返回选中的子节点\r\n *    -- 3: 如果父节点选中，只返回父节点\r\n * en - onChange\r\n *    -- Selected values provide 4 modes\r\n *    -- 0: Return only the fully selected node, including the parent node.\r\n *    -- 1: Return the fully selected nodes and semi-selected parent nodes.\r\n *    -- 2: Return only the selected child node.\r\n *    -- 3: Return only the parent node, if the parent node is selected.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree, Radio } from 'ethan-ui'\r\nimport data from 'doc/data/tree'\r\n\r\nconst resultStyle = {\r\n    position: 'absolute',\r\n    right: 30,\r\n    top: 100,\r\n    bottom: 40,\r\n    width: 240,\r\n    overflow: 'auto',\r\n    background: '#f2f2f2',\r\n    padding: 10,\r\n    zIndex: 100,\r\n}\r\n\r\nconst modeList = [\r\n    { value: 0, text: 'mode=0 (full)' },\r\n    { value: 1, text: 'mode=1 (half)' },\r\n    { value: 2, text: 'mode=2 (child only)' },\r\n    { value: 3, text: 'mode=3 (shallow)' },\r\n]\r\n\r\nfunction getValue(list, value) {\r\n    const [node] = list\r\n    if (!node) return\r\n    value.push(node.id)\r\n    if (node.children) getValue(node.children, value)\r\n}\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const value = []\r\n        getValue(data, value)\r\n\r\n        this.state = { mode: 1, value }\r\n    }\r\n\r\n    handleChange = (value) => {\r\n        this.setState({ value })\r\n    }\r\n\r\n    handleModeChange = (mode) => {\r\n        this.setState({ mode, value: [] })\r\n    }\r\n\r\n    renderItem = (node) => `node ${node.id}`\r\n\r\n    render() {\r\n        const { mode, value } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Radio.Group\r\n                    keygen=\"value\"\r\n                    value={mode}\r\n                    format=\"value\"\r\n                    onChange={this.handleModeChange}\r\n                    data={modeList}\r\n                    labelKey=\"text\"\r\n                />\r\n\r\n                <br />\r\n\r\n                <Tree\r\n                    data={data}\r\n                    defaultExpanded={['0', '2']}\r\n                    keygen=\"id\"\r\n                    mode={mode}\r\n                    onChange={this.handleChange}\r\n                    renderItem={this.renderItem}\r\n                    value={value}\r\n                />\r\n\r\n                <div style={resultStyle}>\r\n                    Current select value:\r\n                    <pre style={{ background: '#f2f2f2' }}>{JSON.stringify(value, null, 2)}</pre>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"},11972:function(e,n){n.Z="/**\r\n * cn - 禁用\r\n *    -- disabled 为函数时，根据返回结果禁用节点，同时禁用子节点\r\n *    -- disabled 为 true 时，禁用全部节点\r\n * en - disabled\r\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\r\n *    -- When the disabled property is true, disable all nodes.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'ethan-ui'\r\nimport data from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n    handleChange = (value) => {\r\n        console.log(value)\r\n    }\r\n\r\n    isDisabled = (node) => node.id === '1-0'\r\n\r\n    renderItem = (node) => `node ${node.id}`\r\n\r\n    render() {\r\n        return (\r\n            <Tree\r\n                data={data}\r\n                defaultExpanded={['1', '2']}\r\n                disabled={this.isDisabled}\r\n                keygen=\"id\"\r\n                onChange={this.handleChange}\r\n                renderItem={this.renderItem}\r\n            />\r\n        )\r\n    }\r\n}\r\n"},49919:function(e,n){n.Z="/**\r\n * cn - 拖动\r\n *    -- 设置 onDrop 属性可以拖动节点\r\n * en - Drag\r\n *    -- Set the onDrop property to drag nodes.\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'ethan-ui'\r\nimport tree from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { data: tree }\r\n        this.defaultExpanded = ['1']\r\n    }\r\n\r\n    handleDrop = (data, key, targetKey, position) => {\r\n        console.log(data, key, targetKey, position)\r\n        this.setState({ data })\r\n    }\r\n\r\n    renderItem = (node) => (\r\n        <div>\r\n            <span>node </span>\r\n            <span id={`node-id-${node.id}`}>{node.text}</span>\r\n        </div>\r\n    )\r\n\r\n    render() {\r\n        return (\r\n            <Tree\r\n                data={this.state.data}\r\n                keygen=\"id\"\r\n                defaultExpanded={this.defaultExpanded}\r\n                onDrop={this.handleDrop}\r\n                renderItem={this.renderItem}\r\n            />\r\n        )\r\n    }\r\n}\r\n"},37151:function(e,n){n.Z="/**\r\n * cn - 设置拖动样式\r\n *    -- 可以通过 dragImageSelector, dragImageStyle, dragHoverExpand定义一些拖动的设置\r\n * en - Set the drag style\r\n *    -- Some drag settings can be defined by dragImageSelector, dragImageStyle, dragHoverExpand\r\n */\r\nimport React, { Component } from 'react'\r\nimport { Tree } from 'ethan-ui'\r\nimport tree from 'doc/data/tree'\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { data: tree }\r\n        this.defaultExpanded = ['1']\r\n    }\r\n\r\n    handleDrop = (data, key, targetKey, position) => {\r\n        console.log(data, key, targetKey, position)\r\n        this.setState({ data })\r\n    }\r\n\r\n    renderItem = (node) => (\r\n        <div>\r\n            <span>node </span>\r\n            <span id={`node-id-${node.id}`}>{node.text}</span>\r\n        </div>\r\n    )\r\n\r\n    render() {\r\n        return (\r\n            <Tree\r\n                data={this.state.data}\r\n                keygen=\"id\"\r\n                defaultExpanded={this.defaultExpanded}\r\n                onDrop={this.handleDrop}\r\n                dragImageStyle={{ color: 'red' }}\r\n                renderItem={this.renderItem}\r\n                dragImageSelector={(d) => `#node-id-${d.id}`}\r\n                dragHoverExpand\r\n            />\r\n        )\r\n    }\r\n}\r\n"},10537:function(e,n){n.Z="/**\r\n * cn - 动态加载\r\n *    -- 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数\r\n * en - Lazy load\r\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\r\n */\r\nimport React, { Component } from 'react'\r\nimport immer from 'immer'\r\nimport { Tree } from 'ethan-ui'\r\n\r\nconst initData = ['0', '1', '2', '3', '4'].map((i) => ({ id: i }))\r\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i)\r\n\r\nexport default class extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { data: initData, value: [] }\r\n    }\r\n\r\n    loader = (key) => {\r\n        const path = key.split(',')\r\n\r\n        setTimeout(() => {\r\n            this.setState(\r\n                immer((draft) => {\r\n                    let { data } = draft\r\n                    path.forEach((pid, i) => {\r\n                        data = data.find((d) => d.id === pid)\r\n                        if (i < path.length - 1) data = data.children\r\n                    })\r\n                    data.children = [...createRange().map((i) => ({ id: `${data.id}-${i}` }))]\r\n                })\r\n            )\r\n        }, 500)\r\n    }\r\n\r\n    keyGenerator = (node, parentKey) => `${parentKey},${node.id}`.replace(/^,/, '')\r\n\r\n    handleChange = (value) => this.setState({ value })\r\n\r\n    renderItem = (node) => `node ${node.id}`\r\n\r\n    render() {\r\n        return (\r\n            <Tree\r\n                data={this.state.data}\r\n                keygen={this.keyGenerator}\r\n                loader={this.loader}\r\n                renderItem={this.renderItem}\r\n                onChange={this.handleChange}\r\n                value={this.state.value}\r\n            />\r\n        )\r\n    }\r\n}\r\n"}}]);