"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1978],{75722:function(e,n,r){r.d(n,{Z:function(){return k}});var t=r(87462),a=r(29439),o=r(93433),l=r(87363),i=r.n(l),c=r(92242),u=r.n(c),s=r(73727),d=r(22770),m=r(62625),h=r(94184),f=r.n(h),p=r(15660),v=r.n(p),g=(r(62356),function(e){var n=e.language,r=void 0===n?"lang-jsx":n,t=e.value,a=(0,l.useRef)(null);return(0,l.useEffect)((function(){v().highlightElement(a.current,!1)}),[]),i().createElement("pre",{ref:a,className:f()(r,(0,d.vf)("pre"))},i().createElement("code",null,t))}),E=r(84506),b=r(11888),Z=r(91391),y=function(e){var n=e.component,r=e.id,t=e.rawText,o=void 0===t?"":t,c=e.title,u=(0,l.useState)(!1),s=(0,a.Z)(u,2),m=s[0],h=s[1],f=(0,l.useRef)((0,l.createElement)(n)).current,p=o.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),v=c.split("\n"),y=(0,E.Z)(v),x=y[0],w=y.slice(1),C=function(){h(!m)};return i().createElement(i().Fragment,null,x&&i().createElement("h3",{id:r},x),i().createElement(b.Zr,{placeholder:i().createElement("div",{className:(0,d.vf)("placeholder")},i().createElement(b.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},i().createElement("div",{className:(0,d.vf)("_",m&&"showcode")},i().createElement("div",{className:(0,d.vf)("body")},f),c.length>0&&i().createElement("div",{className:(0,d.vf)("desc")},w.map((function(e,n){return i().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),i().createElement("a",{className:(0,d.vf)("toggle"),onClick:C},i().createElement(Z.Z,{name:m?"code-close":"code"}))),i().createElement(b.y_.Transition,{visible:m,transitionTypes:["collapse","fade"]},i().createElement(g,{value:p}),i().createElement("a",{className:(0,d.vf)("toggle"),onClick:C},i().createElement(Z.Z,{name:m?"code-close":"code"}))))))},x=i().memo(y),w=function(e){var n=e.children,r=(0,o.Z)(n[1].props.children);try{r.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return i().createElement("div",{style:{overflow:"auto"}},i().createElement("table",{className:"doc-api-table"},n[0],i().cloneElement(n[1],{children:r})))},C=r(35087),P=function(e){var n=[],r=(0,l.useContext)(C.Z).setHeadings,c=e.source,h=e.examples;return i().useEffect((function(){r(n)}),[]),i().createElement(u(),{className:(0,d.EX)("_"),source:c,renderers:{code:g,heading:function(e){var r=e.level,t=e.children,a="h".concat(r),o="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(r,t[0]));return 2!==r&&3!==r||n.push({id:o,level:r,children:t}),i().createElement(a,{id:o},t)},table:w,html:function(e){return"<example />"===e.value?i().createElement(i().Fragment,null,function(){if(!h)return i().createElement("div",null);var e=(0,m.ZP)("示例","Example"),r="heading-example-h";return n.push({id:r,level:2,children:[e]}),[i().createElement("h2",{key:"h",id:r},e)].concat((0,o.Z)(h.map((function(e){var r="heading-".concat(e.name),o=e.title.split("\n"),l=(0,a.Z)(o,1)[0];return n.push({id:r,level:3,children:[l]}),i().createElement(x,(0,t.Z)({key:r,id:r},e))}))))}()):"<br>"===e.value||"<br />"===e.value?i().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?i().createElement("a",{href:e.href,target:n},e.children):i().createElement(s.rU,{to:e.href},e.children)}}})},k=i().memo(P)},35087:function(e,n,r){var t=(0,r(87363).createContext)(void 0);n.Z=t},88981:function(e,n,r){var t=r(29439),a=r(87363),o=r.n(a),l=r(91291),i=r(22770),c=r(11888),u=r(75964),s=r(12025),d=r(35087),m=function(e){var n=e.children,r=(0,a.useState)(""),m=(0,t.Z)(r,2),h=m[0],f=m[1],p=(0,a.useState)([]),v=(0,t.Z)(p,2),g=v[0],E=v[1],b=(0,l.Z)().hash,Z=(0,u.Z)((function(e){s.Z.push("".concat(s.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),y=(0,u.Z)((function(){var e=document.documentElement.scrollTop,n=g.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var r=n[0].id;n.forEach((function(n){var t=document.querySelector("#".concat(n.id));(null==t?void 0:t.offsetTop)<=e&&(r=n.id)})),f(r)}}));(0,a.useEffect)((function(){if(y(),b){var e=document.querySelector(b);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",y),function(){document.removeEventListener("scroll",y)}}),[g]);var x=o().useMemo((function(){return{setHeadings:E}}),[]);return o().createElement("div",{className:(0,i.EH)("_")},o().createElement(d.Z.Provider,{value:x},n),o().createElement(c.Le,{className:(0,i.EH)("sticky"),top:50},o().createElement("div",{className:(0,i.EH)("nav")},g.map((function(e,n){var r=e.children.filter((function(e){return"string"==typeof e}));return o().createElement("a",{key:n,className:(0,i.EH)("level-".concat(e.level),h===e.id&&"active"),onClick:Z.bind(null,e.id)},r)})))))};n.Z=o().memo(m)},69903:function(e,n,r){r.r(n),r.d(n,{default:function(){return d}});var t=r(87363),a=r.n(t),o=r(88981),l=r(75722),i=r(62625),c=r(36519),u=(0,i.ZP)("# EditableArea _可编辑域_\r\n\r\n通常用于点击即可修改的文本,失去焦点就保存\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性              | 类型                    | 默认值 | 说明                                                                |\r\n| ----------------- | ----------------------- | ------ | ------------------------------------------------------------------- |\r\n| defaultValue      | string                  | -      | 设置初始值                                                          |\r\n| value             | string                  | -      | 受控时，传入的 value                                                |\r\n| className         | string                  | -      | 扩展外层 className                                                  |\r\n| onChange          | (value: string) => void | -      | 值改变时的回调函数，和 value 一起设置时使组件受控                   |\r\n| style             | object                  | -      | 组件最外层的扩展样式                                                |\r\n| border            | boolean                 | false  | 是否显示外边框                                                      |\r\n| disabled          | boolean                 | false  | 是否禁用                                                            |\r\n| clearable         | boolean                 | true   | 是否展示清除按钮                                                    |\r\n| placeholder       | string                  | -      | 同原生 textarea 标签的 placeholder                                  |\r\n| trim              | boolean                 | false  | trim 为 true 时，失去焦点时会自动删除空白字符                       |\r\n| onBlur            | (e: MouseEvent) => void | -      | 失去焦点事件                                                        |\r\n| onFocus           | (e: MouseEvent) => void | -      | 聚焦事件                                                            |\r\n| maxHeight         | number \\| string        | -      | 输入框的最大高度, 超过之后会出现滚动条                              |\r\n| getPopupContainer | () => HTMLElement       | -      | 自定义 Popover 容器，覆盖默认渲染在 body 下的行为, () => DOMElement |\r\n| width             | number \\| string        | -      | 编辑域宽度                                                          |\r\n","# EditableArea\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性              | 类型                    | 默认值 | 说明                                                                                                        |\r\n| ----------------- | ----------------------- | ------ | ----------------------------------------------------------------------------------------------------------- |\r\n| defaultValue      | string                  | -      | Set initial value                                                                                           |\r\n| value             | string                  | -      | The value passed in when controlled                                                                         |\r\n| className         | string                  | -      | The outermost extension className of a component                                                            |\r\n| onChange          | (value: string) => void | -      | Callback function when the value changes, making the component controlled when set with value               |\r\n| style             | object                  | -      | The outermost extension style of a component                                                                |\r\n| border            | boolean                 | false  | Whether to show the border                                                                                  |\r\n| disabled          | boolean                 | false  | Whether to disable                                                                                          |\r\n| clearable         | boolean                 | true   | Whether to show the clear button                                                                            |\r\n| placeholder       | string                  | -      | The same as the native placeholder tag                                                                      |\r\n| trim              | boolean                 | false  | When trim is true, blank characters are automatically deleted when lose focus                               |\r\n| onBlur            | (e: MouseEvent) => void | -      | blur event                                                                                                  |\r\n| onFocus           | (e: MouseEvent) => void | -      | focus event                                                                                                 |\r\n| maxHeight         | number \\| string        | -      | the maxHeight of the textarea, scroll bars appear after more than                                           |\r\n| getPopupContainer | () => HTMLElement       | -      | Custom Popover container, override the default behavior which is rendering under the body, () => DOMElement |\r\n| width             | number \\| string        | -      | width of the EditableArea                                                                                   |\r\n"),s=[{name:"01-base",title:(0,i.ZP)("基本用法 \n EditableArea 默认展示一行，超过一行的内容用...代替","Base \n EditableArea displays one line by default, and more than one line is replaced by ..."),component:r(91531).Z,rawText:r(14536).Z},{name:"02-bordered",title:(0,i.ZP)("有边框的 \n 设置border显示外边框","Border \n Set border to display the outer border"),component:r(86945).Z,rawText:r(10782).Z},{name:"03-container",title:(0,i.ZP)("自定义容器 \n 在内滚容器中使用此组件，可使用 getPopupContainer 指定渲染的目标容器，使之随之滚动","Custom container \n use getPopupContainer return target container"),component:r(75890).Z,rawText:r(17339).Z}],d=(0,c.Z)((function(){return a().createElement(o.Z,null,a().createElement(l.Z,{source:u,examples:s}))}))},91531:function(e,n,r){r.d(n,{Z:function(){return l}});var t=r(87363),a=r.n(t),o=r(11888);function l(){return a().createElement(o._5,{placeholder:"input something",clearable:!0,onFocus:function(){console.log("focus")},onBlur:function(){console.log("blur")}})}},86945:function(e,n,r){r.d(n,{Z:function(){return i}});var t=r(29439),a=r(87363),o=r.n(a),l=r(11888);function i(){var e=(0,a.useState)(""),n=(0,t.Z)(e,2),r=n[0],i=n[1];return o().createElement(l._5,{border:!0,value:r,placeholder:"Input something",onChange:function(e){i(e)},width:400})}},75890:function(e,n,r){r.d(n,{Z:function(){return l}});var t=r(87363),a=r.n(t),o=r(11888);function l(){return a().createElement("div",{id:"popup-target",style:{height:200,overflow:"auto",position:"relative",padding:10}},a().createElement("div",{style:{height:100}}),a().createElement(o._5,{border:!0,placeholder:"scroll in container",getPopupContainer:function(){return document.querySelector("#popup-target")},maxHeight:100}),a().createElement("div",{style:{height:140}}))}},36519:function(e,n,r){var t=r(11888),a=r(87363),o=r.n(a);n.Z=function(e){var n=function(n){return(0,a.useEffect)((function(){return t.gb.finish(),function(){t.gb.start()}}),[]),o().createElement(e,n)};return o().memo(n)}},14536:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- EditableArea 默认展示一行，超过一行的内容用...代替\r\n * en - Base\r\n *    -- EditableArea displays one line by default, and more than one line is replaced by ...\r\n */\r\n\r\nimport React from 'react'\r\nimport { EditableArea } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return (\r\n        <EditableArea\r\n            placeholder=\"input something\"\r\n            clearable\r\n            onFocus={() => {\r\n                console.log('focus')\r\n            }}\r\n            onBlur={() => {\r\n                console.log('blur')\r\n            }}\r\n        />\r\n    )\r\n}\r\n"},10782:function(e,n){n.Z="/**\r\n * cn - 有边框的\r\n *    -- 设置border显示外边框\r\n * en - Border\r\n *    -- Set border to display the outer border\r\n */\r\n\r\nimport React, { useState } from 'react'\r\nimport { EditableArea } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    const [value, setValue] = useState('')\r\n\r\n    return (\r\n        <EditableArea\r\n            border\r\n            value={value}\r\n            placeholder=\"Input something\"\r\n            onChange={(val) => {\r\n                setValue(val)\r\n            }}\r\n            width={400}\r\n        />\r\n    )\r\n}\r\n"},17339:function(e,n){n.Z="/**\r\n * cn - 自定义容器\r\n *    -- 在内滚容器中使用此组件，可使用 getPopupContainer 指定渲染的目标容器，使之随之滚动\r\n * en - Custom container\r\n *    -- use getPopupContainer return target container\r\n */\r\nimport React from 'react'\r\nimport { EditableArea } from 'ethan-ui'\r\n\r\nexport default function () {\r\n    return (\r\n        <div id=\"popup-target\" style={{ height: 200, overflow: 'auto', position: 'relative', padding: 10 }}>\r\n            <div style={{ height: 100 }} />\r\n            <EditableArea\r\n                border\r\n                placeholder=\"scroll in container\"\r\n                getPopupContainer={() => document.querySelector('#popup-target')}\r\n                maxHeight={100}\r\n            />\r\n            <div style={{ height: 140 }} />\r\n        </div>\r\n    )\r\n}\r\n"}}]);