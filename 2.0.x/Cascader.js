"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[9475],{75722:function(e,n,r){r.d(n,{Z:function(){return k}});var a=r(87462),t=r(29439),l=r(93433),o=r(87363),i=r.n(o),d=r(92242),c=r.n(d),u=r(73727),s=r(22770),h=r(62625),m=r(94184),f=r.n(m),g=r(15660),v=r.n(g),p=(r(62356),function(e){var n=e.language,r=void 0===n?"lang-jsx":n,a=e.value,t=(0,o.useRef)(null);return(0,o.useEffect)((function(){v().highlightElement(t.current,!1)}),[]),i().createElement("pre",{ref:t,className:f()(r,(0,s.vf)("pre"))},i().createElement("code",null,a))}),b=r(84506),y=r(11888),Z=r(91391),w=function(e){var n=e.component,r=e.id,a=e.rawText,l=void 0===a?"":a,d=e.title,c=(0,o.useState)(!1),u=(0,t.Z)(c,2),h=u[0],m=u[1],f=(0,o.useRef)((0,o.createElement)(n)).current,g=l.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),v=d.split("\n"),w=(0,b.Z)(v),x=w[0],E=w.slice(1),T=function(){m(!h)};return i().createElement(i().Fragment,null,x&&i().createElement("h3",{id:r},x),i().createElement(y.Zr,{placeholder:i().createElement("div",{className:(0,s.vf)("placeholder")},i().createElement(y.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},i().createElement("div",{className:(0,s.vf)("_",h&&"showcode")},i().createElement("div",{className:(0,s.vf)("body")},f),d.length>0&&i().createElement("div",{className:(0,s.vf)("desc")},E.map((function(e,n){return i().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),i().createElement("a",{className:(0,s.vf)("toggle"),onClick:T},i().createElement(Z.Z,{name:h?"code-close":"code"}))),i().createElement(y.y_.Transition,{visible:h,transitionTypes:["collapse","fade"]},i().createElement(p,{value:g}),i().createElement("a",{className:(0,s.vf)("toggle"),onClick:T},i().createElement(Z.Z,{name:h?"code-close":"code"}))))))},x=i().memo(w),E=function(e){var n=e.children,r=(0,l.Z)(n[1].props.children);try{r.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return i().createElement("div",{style:{overflow:"auto"}},i().createElement("table",{className:"doc-api-table"},n[0],i().cloneElement(n[1],{children:r})))},T=r(35087),C=function(e){var n=[],r=(0,o.useContext)(T.Z).setHeadings,d=e.source,m=e.examples;return i().useEffect((function(){r(n)}),[]),i().createElement(c(),{className:(0,s.EX)("_"),source:d,renderers:{code:p,heading:function(e){var r=e.level,a=e.children,t="h".concat(r),l="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(r,a[0]));return 2!==r&&3!==r||n.push({id:l,level:r,children:a}),i().createElement(t,{id:l},a)},table:E,html:function(e){return"<example />"===e.value?i().createElement(i().Fragment,null,function(){if(!m)return i().createElement("div",null);var e=(0,h.ZP)("示例","Example"),r="heading-example-h";return n.push({id:r,level:2,children:[e]}),[i().createElement("h2",{key:"h",id:r},e)].concat((0,l.Z)(m.map((function(e){var r="heading-".concat(e.name),l=e.title.split("\n"),o=(0,t.Z)(l,1)[0];return n.push({id:r,level:3,children:[o]}),i().createElement(x,(0,a.Z)({key:r,id:r},e))}))))}()):"<br>"===e.value||"<br />"===e.value?i().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?i().createElement("a",{href:e.href,target:n},e.children):i().createElement(u.rU,{to:e.href},e.children)}}})},k=i().memo(C)},35087:function(e,n,r){var a=(0,r(87363).createContext)(void 0);n.Z=a},88981:function(e,n,r){var a=r(29439),t=r(87363),l=r.n(t),o=r(91291),i=r(22770),d=r(11888),c=r(75964),u=r(12025),s=r(35087),h=function(e){var n=e.children,r=(0,t.useState)(""),h=(0,a.Z)(r,2),m=h[0],f=h[1],g=(0,t.useState)([]),v=(0,a.Z)(g,2),p=v[0],b=v[1],y=(0,o.Z)().hash,Z=(0,c.Z)((function(e){u.Z.push("".concat(u.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),w=(0,c.Z)((function(){var e=document.documentElement.scrollTop,n=p.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var r=n[0].id;n.forEach((function(n){var a=document.querySelector("#".concat(n.id));(null==a?void 0:a.offsetTop)<=e&&(r=n.id)})),f(r)}}));(0,t.useEffect)((function(){if(w(),y){var e=document.querySelector(y);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",w),function(){document.removeEventListener("scroll",w)}}),[p]);var x=l().useMemo((function(){return{setHeadings:b}}),[]);return l().createElement("div",{className:(0,i.EH)("_")},l().createElement(s.Z.Provider,{value:x},n),l().createElement(d.Le,{className:(0,i.EH)("sticky"),top:50},l().createElement("div",{className:(0,i.EH)("nav")},p.map((function(e,n){var r=e.children.filter((function(e){return"string"==typeof e}));return l().createElement("a",{key:n,className:(0,i.EH)("level-".concat(e.level),m===e.id&&"active"),onClick:Z.bind(null,e.id)},r)})))))};n.Z=l().memo(h)},79363:function(e,n,r){r.r(n),r.d(n,{default:function(){return s}});var a=r(87363),t=r.n(a),l=r(88981),o=r(75722),i=r(62625),d=r(36519),c=(0,i.ZP)("# Cascader _级联选择_\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性          | 类型                                              | 默认值     | 说明                                                                                                                                                                           |\r\n| ------------- | ------------------------------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| className     | string                                            | 无         | 扩展 className                                                                                                                                                                 |\r\n| clearable     | boolean                                           | true       | 是否显示清除数据图标                                                                                                                                                           |\r\n| data          | any[]                                             | []         | 数据，子节点为 children，如果 children 值为 null 或 长度为 0 时，视为叶子节点                                                                                                  |\r\n| defaultValue  | any[]                                             | 无         | 默认选中的 key （非受控）                                                                                                                                                      |\r\n| disabled      | (data: any) => boolean \\| boolean                 | false      | 显示选择框时有效，为 true 时，所有节点禁用选择，为函数时，根据函数返回结果确定是否禁用                                                                                         |\r\n| expandTrigger | 'click' \\| 'hover' \\| 'hover-only'                | 'click'    | 节点展开触发方式                                                                                                                                                               |\r\n| keygen        | ((data: any, parentKey: any) => string) \\| string | 必填       | 生成 key 的辅助方法<br />为函数时，使用此函数返回值<br />为 string 时，使用这个 string 对应的数据值。如 'id'，相当于 (d) => d.id                                               |\r\n| loader        | (key: any, data: any) => void                     | 无         | 设置 loader 属性后，未定义 children 的节点视为动态加载节点，点击展开触发 loader 事件，children 为 null 或者长度为 0 视为叶子节点                                               |\r\n| mode          | 0 \\| 1 \\| 2 \\| 3                                  | 无         | 选中值模式，未设置值为单选<br />0: 只返回完全选中的节点，包含父节点<br />1: 返回全部选中的节点和半选中的父节点<br />2: 只返回选中的子节点<br />3: 如果父节点选中，只返回父节点 |\r\n| onChange      | (value: any[], selected: boolean) => void         | 无         | 设置 onChange 属性时，显示 选择框。参数为当前选中值，和 mode 属性相关                                                                                                          |\r\n| renderItem    | (data: any) => ReactNode \\| string                | 必填       | 为 string 时，返回 d\\[string]<br />为 function 时，返回函数结果                                                                                                                |\r\n| renderResult  | (data: any, result: any[]) => ReactNode \\| string | renderItem | 选中后在结果中显示的内容，默认和 renderItem 相同。返回 null 则不展示，result 为当前选中的所有值。                                                                              |\r\n| value         | any[]                                             | 无         | 选中的 key （受控）                                                                                                                                                            |\r\n| portal        | boolean \\| (() => element)                        | false      | 为 true 时，选项弹出层在 BODY 下独立 render， 为函数时 选项弹出层在函数返回的 DOM 下 render                                                                                    |\r\n| compressed    | boolean \\| 'no-repeat'                            | false      | 将选中值合并。为'no-repeat'时弹出框中不重复展示值                                                                                                                              |\r\n| childrenKey   | string                                            | 'children' | 指定子数据的属性名                                                                                                                                                             |\r\n| finalDismiss  | boolean                                           | false      | 选择末级节点后是否关闭选项列表                                                                                                                                                 |\r\n| onCollapse    | (collapse: boolean) => void                       | 无         | 下拉列表展开/收起回调                                                                                                                                                          |\r\n| onFilter      | (text: string) => (data: any) => boolean          | 无         | onFilter 不为空时，可以输入过滤数据<br />onFilter 如果返回一个函数，使用这个函数做前端过滤<br />如果不返回，可以自行做后端过滤<br />单选状态下支持                             |\r\n| height        | number                                            | 300        | 下拉列表高度                                                                                                                                                                   |\r\n| size          | string                                            | 无         | 尺寸                                                                                                                                                                           |\r\n| showArrow     | boolean                                           | true       | 是否显示下拉箭头，仅针对单选情况                                                                                                                                               |\r\n| loading       | boolean \\| ReactNode                              | 无         | 下拉列表 loading 状态                                                                                                                                                          |\r\n","# Cascader\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property                  | Type                                              | Default    | Description                                                                                                                                                                                                                                                          |\r\n| ------------------------- | ------------------------------------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| className                 | string                                            | -          | Extend className                                                                                                                                                                                                                                                     |\r\n| clearable                 | boolean                                           | false      | If clearable is true, show clear value icon                                                                                                                                                                                                                          |\r\n| data                      | any[]                                             | []         | data. The child node is children. If the children value is null or its length is 0, it is render as a leaf node.                                                                                                                                                     |\r\n| disabled                  | (data: any) => boolean \\| boolean                 | false      | When it is true, all nodes disable the selection; when it is a function, it determines whether it is disabled according to the return result of the function.                                                                                                        |\r\n| expandTrigger             | 'click' \\| 'hover' \\| 'hover-only'                | 'click'    | Expand mode                                                                                                                                                                                                                                                          |\r\n| keygen                    | ((data: any, parentKey: any) => string) \\| string | required   | Auxiliary method for generating key. <br />When it is a function, use the return value of this function. <br /> When it is a string, use the data value corresponding to this string. For example, 'id' is the same thing as (d) => d.id.                            |\r\n| loader                    | (key: any, data: any) => void                     | -          | If the loader attribute is a function, the node with no children is regarded as dynamically loaded node. Click expanded button to trigger the loader event. The children property is null or its length is 0 will be regarded as a leaf node.                        |\r\n| mode                      | 0 \\| 1 \\| 2 \\| 3                                  | none       | mode <br />0: Returns only the fully selected node including the parent node. <br />1: Returns all selected nodes and semi-selected nodes. <br />2: Return only the selected child nodes. <br />3: If the parent node is full selected, only return the parent node. |\r\n| onChange                  | (value: any[], selected: boolean) => void         | -          | When the onChange property is set, the selection box is displayed. The parameter is the current selected value, which is related to the mode property.                                                                                                               |\r\n| renderItem                | (data: any) => ReactNode \\| string                | required   | When it is a string, return d\\[string].<br /> When it is a function, return the result of this function.                                                                                                                                                             |\r\n| renderResult              | (data: any, result: any[]) => ReactNode \\| string | renderItem | The content displayed in the result after selecting, if not set, use renderItem. not show while return null, result is current selected                                                                                                                              |\r\n| defaultValue              | any[]                                             | -          | Default selected key (not controlled)                                                                                                                                                                                                                                |\r\n| value                     | any[]                                             | -          | Selected key (controlled)                                                                                                                                                                                                                                            |\r\n| portal \\| (() => element) | boolean                                           | false      | When it is true, the pop-up layer of option append into document.body. When it is function, the pop-up layer of option append into it's return DOM.                                                                                                                  |\r\n| compressed                | boolean \\| 'no-repeat'                            | false      | Merges selected values; the repeat value will not appear in the Popover when it is'no-repeat'.                                                                                                                                                                       |\r\n| childrenKey               | string                                            | 'children' | the key of the children data name                                                                                                                                                                                                                                    |\r\n| finalDismiss              | boolean                                           | false      | close options after chose the final node                                                                                                                                                                                                                             |\r\n| onCollapse                | (collapse: boolean) => void                       | none       | options collapse callback                                                                                                                                                                                                                                            |\r\n| onFilter                  | (text: string) => (data: any) => boolean          | -          | When the onFilter is not empty, you can filter data by input.<br />If the onFilter returns a function, use this function as a front-end filter.<br />If return undefined, you can do your own backend filtering.<br /> support in single selection state             |\r\n| height                    | number                                            | 300        | height of dropdown options                                                                                                                                                                                                                                           |\r\n| size                      | string                                            | none       | size                                                                                                                                                                                                                                                                 |\r\n| showArrow                 | boolean                                           | true       | show dropdown arrow, only single select                                                                                                                                                                                                                              |\r\n| loading                   | boolean \\| ReactNode                              | none       | Dropdown list loading state                                                                                                                                                                                                                                          |\r\n"),u=[{name:"01-base",title:(0,i.ZP)("基本用法 \n 基础的级联用法","Base \n Basic usage of Cascader"),component:r(56041).Z,rawText:r(85818).Z},{name:"02-multiple",title:(0,i.ZP)("多选 \n 一次性选择多个选项。","Multiple \n Select multiple options"),component:r(75030).Z,rawText:r(16352).Z},{name:"02-size",title:(0,i.ZP)("大小 \n 不同大小的级联选择器。","Size \n Cascade selection box of different sizes."),component:r(16107).Z,rawText:r(78502).Z},{name:"03-hover",title:(0,i.ZP)("移入展开 \n 设置 expandTrigger 为 'hover', 可以在鼠标移入节点时展开，默认为 'click'","Hover \n Set expandTrigger to 'hover', expand the node when mouse hover, default value is 'click'."),component:r(79542).Z,rawText:r(12254).Z},{name:"04-disabled",title:(0,i.ZP)("禁用 \n disabled 为函数时，根据返回结果禁用节点，同时禁用子节点 \n disabled 为 true 时，禁用全部节点","disabled \n When the disabled property is a function, disable the node and its child nodes according to the returned result. \n When the disabled property is true, disable all nodes."),component:r(51987).Z,rawText:r(24499).Z},{name:"05-lazyload",title:(0,i.ZP)("动态加载 \n 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数","Lazy load \n Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded."),component:r(59585).Z,rawText:r(87284).Z},{name:"06-showResultMode",title:(0,i.ZP)("显示结果的方式 \n 通过设置 showResultMode 选择结果的显示方式。","ShowResultMode \n The showResultMode command is used to select a result display mode."),component:r(17590).Z,rawText:r(74009).Z},{name:"07-compressed",title:(0,i.ZP)("合并结果显示 \n 将选中值合并显示,输入框响应式变化","Compressed \n The selected values are displayed in combination, and the input box changes in response."),component:r(80970).Z,rawText:r(15259).Z},{name:"08-filter",title:(0,i.ZP)("过滤 \n 可以直接搜索选项并选择。","Filter \n Search and select options directly."),component:r(6060).Z,rawText:r(63962).Z}],s=(0,d.Z)((function(){return t().createElement(l.Z,null,t().createElement(o.Z,{source:c,examples:u}))}))},44878:function(e,n,r){r.d(n,{$9:function(){return o},Ln:function(){return u}});var a=r(93433),t=r(53897),l=r(27055),o=[],i=[],d=function e(n,r,o,i,d,c){var u=o.join("-"),s=(0,l.Pz)(d,0===n?1:0),h={id:u,text:u};return s>0&&n<i&&(h.children=(0,t.w6)(s).map((function(r){return e(n+1,0,[].concat((0,a.Z)(o),[r]),i,d,c)}))),c&&c.push(u),h},c=(0,t.w6)(4).map((function(e){return d(0,0,[e],10,5,o)})),u=(0,t.w6)(20).map((function(e){return d(0,0,[e],4,10)}));(0,t.w6)(3).map((function(e){return d(0,0,[e],2,3,i)})),n.ZP=c},56041:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{value:"zhejiang",label:"Zhejiang",children:[{value:"hangzhou",label:"Hangzhou",children:[{value:"xihu",label:"West Lake"}]}]},{value:"jiangsu",label:"Jiangsu",children:[{value:"nanjing",label:"Nanjing",children:[{value:"zhonghuamen",label:"Zhong Hua Men"}]}]}];function i(){return t().createElement(l.vT,{data:o,style:{width:300},onChange:console.log,onFocus:function(){console.log("focus")},onBlur:function(){console.log("blur")}})}},75030:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{label:"Light",value:"light",children:new Array(20).fill(null).map((function(e,n){return{label:"Number ".concat(n),value:n}}))},{label:"Bamboo",value:"bamboo",children:[{label:"Little",value:"little",children:[{label:"Toy Fish",value:"fish"},{label:"Toy Cards",value:"cards"},{label:"Toy Bird",value:"bird"}]}]}];function i(){return t().createElement(l.vT,{data:o,style:{width:300},multiple:!0})}},16107:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{value:"zhejiang",label:"Zhejiang",children:[{value:"hangzhou",label:"Hangzhou",children:[{value:"xihu",label:"West Lake"}]}]},{value:"jiangsu",label:"Jiangsu",children:[{value:"nanjing",label:"Nanjing",children:[{value:"zhonghuamen",label:"Zhong Hua Men"}]}]}];function i(){return t().createElement("div",null,t().createElement(l.vT,{data:o,style:{width:300,display:"block",marginBottom:10},size:"small"}),t().createElement(l.vT,{data:o,style:{width:300,display:"block",marginBottom:10},size:"default"}),t().createElement(l.vT,{data:o,style:{width:300,display:"block",marginBottom:10},size:"large"}))}},79542:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{value:"zhejiang",label:"Zhejiang",children:[{value:"hangzhou",label:"Hangzhou",children:[{value:"xihu",label:"West Lake"}]}]},{value:"jiangsu",label:"Jiangsu",children:[{value:"nanjing",label:"Nanjing",children:[{value:"zhonghuamen",label:"Zhong Hua Men"}]}]}];function i(){return t().createElement(l.vT,{data:o,expandTrigger:"hover",style:{width:300}})}},51987:function(e,n,r){r.d(n,{Z:function(){return d}});var a=r(87363),t=r.n(a),l=r(11888),o=r(44878),i=function(e){return"1-0"===e.id||"2"===e.id};function d(){return t().createElement(l.vT,{data:o.Ln,valueKey:"id",disabled:i,labelKey:"text"})}},59585:function(e,n,r){r.d(n,{Z:function(){return c}});var a=r(93433),t=r(29439),l=r(87363),o=r.n(l),i=r(11888),d=["0","1","2","3","4","5","6","7","8"].map((function(e){return{label:"".concat(e),value:e}}));function c(){var e=(0,l.useState)(d),n=(0,t.Z)(e,2),r=n[0],c=n[1],u=function(e){console.log("onChange:",e)},s=function(e,n){if(console.log("loadData:",e,n),n.indexPath.length>=3)return e.children=null,void c((0,a.Z)(r));setTimeout((function(){e.children=(0,a.Z)(Array.from({length:Math.round(4*Math.random())},(function(e,n){return n})).map((function(n){var r="".concat(e.label,"-").concat(n);return{value:r,label:r}}))),c((0,a.Z)(r))}),1e3)};return o().createElement("div",null,o().createElement(i.vT,{data:r,loader:s,onChange:u,style:{width:300}}),o().createElement("br",null),o().createElement(i.vT,{data:r,loader:s,onChange:u,style:{width:300,marginTop:10},multiple:!0}))}},17590:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{label:"Light",value:"light",children:new Array(20).fill(null).map((function(e,n){return{label:"Number ".concat(n),value:n}}))},{label:"Bamboo",value:"bamboo",children:[{label:"Little",value:"little",children:[{label:"Toy Fish",value:"fish"},{label:"Toy Cards",value:"cards"},{label:"Toy Bird",value:"bird"}]},{label:"Little2",value:"little2",children:[{label:"Toy Fish2",value:"fish2"},{label:"Toy Cards2",value:"cards2"},{label:"Toy Bird2",value:"bird2"}]}]},{label:"Dark",value:"dark"}];function i(){return t().createElement("div",null,t().createElement(l.vT,{data:o,style:{width:300,marginBottom:20,display:"block"},multiple:!0,showResultMode:"parent"}),t().createElement(l.vT,{data:o,style:{width:300,marginBottom:20,display:"block"},multiple:!0}),t().createElement(l.vT,{data:o,style:{width:300,marginBottom:20,display:"block"},multiple:!0,showResultMode:"child"}))}},80970:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=r(44878);function i(){return t().createElement(l.vT,{data:o.Ln,labelKey:"text",valueKey:"id",multiple:!0,compressed:!0})}},6060:function(e,n,r){r.d(n,{Z:function(){return i}});var a=r(87363),t=r.n(a),l=r(11888),o=[{value:"zhejiang",label:"Zhejiang",children:[{value:"hangzhou",label:"Hangzhou",children:[{value:"xihu",label:"West Lake"}]}]},{value:"jiangsu",label:"Jiangsu",children:[{value:"nanjing",label:"Nanjing",children:[{value:"zhonghuamen",label:"Zhong Hua Men"}]}]}];function i(){return t().createElement("div",null,t().createElement(l.vT,{data:o,placeholder:"single",style:{width:300},onChange:console.log,onFilter:!0,disabled:function(e){return"hangzhou"===e.value}}),t().createElement("br",null),t().createElement(l.vT,{data:o,multiple:!0,placeholder:"multiple",style:{width:300,marginTop:20},onChange:console.log,onFilter:!0}))}},36519:function(e,n,r){var a=r(11888),t=r(87363),l=r.n(t);n.Z=function(e){var n=function(n){return(0,t.useEffect)((function(){return a.gb.finish(),function(){a.gb.start()}}),[]),l().createElement(e,n)};return l().memo(n)}},27055:function(e,n,r){r.d(n,{J_:function(){return d},Pz:function(){return t},TP:function(){return i},TV:function(){return u},ei:function(){return c},py:function(){return l}}),r(53897);var a=r(49546);function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:65555,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;"string"==typeof e&&(e=parseInt(e,10)),"string"==typeof n&&(n=parseInt(n,10));var a=Math.random()*(e-n)+n;return parseFloat(a.toFixed(r),0)}function l(){return Math.round(t.apply(void 0,arguments))}function o(e){return Math.ceil(Math.random()*e)}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"yyyy-MM-dd",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e10,r=Date.now()-o(n);return(0,a.Z)(r,e)}function d(e){return e[Math.floor(Math.random()*e.length)]}function c(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2?arguments[2]:void 0,a=n;r&&(a=l(n,r));for(var t=[];a>0;)t.push(d(e)),a-=1;return t}function u(e){for(var n=[],r=e.slice();0!==r.length;){var a=Math.floor(r.length*Math.random());n.push(r[a]),r.splice(a,1)}return n}},85818:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- 基础的级联用法\r\n * en - Base\r\n *   -- Basic usage of Cascader\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        value: 'zhejiang',\r\n        label: 'Zhejiang',\r\n        children: [\r\n            {\r\n                value: 'hangzhou',\r\n                label: 'Hangzhou',\r\n                children: [\r\n                    {\r\n                        value: 'xihu',\r\n                        label: 'West Lake',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'jiangsu',\r\n        label: 'Jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                label: 'Nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'zhonghuamen',\r\n                        label: 'Zhong Hua Men',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return (\r\n        <Cascader\r\n            data={data}\r\n            style={{ width: 300 }}\r\n            onChange={console.log}\r\n            onFocus={() => {\r\n                console.log('focus')\r\n            }}\r\n            onBlur={() => {\r\n                console.log('blur')\r\n            }}\r\n        />\r\n    )\r\n}\r\n"},16352:function(e,n){n.Z="/**\r\n * cn - 多选\r\n *    -- 一次性选择多个选项。\r\n * en - Multiple\r\n *   -- Select multiple options\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        label: 'Light',\r\n        value: 'light',\r\n        children: new Array(20).fill(null).map((_, index) => ({ label: `Number ${index}`, value: index })),\r\n    },\r\n    {\r\n        label: 'Bamboo',\r\n        value: 'bamboo',\r\n        children: [\r\n            {\r\n                label: 'Little',\r\n                value: 'little',\r\n                children: [\r\n                    {\r\n                        label: 'Toy Fish',\r\n                        value: 'fish',\r\n                    },\r\n                    {\r\n                        label: 'Toy Cards',\r\n                        value: 'cards',\r\n                    },\r\n                    {\r\n                        label: 'Toy Bird',\r\n                        value: 'bird',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return <Cascader data={data} style={{ width: 300 }} multiple />\r\n}\r\n"},78502:function(e,n){n.Z="/**\r\n * cn - 大小\r\n *    -- 不同大小的级联选择器。\r\n * en - Size\r\n *   -- Cascade selection box of different sizes.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        value: 'zhejiang',\r\n        label: 'Zhejiang',\r\n        children: [\r\n            {\r\n                value: 'hangzhou',\r\n                label: 'Hangzhou',\r\n                children: [\r\n                    {\r\n                        value: 'xihu',\r\n                        label: 'West Lake',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'jiangsu',\r\n        label: 'Jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                label: 'Nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'zhonghuamen',\r\n                        label: 'Zhong Hua Men',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Cascader data={data} style={{ width: 300, display: 'block', marginBottom: 10 }} size=\"small\" />\r\n            <Cascader data={data} style={{ width: 300, display: 'block', marginBottom: 10 }} size=\"default\" />\r\n            <Cascader data={data} style={{ width: 300, display: 'block', marginBottom: 10 }} size=\"large\" />\r\n        </div>\r\n    )\r\n}\r\n"},12254:function(e,n){n.Z="/**\r\n * cn - 移入展开\r\n *    -- 设置 expandTrigger 为 'hover', 可以在鼠标移入节点时展开，默认为 'click'\r\n * en - Hover\r\n *    -- Set expandTrigger to 'hover', expand the node when mouse hover, default value is 'click'.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        value: 'zhejiang',\r\n        label: 'Zhejiang',\r\n        children: [\r\n            {\r\n                value: 'hangzhou',\r\n                label: 'Hangzhou',\r\n                children: [\r\n                    {\r\n                        value: 'xihu',\r\n                        label: 'West Lake',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'jiangsu',\r\n        label: 'Jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                label: 'Nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'zhonghuamen',\r\n                        label: 'Zhong Hua Men',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return <Cascader data={data} expandTrigger=\"hover\" style={{ width: 300 }} />\r\n}\r\n"},24499:function(e,n){n.Z="/**\r\n * cn - 禁用\r\n *    -- disabled 为函数时，根据返回结果禁用节点，同时禁用子节点\r\n *    -- disabled 为 true 时，禁用全部节点\r\n * en - disabled\r\n *    -- When the disabled property is a function, disable the node and its child nodes according to the returned result.\r\n *    -- When the disabled property is true, disable all nodes.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\nimport { cascader as data } from 'doc/data/tree'\r\n\r\nconst isDisabled = (d) => d.id === '1-0' || d.id === '2'\r\n\r\nexport default function () {\r\n    return <Cascader data={data} valueKey=\"id\" disabled={isDisabled} labelKey=\"text\" />\r\n}\r\n"},87284:function(e,n){n.Z="/**\r\n * cn - 动态加载\r\n *    -- 数据过大，需要动态加载时，可以设置 loader 函数，当展开未定义 children（undefined）的节点时，触发此函数\r\n * en - Lazy load\r\n *    -- Set the loader function to dynamic fetch data. This function is triggered when the undefined child node is expanded.\r\n */\r\nimport React, { useState } from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst initData = ['0', '1', '2', '3', '4', '5', '6', '7', '8'].map((i) => ({ label: `${i}`, value: i }))\r\nconst createRange = () => Array.from({ length: Math.round(Math.random() * 4) }, (_, i) => i)\r\n\r\nexport default function () {\r\n    const [data, setData] = useState(initData)\r\n\r\n    const onChange = (value) => {\r\n        console.log('onChange:', value)\r\n    }\r\n\r\n    const loadData = (dataItem, node) => {\r\n        console.log('loadData:', dataItem, node)\r\n\r\n        /** Modify the source data directly */\r\n        if (node.indexPath.length >= 3) {\r\n            dataItem.children = null\r\n\r\n            setData([...data])\r\n\r\n            return\r\n        }\r\n\r\n        setTimeout(() => {\r\n            dataItem.children = [\r\n                ...createRange().map((i) => {\r\n                    const v = `${dataItem.label}-${i}`\r\n\r\n                    return { value: v, label: v }\r\n                }),\r\n            ]\r\n\r\n            setData([...data])\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Cascader data={data} loader={loadData} onChange={onChange} style={{ width: 300 }} />\r\n            <br />\r\n            <Cascader\r\n                data={data}\r\n                loader={loadData}\r\n                onChange={onChange}\r\n                style={{ width: 300, marginTop: 10 }}\r\n                multiple\r\n            />\r\n        </div>\r\n    )\r\n}\r\n"},74009:function(e,n){n.Z="/**\r\n * cn - 显示结果的方式\r\n *    -- 通过设置 showResultMode 选择结果的显示方式。\r\n * en - ShowResultMode\r\n *    -- The showResultMode command is used to select a result display mode.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        label: 'Light',\r\n        value: 'light',\r\n        children: new Array(20).fill(null).map((_, index) => ({ label: `Number ${index}`, value: index })),\r\n    },\r\n    {\r\n        label: 'Bamboo',\r\n        value: 'bamboo',\r\n        children: [\r\n            {\r\n                label: 'Little',\r\n                value: 'little',\r\n                children: [\r\n                    {\r\n                        label: 'Toy Fish',\r\n                        value: 'fish',\r\n                    },\r\n                    {\r\n                        label: 'Toy Cards',\r\n                        value: 'cards',\r\n                    },\r\n                    {\r\n                        label: 'Toy Bird',\r\n                        value: 'bird',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                label: 'Little2',\r\n                value: 'little2',\r\n                children: [\r\n                    {\r\n                        label: 'Toy Fish2',\r\n                        value: 'fish2',\r\n                    },\r\n                    {\r\n                        label: 'Toy Cards2',\r\n                        value: 'cards2',\r\n                    },\r\n                    {\r\n                        label: 'Toy Bird2',\r\n                        value: 'bird2',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        label: 'Dark',\r\n        value: 'dark',\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Cascader\r\n                data={data}\r\n                style={{ width: 300, marginBottom: 20, display: 'block' }}\r\n                multiple\r\n                showResultMode=\"parent\"\r\n            />\r\n            <Cascader data={data} style={{ width: 300, marginBottom: 20, display: 'block' }} multiple />\r\n            <Cascader\r\n                data={data}\r\n                style={{ width: 300, marginBottom: 20, display: 'block' }}\r\n                multiple\r\n                showResultMode=\"child\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n"},15259:function(e,n){n.Z="/**\r\n * cn - 合并结果显示\r\n *    -- 将选中值合并显示,输入框响应式变化\r\n * en - Compressed\r\n *    -- The selected values are displayed in combination, and the input box changes in response.\r\n */\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\nimport { cascader as data } from 'doc/data/tree'\r\n\r\nexport default function () {\r\n    return <Cascader data={data} labelKey=\"text\" valueKey=\"id\" multiple compressed />\r\n}\r\n"},63962:function(e,n){n.Z="/**\r\n * cn - 过滤\r\n *    -- 可以直接搜索选项并选择。\r\n * en - Filter\r\n *   -- Search and select options directly.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Cascader } from 'ethan-ui'\r\n\r\nconst data = [\r\n    {\r\n        value: 'zhejiang',\r\n        label: 'Zhejiang',\r\n        children: [\r\n            {\r\n                value: 'hangzhou',\r\n                label: 'Hangzhou',\r\n                children: [\r\n                    {\r\n                        value: 'xihu',\r\n                        label: 'West Lake',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'jiangsu',\r\n        label: 'Jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                label: 'Nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'zhonghuamen',\r\n                        label: 'Zhong Hua Men',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nexport default function () {\r\n    return (\r\n        <div>\r\n            <Cascader\r\n                data={data}\r\n                placeholder=\"single\"\r\n                style={{ width: 300 }}\r\n                onChange={console.log}\r\n                onFilter\r\n                disabled={({ value }) => value === 'hangzhou'}\r\n            />\r\n            <br />\r\n            <Cascader\r\n                data={data}\r\n                multiple\r\n                placeholder=\"multiple\"\r\n                style={{ width: 300, marginTop: 20 }}\r\n                onChange={console.log}\r\n                onFilter\r\n            />\r\n        </div>\r\n    )\r\n}\r\n"}}]);