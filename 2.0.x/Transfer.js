"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[4195],{75722:function(e,n,t){t.d(n,{Z:function(){return C}});var r=t(87462),a=t(29439),o=t(93433),l=t(87363),c=t.n(l),i=t(92242),s=t.n(i),u=t(73727),d=t(22770),f=t(62625),m=t(94184),h=t.n(m),p=t(15660),y=t.n(p),g=(t(62356),function(e){var n=e.language,t=void 0===n?"lang-jsx":n,r=e.value,a=(0,l.useRef)(null);return(0,l.useEffect)((function(){y().highlightElement(a.current,!1)}),[]),c().createElement("pre",{ref:a,className:h()(t,(0,d.vf)("pre"))},c().createElement("code",null,r))}),v=t(84506),b=t(11888),T=t(91391),Z=function(e){var n=e.component,t=e.id,r=e.rawText,o=void 0===r?"":r,i=e.title,s=(0,l.useState)(!1),u=(0,a.Z)(s,2),f=u[0],m=u[1],h=(0,l.useRef)((0,l.createElement)(n)).current,p=o.replace(/(^|\n|\r)\s*\/\*[\s\S]*?\*\/\s*(?:\r|\n|$)/,"").trim(),y=i.split("\n"),Z=(0,v.Z)(y),E=Z[0],K=Z.slice(1),x=function(){m(!f)};return c().createElement(c().Fragment,null,E&&c().createElement("h3",{id:t},E),c().createElement(b.Zr,{placeholder:c().createElement("div",{className:(0,d.vf)("placeholder")},c().createElement(b.yC,{size:"54px",name:"four-dots",color:"#53a0fd"}))},c().createElement("div",{className:(0,d.vf)("_",f&&"showcode")},c().createElement("div",{className:(0,d.vf)("body")},h),i.length>0&&c().createElement("div",{className:(0,d.vf)("desc")},K.map((function(e,n){return c().createElement("div",{key:n,dangerouslySetInnerHTML:{__html:e}})})),c().createElement("a",{className:(0,d.vf)("toggle"),onClick:x},c().createElement(T.Z,{name:f?"code-close":"code"}))),c().createElement(b.y_.Transition,{visible:f,transitionTypes:["collapse","fade"]},c().createElement(g,{value:p}),c().createElement("a",{className:(0,d.vf)("toggle"),onClick:x},c().createElement(T.Z,{name:f?"code-close":"code"}))))))},E=c().memo(Z),K=function(e){var n=e.children,t=(0,o.Z)(n[1].props.children);try{t.sort((function(e,n){return e.props.children[0].props.children[0].localeCompare(n.props.children[0].props.children[0])}))}catch(e){console.log("sort fail...")}return c().createElement("div",{style:{overflow:"auto"}},c().createElement("table",{className:"doc-api-table"},n[0],c().cloneElement(n[1],{children:t})))},x=t(35087),S=function(e){var n=[],t=(0,l.useContext)(x.Z).setHeadings,i=e.source,m=e.examples;return c().useEffect((function(){t(n)}),[]),c().createElement(s(),{className:(0,d.EX)("_"),source:i,renderers:{code:g,heading:function(e){var t=e.level,r=e.children,a="h".concat(t),o="heading-".concat(function(e,n){return"".concat(e,"-").concat((n||"").replace(/[\W|-]/g,"-"))}(t,r[0]));return 2!==t&&3!==t||n.push({id:o,level:t,children:r}),c().createElement(a,{id:o},r)},table:K,html:function(e){return"<example />"===e.value?c().createElement(c().Fragment,null,function(){if(!m)return c().createElement("div",null);var e=(0,f.ZP)("示例","Example"),t="heading-example-h";return n.push({id:t,level:2,children:[e]}),[c().createElement("h2",{key:"h",id:t},e)].concat((0,o.Z)(m.map((function(e){var t="heading-".concat(e.name),o=e.title.split("\n"),l=(0,a.Z)(o,1)[0];return n.push({id:t,level:3,children:[l]}),c().createElement(E,(0,r.Z)({key:t,id:t},e))}))))}()):"<br>"===e.value||"<br />"===e.value?c().createElement("br",null):null},link:function(e){var n=0===e.href.indexOf("http")?"_blank":void 0;return n?c().createElement("a",{href:e.href,target:n},e.children):c().createElement(u.rU,{to:e.href},e.children)}}})},C=c().memo(S)},35087:function(e,n,t){var r=(0,t(87363).createContext)(void 0);n.Z=r},88981:function(e,n,t){var r=t(29439),a=t(87363),o=t.n(a),l=t(91291),c=t(22770),i=t(11888),s=t(75964),u=t(12025),d=t(35087),f=function(e){var n=e.children,t=(0,a.useState)(""),f=(0,r.Z)(t,2),m=f[0],h=f[1],p=(0,a.useState)([]),y=(0,r.Z)(p,2),g=y[0],v=y[1],b=(0,l.Z)().hash,T=(0,s.Z)((function(e){u.Z.push("".concat(u.Z.location.pathname,"#").concat(e));var n=document.getElementById(e);null==n||n.scrollIntoView()})),Z=(0,s.Z)((function(){var e=document.documentElement.scrollTop,n=g.filter((function(e){return 3===e.level&&e.children.length}));if(0!==n.length){var t=n[0].id;n.forEach((function(n){var r=document.querySelector("#".concat(n.id));(null==r?void 0:r.offsetTop)<=e&&(t=n.id)})),h(t)}}));(0,a.useEffect)((function(){if(Z(),b){var e=document.querySelector(b);setTimeout((function(){null==e||e.scrollIntoView()}),20)}return document.addEventListener("scroll",Z),function(){document.removeEventListener("scroll",Z)}}),[g]);var E=o().useMemo((function(){return{setHeadings:v}}),[]);return o().createElement("div",{className:(0,c.EH)("_")},o().createElement(d.Z.Provider,{value:E},n),o().createElement(i.Le,{className:(0,c.EH)("sticky"),top:50},o().createElement("div",{className:(0,c.EH)("nav")},g.map((function(e,n){var t=e.children.filter((function(e){return"string"==typeof e}));return o().createElement("a",{key:n,className:(0,c.EH)("level-".concat(e.level),m===e.id&&"active"),onClick:T.bind(null,e.id)},t)})))))};n.Z=o().memo(f)},7026:function(e,n,t){t.r(n),t.d(n,{default:function(){return d}});var r=t(87363),a=t.n(r),o=t(88981),l=t(75722),c=t(62625),i=t(36519),s=(0,c.ZP)('# Transfer _穿梭框_\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| 属性                | 类型                                                                 | 默认值   | 说明                                                                                |\r\n| ------------------- | -------------------------------------------------------------------- | -------- | ----------------------------------------------------------------------------------- |\r\n| value               | TransferDataValueType[]                                              | -        | 显示在右侧框数据的值集合                                                            |\r\n| titles              | ReactNode[]                                                          | -        | 两侧的标题, 顺序是从左到右                                                          |\r\n| data                | TransferData[]                                                       | -        | 数据源                                                                              |\r\n| renderItem          | (data: TransferData) => ReactNode                                    | -        | 自定义渲染内容                                                                      |\r\n| footers             | ReactNode[]                                                          | -        | 底部元素, 顺序是从左到右                                                            |\r\n| operations          | ReactNode[]                                                          | -        | 操作元素, 顺序是从上到下                                                            |\r\n| operationIcon       | boolean                                                              | true     | 是否显示操作按钮的图标                                                              |\r\n| className           | string                                                               | -        | 扩展的 class                                                                        |\r\n| style               | object                                                               | -        | 扩展的样式                                                                          |\r\n| listClassName       | string                                                               | -        | 列表扩展的 class                                                                    |\r\n| listStyle           | object                                                               | -        | 列表扩展的样式                                                                      |\r\n| selectedKeys        | TransferDataValueType[]                                              | -        | 被勾选的列表                                                                        |\r\n| defaultSelectedKeys | TransferDataValueType[]                                              | -        | 默认被勾选的列表                                                                    |\r\n| onSelectChange      | (sourceKeys: any[], targetKeys: TransferDataValueType[]) => void     | -        | 勾选触发的方法                                                                      |\r\n| disabled            | (data: TransferData) => boolean \\| boolean                           | -        | 如果 disabled 为 true，禁用全部选项，如果 disabled 为函数，根据函数反回结果禁用选项 |\r\n| empty               | ReactNode                                                            | "无数据" | 无内容的展示                                                                        |\r\n| onFilter            | (text: string, dataItem:TransferData , isSource: boolean) => boolean | -        | 筛选函数, 参数为: 输入文本, 数据, 是否为左侧数据                                    |\r\n| loading             | boolean \\| boolean[]                                                 | -        | 加载中, 如果需要两侧加载中状态不一致, 需要传入数组                                  |\r\n| onSearch            | (text: string, isSource: boolean) => void                            | -        | 输入框值变化的回调, 参数为: 输入文本, 是否为左侧数据                                |\r\n| listHeight          | number                                                               | 180      | 列表高度                                                                            |\r\n| lineHeight          | number                                                               | 32       | 列表行高                                                                            |\r\n| oneWay              | boolean                                                              | false    | 展示为单向样式                                                                      |\r\n','# Transfer\r\n\r\n<example />\r\n\r\n## API\r\n\r\n| Property            | Type                                                                 | Default   | Description                                                                                                                  |\r\n| ------------------- | -------------------------------------------------------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------- |\r\n| value               | TransferDataValueType[]                                              | -         | The set of values ​​displayed in the box data on the right                                                                   |\r\n| titles              | ReactNode[]                                                          | -         | Title on both sides, order from left to right                                                                                |\r\n| data                | TransferData[]                                                       | -         | Data source                                                                                                                  |\r\n| renderItem          | (data: TransferData) => ReactNode                                    | -         | Custom render item                                                                                                           |\r\n| footers             | ReactNode[]                                                          | -         | Bottom element, order from left to right                                                                                     |\r\n| operations          | ReactNode[]                                                          | -         | Operational elements, the order is from top to bottom                                                                        |\r\n| operationIcon       | boolean                                                              | true      | Whether to display the icon of the action                                                                                    |\r\n| className           | string                                                               | -         | Container class name                                                                                                         |\r\n| style               | object                                                               | -         | Container style                                                                                                              |\r\n| listClassName       | string                                                               | -         | List class name                                                                                                              |\r\n| listStyle           | object                                                               | -         | List style                                                                                                                   |\r\n| selectedKeys        | TransferDataValueType[]                                              | -         | A set of keys of selected items                                                                                              |\r\n| defaultSelectedKeys | TransferDataValueType[]                                              | -         | A set of keys of default selected items                                                                                      |\r\n| onSelectChange      | (sourceKeys: any[], targetKeys: TransferDataValueType[]) => void     | -         | A callback function which is executed when selected items are changed                                                        |\r\n| disabled            | (data: TransferData) => boolean \\| boolean                           | -         | When the value is true, disabled all checkboxes; When the value is function, disable the checkbox that this function returns |\r\n| empty               | ReactNode                                                            | "no data" | Empty content                                                                                                                |\r\n| onFilter            | (text: string, dataItem:TransferData , isSource: boolean) => boolean | -         | Filter function for search options filtering                                                                                 |\r\n| loading             | boolean \\| boolean[]                                                 | -         | List loading                                                                                                                 |\r\n| onSearch            | (text: string, isSource: boolean) => void                            | -         | A callback function which is executed when search field are changed                                                          |\r\n| listHeight          | number                                                               | 180       | List height                                                                                                                  |\r\n| lineHeight          | number                                                               | 32        | Item height                                                                                                                  |\r\n| oneWay              | boolean                                                              | false     | Display as single direction style                                                                                            |\r\n'),u=[{name:"1-base",title:(0,c.ZP)("基本用法 \n 基本的使用","Base \n Basic usage"),component:t(42529).Z,rawText:t(10637).Z},{name:"2-controlled",title:(0,c.ZP)("受控 \n 组件受控","Controlled \n Component controlled"),component:t(27012).Z,rawText:t(14127).Z},{name:"3-customTitle",title:(0,c.ZP)("自定义 \n 可以自定义标题, 按钮, 底部, 样式等属性","Customize \n Customizable title, button, bottom properties"),component:t(86761).Z,rawText:t(74515).Z},{name:"4-selected",title:(0,c.ZP)("受控选中 \n 可以通过 selectedKeys 和 onSelectChange 去控制哪些列表项被选中","Controlled selected \n Can control which elements are selected by selectedKeys and onSelectChange"),component:t(66267).Z,rawText:t(16055).Z},{name:"5-filter",title:(0,c.ZP)("筛选 \n 可以通过设置 onFilter 去筛选列表项","Filter \n Can filter list items by setting onFilter"),component:t(19827).Z,rawText:t(2918).Z},{name:"6-loading",title:(0,c.ZP)("加载中 \n 穿梭框的加载中","Loading \n Loading"),component:t(94104).Z,rawText:t(74530).Z},{name:"6-mloading",title:(0,c.ZP)(" \n 可以通过给 loading 设置数组的方式, 给两边设置一个不同的loading"," \n You can set an array for loading and set an unused loading for both sides"),component:t(58524).Z,rawText:t(53981).Z},{name:"7-bigdata",title:(0,c.ZP)("性能 \n Transfer 内部用懒加载机制来优化性能，本例加载了10000条数据"," \n Transfer uses a lazy loading to optimize performance. This example loads 10,000 pieces of data."),component:t(39574).Z,rawText:t(66306).Z},{name:"8-oneWay",title:(0,c.ZP)("单向 \n 通过 oneWay 将 Transfer 转为单向样式。","OneWay \n Use oneWay to makes Transfer to one way style."),component:t(78275).Z,rawText:t(78829).Z}],d=(0,i.Z)((function(){return a().createElement(o.Z,null,a().createElement(l.Z,{source:s,examples:u}))}))},42529:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<20;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{data:l,valueKey:"id",labelKey:"content",titles:["Source","Target"],onChange:console.log})}},27012:function(e,n,t){t.d(n,{Z:function(){return u}});for(var r=t(93433),a=t(29439),o=t(87363),l=t.n(o),c=t(11888),i=[],s=1;s<20;s++)i.push({id:s,content:"content ".concat(s)});function u(){var e=(0,o.useState)([1,3,5,7,9]),n=(0,a.Z)(e,2),t=n[0],s=n[1],u=(0,o.useState)([1,2]),d=(0,a.Z)(u,2),f=d[0],m=d[1];return l().createElement(c.FE,{data:i,value:t,selectedKeys:f,valueKey:"id",labelKey:"content",disabled:function(e){return e.content.indexOf("1")>-1},onChange:function(e){console.log("nextValue:",e),s(e)},onSelectChange:function(e,n){console.log("nextSelectedKeys:",e,n),m([].concat((0,r.Z)(e),(0,r.Z)(n)))}})}},86761:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<30;c++)l.push({id:c,content:"".concat(c)});function i(){return a().createElement(o.FE,{titles:["I am left","I am right"],footers:[a().createElement(o.zx,{style:{margin:4}},"left"),a().createElement(o.zx,{style:{margin:4}},"right")],data:l,labelKey:"content",valueKey:"id",operations:["to right","to left"],listHeight:240,renderItem:function(e){return"No.".concat(e.content)}})}},66267:function(e,n,t){t.d(n,{Z:function(){return u}});for(var r=t(93433),a=t(29439),o=t(87363),l=t.n(o),c=t(11888),i=[],s=1;s<20;s++)i.push({id:s,content:"content ".concat(s)});function u(){var e=(0,o.useState)([1,3,5,7,9]),n=(0,a.Z)(e,2),t=n[0],s=n[1],u=(0,o.useState)([1,2,3,4]),d=(0,a.Z)(u,2),f=d[0],m=d[1];return l().createElement(c.FE,{data:i,selectedKeys:f,onSelectChange:function(e,n){m([].concat((0,r.Z)(e),(0,r.Z)(n)))},value:t,onChange:function(e){console.log("nextValue:",e),s(e)},valueKey:"id",labelKey:"content"})}},19827:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<20;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{onFilter:function(e,n){return n.content.indexOf(e)>-1},data:l,valueKey:"id",labelKey:"content"})}},94104:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<20;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{loading:!0,data:l,labelKey:"content",valueKey:"id",titles:["Source","Target"]})}},58524:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<20;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{loading:[!0,!1],data:l,labelKey:"content",valueKey:"id",titles:["Source","Target"]})}},39574:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=0;c<1e4;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{data:l,valueKey:"id",labelKey:"content",titles:["Source","Target"]})}},78275:function(e,n,t){t.d(n,{Z:function(){return i}});for(var r=t(87363),a=t.n(r),o=t(11888),l=[],c=1;c<20;c++)l.push({id:c,content:"content ".concat(c)});function i(){return a().createElement(o.FE,{data:l,labelKey:"content",valueKey:"id",titles:["Source","Target"],oneWay:!0,disabled:function(e){return e.id%2==0},defaultValue:[1,2]})}},36519:function(e,n,t){var r=t(11888),a=t(87363),o=t.n(a);n.Z=function(e){var n=function(n){return(0,a.useEffect)((function(){return r.gb.finish(),function(){r.gb.start()}}),[]),o().createElement(e,n)};return o().memo(n)}},10637:function(e,n){n.Z="/**\r\n * cn - 基本用法\r\n *    -- 基本的使用\r\n * en - Base\r\n *    -- Basic usage\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return (\r\n        <Transfer data={data} valueKey=\"id\" labelKey=\"content\" titles={['Source', 'Target']} onChange={console.log} />\r\n    )\r\n}\r\n"},14127:function(e,n){n.Z="/**\r\n * cn - 受控\r\n *    -- 组件受控\r\n * en - Controlled\r\n *    -- Component controlled\r\n */\r\nimport React, { useState } from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    const [value, updateValue] = useState([1, 3, 5, 7, 9])\r\n    const [selectedKeys, updateSelectedKeys] = useState([1, 2])\r\n    return (\r\n        <Transfer\r\n            data={data}\r\n            value={value}\r\n            selectedKeys={selectedKeys}\r\n            valueKey=\"id\"\r\n            labelKey=\"content\"\r\n            disabled={(d) => d.content.indexOf('1') > -1}\r\n            onChange={(nextValue: number[]) => {\r\n                console.log('nextValue:', nextValue)\r\n                updateValue(nextValue)\r\n            }}\r\n            onSelectChange={(left: number[], right: number[]) => {\r\n                console.log('nextSelectedKeys:', left, right)\r\n                updateSelectedKeys([...left, ...right])\r\n            }}\r\n        />\r\n    )\r\n}\r\n"},74515:function(e,n){n.Z="/**\r\n * cn - 自定义\r\n *    -- 可以自定义标题, 按钮, 底部, 样式等属性\r\n * en - Customize\r\n *    -- Customizable title, button, bottom properties\r\n */\r\nimport React from 'react'\r\nimport { Transfer, Button } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 30; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return (\r\n        <Transfer\r\n            titles={['I am left', 'I am right']}\r\n            footers={[<Button style={{ margin: 4 }}>left</Button>, <Button style={{ margin: 4 }}>right</Button>]}\r\n            data={data}\r\n            labelKey=\"content\"\r\n            valueKey=\"id\"\r\n            operations={['to right', 'to left']}\r\n            listHeight={240}\r\n            renderItem={(dataItem) => `No.${dataItem.content}`}\r\n        />\r\n    )\r\n}\r\n"},16055:function(e,n){n.Z="/**\r\n * cn - 受控选中\r\n *    -- 可以通过 selectedKeys 和 onSelectChange 去控制哪些列表项被选中\r\n * en - Controlled selected\r\n *    -- Can control which elements are selected by selectedKeys and onSelectChange\r\n */\r\nimport React, { useState } from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    const [value, updateValue] = useState([1, 3, 5, 7, 9])\r\n    const [selectedKeys, updateSelectedKeys] = useState([1, 2, 3, 4])\r\n\r\n    return (\r\n        <Transfer\r\n            data={data}\r\n            selectedKeys={selectedKeys}\r\n            onSelectChange={(sourceKeys: number[], targetKeys: number[]) => {\r\n                updateSelectedKeys([...sourceKeys, ...targetKeys])\r\n            }}\r\n            value={value}\r\n            onChange={(nextValue: number[]) => {\r\n                console.log('nextValue:', nextValue)\r\n                updateValue(nextValue)\r\n            }}\r\n            valueKey=\"id\"\r\n            labelKey=\"content\"\r\n        />\r\n    )\r\n}\r\n"},2918:function(e,n){n.Z="/**\r\n * cn - 筛选\r\n *    -- 可以通过设置 onFilter 去筛选列表项\r\n * en - Filter\r\n *    -- Can filter list items by setting onFilter\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return <Transfer onFilter={(t, d) => d.content.indexOf(t) > -1} data={data} valueKey=\"id\" labelKey=\"content\" />\r\n}\r\n"},74530:function(e,n){n.Z="/**\r\n * cn - 加载中\r\n *    -- 穿梭框的加载中\r\n * en -  Loading\r\n *    -- Loading\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return <Transfer loading data={data} labelKey=\"content\" valueKey=\"id\" titles={['Source', 'Target']} />\r\n}\r\n"},53981:function(e,n){n.Z="/**\r\n * cn -\r\n *    -- 可以通过给 loading 设置数组的方式, 给两边设置一个不同的loading\r\n * en -\r\n *    -- You can set an array for loading and set an unused loading for both sides\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return (\r\n        <Transfer loading={[true, false]} data={data} labelKey=\"content\" valueKey=\"id\" titles={['Source', 'Target']} />\r\n    )\r\n}\r\n"},66306:function(e,n){n.Z="/**\r\n * cn - 性能\r\n *    -- Transfer 内部用懒加载机制来优化性能，本例加载了10000条数据\r\n * en -\r\n *    -- Transfer uses a lazy loading to optimize performance. This example loads 10,000 pieces of data.\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 0; i < 10000; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return <Transfer data={data} valueKey=\"id\" labelKey=\"content\" titles={['Source', 'Target']} />\r\n}\r\n"},78829:function(e,n){n.Z="/**\r\n * cn -  单向\r\n *    -- 通过 oneWay 将 Transfer 转为单向样式。\r\n * en -  OneWay\r\n *    -- Use oneWay to makes Transfer to one way style.\r\n */\r\nimport React from 'react'\r\nimport { Transfer } from 'ethan-ui'\r\n\r\nconst data = []\r\n\r\nfor (let i = 1; i < 20; i++) {\r\n    data.push({\r\n        id: i,\r\n        content: `content ${i}`,\r\n    })\r\n}\r\n\r\nexport default function () {\r\n    return (\r\n        <Transfer\r\n            data={data}\r\n            labelKey=\"content\"\r\n            valueKey=\"id\"\r\n            titles={['Source', 'Target']}\r\n            oneWay\r\n            disabled={({ id }) => id % 2 === 0}\r\n            defaultValue={[1, 2]}\r\n        />\r\n    )\r\n}\r\n"}}]);